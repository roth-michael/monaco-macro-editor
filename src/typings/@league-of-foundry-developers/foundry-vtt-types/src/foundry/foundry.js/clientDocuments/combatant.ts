
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/foundry.js/clientDocuments/combatant.d.ts",
      "import { ConfiguredDocumentClass } from '../../../types/helperTypes';\nimport { BaseUser } from '../../common/documents.mjs';\n\ndeclare global {\n  /**\n   * The client-side Combatant document which extends the common BaseCombatant model.\n   * Each Combatant belongs to the effects collection of its parent Document.\n   * Each Combatant contains a CombatantData object which provides its source data.\n   *\n   * @see {@link data.CombatantData}                  The Combatant data schema\n   * @see {@link documents.Combat}                    The Combat document which contains Combatant embedded documents\n   * @see {@link applications.CombatantConfig}        The Combatant configuration application\n   */\n  class Combatant extends ClientDocumentMixin(foundry.documents.BaseCombatant) {\n    /**\n     * @override\n     * @param data    - Initial data provided to construct the Combatant document\n     * @param context - The document context, see {@link foundry.abstract.Document}\n     */\n    constructor(\n      data: ConstructorParameters<typeof foundry.documents.BaseCombatant>[0],\n      context: ConstructorParameters<typeof foundry.documents.BaseCombatant>[1]\n    );\n\n    /**\n     * A cached reference to the Token which this Combatant represents, if any\n     * @defaultValue `undefined`\n     * */\n    protected _token: InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BaseToken>> | null | undefined;\n\n    /**\n     * A cached reference to the Actor which this Combatant represents, if any\n     * @defaultValue `undefined`\n     * */\n    protected _actor: InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BaseActor>> | null | undefined;\n\n    /** The current value of the special tracked resource which pertains to this Combatant */\n    resource: `${number}` | number | boolean | null;\n\n    /**\n     * A convenience alias of Combatant#parent which is more semantically intuitive\n     */\n    get combat(): InstanceType<ConfiguredDocumentClass<typeof Combat>> | null;\n\n    /** Determine the image icon path that should be used to portray this Combatant in the combat tracker or elsewhere */\n    get img(): string;\n\n    /**  A convenience reference to the current initiative score of this Combatant */\n    get initiative(): number | null;\n\n    /** This is treated as a non-player combatant if it has no associated actor and no player users who can control it */\n    get isNPC(): boolean;\n\n    /** @override */\n    get isOwner(): boolean;\n\n    /** Is this Combatant entry currently visible in the Combat Tracker? */\n    get isVisible(): boolean;\n\n    /** Is this Combatant \"hidden\", either because they are explicitly marked as hidden or because their token is hidden */\n    get hidden(): boolean;\n\n    /** The displayed name for the Combatant is based off its own configured data, or the data of its represented Token. */\n    get name(): string;\n\n    /** A reference to the Actor document which this Combatant represents, if any */\n    get actor(): InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BaseActor>> | null;\n\n    /** A reference to the Token document which this Combatant represents, if any */\n    get token(): InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BaseToken>> | null;\n\n    /** An array of User documents who have ownership of this Document */\n    get players(): InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BaseUser>>[];\n\n    /** @override */\n    testUserPermission(\n      user: BaseUser,\n      permission: keyof typeof foundry.CONST.ENTITY_PERMISSIONS | foundry.CONST.EntityPermission,\n      { exact }?: { exact?: boolean }\n    ): boolean;\n\n    /**\n     * Get a Roll object which represents the initiative roll for this Combatant.\n     * @param formula -  An explicit Roll formula to use for the combatant.\n     * @returns The Roll instance to use for the combatant.\n     */\n    getInitiativeRoll(formula?: string): Roll;\n\n    /**\n     * Roll initiative for this particular combatant.\n     * @param formula - A dice formula which overrides the default for this Combatant.\n     * @returns The Roll instance to use for the combatant.\n     */\n    rollInitiative(formula: string): Promise<this | undefined>;\n\n    /** @override */\n    prepareDerivedData(): void;\n\n    /**\n     * Update the value of the tracked resource for this Combatant.\n     */\n    updateResource(): this['resource'];\n\n    /**\n     * Acquire the default dice formula which should be used to roll initiative for this combatant.\n     * Modules or systems could choose to override or extend this to accommodate special situations.\n     * @returns  The initiative formula to use for this combatant.\n     */\n    protected _getInitiativeFormula(): string;\n  }\n}\nexport {};\n"
    ]
  