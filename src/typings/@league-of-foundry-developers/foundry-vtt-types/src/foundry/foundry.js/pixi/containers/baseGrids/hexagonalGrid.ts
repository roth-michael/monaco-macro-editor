
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/foundry.js/pixi/containers/baseGrids/hexagonalGrid.d.ts",
      "/**\n * Construct a hexagonal grid\n */\ndeclare class HexagonalGrid extends BaseGrid {\n  constructor(options: BaseGrid.GridOptions);\n\n  columns: boolean;\n\n  even: boolean;\n\n  h: number;\n\n  w: number;\n\n  /**\n   * A matrix of x and y offsets which is multiplied by the width/height vector to get pointy-top polygon coordinates\n   */\n  static get pointyHexPoints(): PointArray[];\n\n  /**\n   * A matrix of x and y offsets which is multiplied by the width/height vector to get flat-top polygon coordinates\n   */\n  static get flatHexPoints(): PointArray[];\n\n  /**\n   * An array of the points which define a hexagon for this grid shape\n   */\n  get hexPoints(): PointArray[];\n\n  /** @override */\n  draw(): this;\n\n  /**\n   * A convenience method for getting all the polygon points relative to a top-left [x,y] coordinate pair\n   * @param x - The top-left x-coordinate\n   * @param y - The top-right y-coordinate\n   * @param w - An optional polygon width\n   * @param h - An optional polygon height\n   */\n  getPolygon(x: number, y: number, w?: number, h?: number): PointArray[];\n\n  protected _drawGrid(): PIXI.Graphics;\n\n  protected _drawRows(grid: PIXI.Graphics, nrows: number, ncols: number): void;\n\n  protected _drawColumns(grid: PIXI.Graphics, nrows: number, ncols: number): void;\n\n  /**\n   * Get the position in grid space from a pixel coordinate.\n   * @param x      - The origin x-coordinate\n   * @param y      - The origin y-coordinate\n   * @param method - The rounding method applied\n   *                 (default: `\"floor\"`)\n   * @returns The row, column combination\n   */\n  getGridPositionFromPixels(x: number, y: number, method?: 'floor' | 'ceil' | 'round'): PointArray;\n\n  /** @override */\n  getPixelsFromGridPosition(row: number, col: number): PointArray;\n\n  /** @override */\n  getCenter(x: number, y: number): PointArray;\n\n  /**\n   * @override\n   * @param interval - (default: `1`)\n   */\n  getSnappedPosition(x: number, y: number, interval?: number | null): { x: number; y: number };\n\n  _getClosestVertex(xc: number, yc: number, ox: number, oy: number): { x: number; y: number };\n\n  /** @override */\n  shiftPosition(x: number, y: number, dx: number, dy: number): PointArray;\n\n  /**\n   * @override\n   * @param options - (default: `{}`)\n   */\n  highlightGridPosition(layer: GridHighlight, options?: BaseGrid.HighlightGridPositionOptions): void;\n\n  /** @override */\n  getNeighbors(row: number, col: number): PointArray[];\n\n  /**\n   * @override\n   * @param options - (default: `{}`)\n   */\n  measureDistances(segments: GridLayer.Segment[], options?: BaseGrid.MeasureDistancesOptions): number[];\n\n  /**\n   * Convert an offset coordinate (row, col) into a cube coordinate (q, r, s).\n   * See https://www.redblobgames.com/grids/hexagons/ for reference\n   * Source code available https://www.redblobgames.com/grids/hexagons/codegen/output/lib-functions.js\n   * @param row - The row number\n   * @param col - The column number\n   */\n  offsetToCube(row: number, col: number): { q: number; r: number; s: number };\n\n  /**\n   * Convert a cube coordinate (q, r, s) into an offset coordinate (row, col).\n   * See https://www.redblobgames.com/grids/hexagons/ for reference\n   * Source code available https://www.redblobgames.com/grids/hexagons/codegen/output/lib-functions.js\n   * @param q - Cube coordinate 1\n   * @param r - Cube coordinate 2\n   * @param s - Cube coordinate 3\n   */\n  cubeToOffset(q: number, r: number, s: number): { row: number; col: number };\n\n  /**\n   * Given a cursor position (x, y), obtain the cube coordinate hex (q, r, s) of the hex which contains it\n   * http://justinpombrio.net/programming/2020/04/28/pixel-to-hex.html\n   * @param x - The x-coordinate in pixels\n   * @param y - The y-coordinate in pixels\n   */\n  static pixelToCube(x: number, y: number): [q: number, r: number, s: number];\n\n  /**\n   * Measure the distance in hexagons between two cube coordinates\n   */\n  static cubeDistance(a: { q: number; r: number; s: number }, b: { q: number; r: number; s: number }): number;\n}\n"
    ]
  