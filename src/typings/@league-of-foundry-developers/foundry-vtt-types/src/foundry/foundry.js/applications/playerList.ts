
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/foundry.js/applications/playerList.d.ts",
      "import { ConfiguredDocumentClass } from '../../../types/helperTypes';\n\ndeclare global {\n  /**\n   * The UI element which displays the list of Users who are currently playing within the active World.\n   *\n   * @typeParam Options - the type of the options object\n   */\n  class PlayerList<Options extends Application.Options = Application.Options> extends Application<Options> {\n    constructor(options?: Partial<Options>);\n\n    /**\n     * An internal toggle for whether or not to show offline players or hide them\n     * @defaultValue `false`\n     */\n    protected _showOffline: boolean;\n\n    /**\n     * @defaultValue\n     * ```typescript\n     * mergeObject(super.defaultOptions, {\n     *   id: \"players\",\n     *   template: \"templates/user/players.html\",\n     *   popOut: false\n     * })\n     * ```\n     */\n    static get defaultOptions(): Application.Options;\n\n    /** @override */\n    render(force?: boolean, options?: Application.RenderOptions<Options>): this;\n\n    /** @override */\n    getData(options?: Partial<Options>): PlayerList.Data | Promise<PlayerList.Data>;\n\n    /** @override */\n    activateListeners(html: JQuery): void;\n\n    /**\n     * Return the default context options available for the Players application\n     */\n    protected _getUserContextOptions(): ContextMenuEntry[];\n\n    /**\n     * Toggle display of the Players hud setting for whether or not to display offline players\n     * @param event - The originating click event\n     */\n    protected _onToggleOfflinePlayers(event: JQuery.ClickEvent): void;\n  }\n\n  namespace PlayerList {\n    interface Data {\n      users: StoredDocument<InstanceType<ConfiguredDocumentClass<typeof User>>>[];\n      showOffline: boolean;\n      hide: boolean;\n    }\n  }\n}\n"
    ]
  