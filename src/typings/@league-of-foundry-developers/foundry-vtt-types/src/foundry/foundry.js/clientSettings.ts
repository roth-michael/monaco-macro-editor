
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/foundry.js/clientSettings.d.ts",
      "/**\n * A class responsible for managing defined game settings or settings menus.\n * Each setting is a string key/value pair belonging to a certain package and a certain store scope.\n *\n * When Foundry Virtual Tabletop is initialized, a singleton instance of this class is constructed within the global\n * Game object as as game.settings.\n *\n * @see {@link Game#settings}\n * @see {@link Settings}\n * @see {@link SettingsConfig}\n */\ndeclare class ClientSettings {\n  constructor(worldSettings?: Setting['data']['_source'][]);\n\n  /**\n   * A object of registered game settings for this scope\n   */\n  settings: Map<string, ClientSettings.CompleteSetting>;\n\n  /**\n   * Registered settings menus which trigger secondary applications\n   */\n  menus: Map<string, ClientSettings.CompleteMenuSetting>;\n\n  /**\n   * The storage interfaces used for persisting settings\n   * Each storage interface shares the same API as window.localStorage\n   * @remarks This is a lie, it doesn't actually have the same interface...\n   */\n  storage: Map<string, Storage | WorldSettings>;\n\n  /**\n   * The types of settings which should be constructed as a primitive type\n   */\n  protected static PRIMITIVE_TYPES: [typeof String, typeof Number, typeof Boolean, typeof Array];\n\n  /**\n   * Return a singleton instance of the Game Settings Configuration app\n   */\n  get sheet(): SettingsConfig;\n\n  /**\n   * Register a new game setting under this setting scope\n   *\n   * @param module - The namespace under which the setting is registered\n   * @param key    - The key name for the setting under the namespace module\n   * @param data   - Configuration for setting data\n   * @typeParam M  - The module name to register the setting for\n   * @typeParam K  - The key to register the setting for\n   * @typeParam T  - The type of the setting value\n   *\n   * @example\n   * ```typescript\n   * // Register a client setting\n   * game.settings.register(\"myModule\", \"myClientSetting\", {\n   *   name: \"Register a Module Setting with Choices\",\n   *   hint: \"A description of the registered setting and its behavior.\",\n   *   scope: \"client\",     // This specifies a client-stored setting\n   *   config: true,        // This specifies that the setting appears in the configuration view\n   *   type: String,\n   *   choices: {           // If choices are defined, the resulting setting will be a select menu\n   *     \"a\": \"Option A\",\n   *     \"b\": \"Option B\"\n   *   },\n   *   default: \"a\",        // The default value for the setting\n   *   onChange: value => { // A callback function which triggers when the setting is changed\n   *     console.log(value)\n   *   }\n   * });\n   * ```\n   *\n   * @example\n   * ```typescript\n   * // Register a world setting\n   * game.settings.register(\"myModule\", \"myWorldSetting\", {\n   *   name: \"Register a Module Setting with a Range slider\",\n   *   hint: \"A description of the registered setting and its behavior.\",\n   *   scope: \"world\",      // This specifies a world-level setting\n   *   config: true,        // This specifies that the setting appears in the configuration view\n   *   type: Number,\n   *   range: {             // If range is specified, the resulting setting will be a range slider\n   *     min: 0,\n   *     max: 100,\n   *     step: 10\n   *   }\n   *   default: 50,         // The default value for the setting\n   *   onChange: value => { // A callback function which triggers when the setting is changed\n   *     console.log(value)\n   *   }\n   * });\n   * ```\n   */\n  register<M extends string, K extends string, T>(\n    module: M,\n    key: K,\n    data: ClientSettings.Values[`${M}.${K}`] extends boolean | number | bigint | string | symbol | object\n      ? ClientSettings.PartialSetting<ClientSettings.Values[`${M}.${K}`]>\n      : ClientSettings.PartialSetting<T>\n  ): void;\n\n  /**\n   * Register a new sub-settings menu\n   *\n   * @param module - The namespace under which the menu is registered\n   * @param key    - The key name for the setting under the namespace module\n   * @param data   - Configuration for setting data\n   * @typeParam M  - The module name to register the menu setting for\n   * @typeParam K  - The key to register the menu setting for\n   *\n   * @example\n   * ```typescript\n   * // Define a settings submenu which handles advanced configuration needs\n   * game.settings.registerMenu(\"myModule\", \"mySettingsMenu\", {\n   *   name: \"My Settings Submenu\",\n   *   label: \"Settings Menu Label\",      // The text label used in the button\n   *   hint: \"A description of what will occur in the submenu dialog.\",\n   *   icon: \"fas fa-bars\",               // A Font Awesome icon used in the submenu button\n   *   type: MySubmenuApplicationClass,   // A FormApplication subclass which should be created\n   *   restricted: true                   // Restrict this submenu to gamemaster only?\n   * });\n   * ```\n   */\n  registerMenu<M extends string, K extends string>(\n    module: M,\n    key: K,\n    data: ClientSettings.RegisteredMenuSettings[`${M}.${K}`]\n  ): void;\n\n  /**\n   * Get the value of a game setting for a certain module and setting key\n   *\n   * @param module - The module namespace under which the setting is registered\n   * @param key    - The setting key to retrieve\n   * @typeParam M  - The module name to register the get for\n   * @typeParam K  - The key to get the setting for\n   *\n   * @example\n   * ```typescript\n   * // Retrieve the current setting value\n   * game.settings.get(\"myModule\", \"myClientSetting\");\n   * ```\n   */\n  get<M extends string, K extends string>(module: M, key: K): ClientSettings.Values[`${M}.${K}`];\n\n  /**\n   * Set the value of a game setting for a certain module and setting key\n   *\n   * @param module - The module namespace under which the setting is registered\n   * @param key    - The setting key to retrieve\n   * @param value  - The data to assign to the setting key\n   * @typeParam M  - The module name to register the get for\n   * @typeParam K  - The key to get the setting for\n   * @typeParam V  - The value type to get the value for\n   *\n   * @example\n   * ```typescript\n   * // Update the current value of a setting\n   * game.settings.set(\"myModule\", \"myClientSetting\", \"b\");\n   * ```\n   */\n  set<M extends string, K extends string, V extends ClientSettings.Values[`${M}.${K}`]>(\n    module: M,\n    key: K,\n    value: V\n  ): Promise<V>;\n}\n\ndeclare namespace ClientSettings {\n  interface CompleteSetting<T = unknown> extends PartialSetting<T> {\n    key: string;\n    module: string;\n  }\n\n  interface CompleteMenuSetting extends PartialMenuSetting {\n    key: string;\n    module: string;\n  }\n\n  interface PartialSetting<T = unknown> {\n    choices?: Record<string, string>;\n    config?: boolean;\n    default?: T;\n    hint?: string;\n    name?: string;\n    onChange?: (value: T) => void;\n    range?: T extends number\n      ? {\n          max: number;\n          min: number;\n          step: number;\n        }\n      : undefined;\n    filePicker?: T extends string ? true | 'audio' | 'image' | 'video' | 'imagevideo' | 'folder' : undefined;\n    scope: string;\n    type?: T extends boolean\n      ? typeof Boolean\n      : T extends number\n      ? typeof Number\n      : T extends bigint\n      ? typeof BigInt\n      : T extends string\n      ? typeof String\n      : T extends symbol\n      ? typeof Symbol\n      : ConstructorOf<T>;\n  }\n\n  interface PartialMenuSetting {\n    hint?: string;\n    icon?: string;\n    label?: string;\n    name?: string;\n    restricted: boolean;\n    type: ConstructorOf<FormApplication<FormApplication.Options, object>>;\n  }\n\n  interface RegisteredMenuSettings {\n    [key: string]: PartialMenuSetting;\n  }\n\n  interface Values {\n    'core.combatTrackerConfig': { resource: string; skipDefeated: boolean };\n    'core.compendiumConfiguration': Partial<Record<string, CompendiumCollection.Configuration>>;\n    'core.rollMode': foundry.CONST.DiceRollMode;\n    'core.animateRollTable': boolean;\n    'core.permissions': Game.Permissions;\n    'core.defaultDrawingConfig': foundry.data.DrawingData['_source'] | {};\n    'core.time': number;\n    'core.globalPlaylistVolume': number;\n    'core.globalAmbientVolume': number;\n    'core.globalInterfaceVolume': number;\n    [key: string]: unknown;\n  }\n}\n"
    ]
  