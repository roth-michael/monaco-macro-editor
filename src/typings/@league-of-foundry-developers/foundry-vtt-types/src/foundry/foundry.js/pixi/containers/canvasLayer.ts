
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/foundry.js/pixi/containers/canvasLayer.d.ts",
      "/**\n * An abstract pattern for primary layers of the game canvas to implement\n * @typeParam Options - The type of the options in this layer.\n */\ndeclare abstract class CanvasLayer<Options extends CanvasLayerOptions = CanvasLayerOptions> extends PIXI.Container {\n  constructor();\n\n  /**\n   * Options for this layer instance.\n   * @defaultValue `this.constructor.layerOptions`\n   */\n  options: Options;\n\n  /**\n   * @defaultValue `false`\n   */\n  interactive: boolean;\n\n  /**\n   * @defaultValue `false`\n   */\n  interactiveChildren: boolean;\n\n  /**\n   * Track whether the canvas layer is currently active for interaction\n   * @defaultValue `false`\n   */\n  protected _active: boolean;\n\n  /**\n   * Customize behaviors of this CanvasLayer by modifying some behaviors at a class level.\n   */\n  static get layerOptions(): CanvasLayerOptions;\n\n  /**\n   * Return a reference to the active instance of this canvas layer\n   */\n  static get instance(): CanvasLayer | undefined;\n\n  /**\n   * The canonical name of the CanvasLayer\n   * @remarks Foundry defines this as a getter, but since CanvasLayer extends PIXI.Container, it has to be a property.\n   */\n  readonly name: string;\n\n  /**\n   * Draw the canvas layer, rendering its internal components and returning a Promise\n   * The Promise resolves to the drawn layer once its contents are successfully rendered.\n   * @remarks It returns Promise<this> but is overridden by a subclass in this way.\n   */\n  draw(): Promise<this | undefined> | this;\n\n  /**\n   * Deconstruct data used in the current layer in preparation to re-draw the canvas\n   */\n  tearDown(): Promise<this>;\n\n  /**\n   * Activate the CanvasLayer, deactivating other layers and marking this layer's children as interactive.\n   * @returns The layer instance, now activated\n   */\n  activate(): this;\n\n  /**\n   * Deactivate the CanvasLayer, removing interactivity from its children.\n   * @returns The layer instance, now inactive\n   * @remarks It returns Promise<this> but is overridden by a subclass returning void.\n   */\n  deactivate(): this | void;\n\n  /**\n   * Get the zIndex that should be used for ordering this layer vertically relative to others in the same Container.\n   */\n  getZIndex(): number;\n}\n\n/**\n * Options which configure the behavior of a Canvas Layer.\n */\ndeclare interface CanvasLayerOptions {\n  /**\n   * The layer name by which the instance is referenced within the Canvas\n   */\n  name: string;\n\n  /**\n   * The zIndex sorting of this layer relative to other layers\n   */\n  zIndex: number;\n\n  /**\n   * Should this layer be sorted to the top when it is active?\n   */\n  sortActiveTop: boolean;\n}\n\ndeclare namespace CanvasLayer {\n  /**\n   * Options which configure the behavior of a Canvas Layer.\n   * @remarks This type exists for consistency\n   */\n  type LayerOptions = CanvasLayerOptions;\n}\n"
    ]
  