
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/common/documents.mjs/baseScene.d.ts",
      "import { DocumentMetadata } from '../abstract/document.mjs';\nimport { Document } from '../abstract/module.mjs';\nimport * as data from '../data/data.mjs';\nimport { BaseAmbientLight } from './baseAmbientLight';\nimport { BaseAmbientSound } from './baseAmbientSound';\nimport { BaseDrawing } from './baseDrawing';\nimport { BaseMeasuredTemplate } from './baseMeasuredTemplate';\nimport { BaseNote } from './baseNote';\nimport { BaseTile } from './baseTile';\nimport { BaseToken } from './baseToken';\nimport { BaseWall } from './baseWall';\n\n/**\n * The base Scene model definition which defines common behavior of an Scene document between both client and server.\n */\nexport declare class BaseScene extends Document<data.SceneData> {\n  /** @override */\n  static get schema(): typeof data.SceneData;\n\n  /** @override */\n  static get metadata(): Merge<\n    DocumentMetadata,\n    {\n      name: 'Scene';\n      collection: 'scenes';\n      label: 'DOCUMENT.Scene';\n      isPrimary: true;\n      embedded: {\n        AmbientLight: typeof BaseAmbientLight;\n        AmbientSound: typeof BaseAmbientSound;\n        Drawing: typeof BaseDrawing;\n        MeasuredTemplate: typeof BaseMeasuredTemplate;\n        Note: typeof BaseNote;\n        Tile: typeof BaseTile;\n        Token: typeof BaseToken;\n        Wall: typeof BaseWall;\n      };\n    }\n  >;\n\n  /**\n   * A reference to the Collection of Drawing instances in the Scene document, indexed by _id.\n   */\n  get drawings(): this['data']['drawings'];\n\n  /**\n   * A reference to the Collection of AmbientLight instances in the Scene document, indexed by _id.\n   */\n  get lights(): this['data']['lights'];\n\n  /**\n   * A reference to the Collection of Note instances in the Scene document, indexed by _id.\n   */\n  get notes(): this['data']['notes'];\n\n  /**\n   * A reference to the Collection of AmbientSound instances in the Scene document, indexed by _id.\n   */\n  get sounds(): this['data']['sounds'];\n\n  /**\n   * A reference to the Collection of MeasuredTemplate instances in the Scene document, indexed by _id.\n   */\n  get templates(): this['data']['templates'];\n\n  /**\n   * A reference to the Collection of Token instances in the Scene document, indexed by _id.\n   */\n  get tokens(): this['data']['tokens'];\n\n  /**\n   * A reference to the Collection of Tile instances in the Scene document, indexed by _id.\n   */\n  get tiles(): this['data']['tiles'];\n\n  /**\n   * A reference to the Collection of Wall instances in the Scene document, indexed by _id.\n   */\n  get walls(): this['data']['walls'];\n\n  /**\n   * Get the Canvas dimensions which would be used to display this Scene.\n   * Apply padding to enlarge the playable space and round to the nearest 2x grid size to ensure symmetry.\n   * @returns An object describing the configured dimensions\n   */\n  static getDimensions({\n    width,\n    height,\n    size,\n    gridDistance,\n    padding,\n    shiftX,\n    shiftY\n  }?: Partial<DimensionsArguments>): Dimensions;\n}\n\ninterface DimensionsArguments {\n  width: number;\n  height: number;\n  size: number;\n  gridDistance: number;\n  padding: number;\n  shiftX: number;\n  shiftY: number;\n}\n\ninterface Dimensions {\n  sceneWidth: number;\n  sceneHeight: number;\n  size: number;\n  distance: number;\n  shiftX: number;\n  shiftY: number;\n  ratio: number;\n  paddingX: number;\n  width: number;\n  paddingY: number;\n  height: number;\n}\n"
    ]
  