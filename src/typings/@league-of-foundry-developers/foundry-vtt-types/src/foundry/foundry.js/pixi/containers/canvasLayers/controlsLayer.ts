
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/foundry.js/pixi/containers/canvasLayers/controlsLayer.d.ts",
      "/**\n * A CanvasLayer for displaying UI controls which are overlayed on top of other layers.\n *\n * We track three types of events:\n * 1) Cursor movement\n * 2) Ruler measurement\n * 3) Map pings\n */\nimport { ConfiguredDocumentClass, ConfiguredObjectClassForName } from '../../../../../types/helperTypes';\n\ndeclare global {\n  class ControlsLayer extends CanvasLayer<ControlsLayer.LayerOptions> {\n    constructor();\n\n    /**\n     * Cursor position indicators\n     * @defaultValue `null`\n     */\n    cursors: PIXI.Container | null;\n\n    /**\n     * A mapping of user IDs to Cursor instances for quick access\n     * @defaultValue `{}`\n     */\n    protected _cursors: Partial<Record<string, Cursor>>;\n\n    /**\n     * Door control icons\n     * @defaultValue `null`\n     */\n    doors: PIXI.Container | null;\n\n    /**\n     * Status effect icons\n     * @remarks Always `null`\n     */\n    effects: null;\n\n    /**\n     * Ruler tools, one per connected user\n     * @defaultValue `null`\n     */\n    rulers: PIXI.Container | null;\n\n    /**\n     * A convenience mapping of user IDs to Ruler instances for quick access\n     */\n    protected _rulers: Partial<Record<string, Ruler>>;\n\n    /**\n     * Canvas selection rectangle\n     * @defaultValue `null`\n     */\n    select: PIXI.Graphics | null;\n\n    // The controls layer is always interactive\n    interactiveChildren: true;\n\n    /**\n     * @remarks This is not overridden in foundry but reflects the real behavior.\n     */\n    static get instance(): undefined;\n\n    /**\n     * @override\n     * @defaultValue `mergeObject(super.layerOptions, { name: \"controls\", zIndex: 1000 })`\n     */\n    static get layerOptions(): ControlsLayer.LayerOptions;\n\n    /**\n     * A convenience accessor to the Ruler for the active game user\n     */\n    get ruler(): ReturnType<ControlsLayer['getRulerForUser']>;\n\n    /**\n     * Get the Ruler display for a specific User ID\n     */\n    getRulerForUser(userId: string): Ruler | null;\n\n    /** @override */\n    draw(): this;\n\n    /**\n     * Draw the cursors container\n     */\n    drawCursors(): void;\n\n    /**\n     * Draw the Door controls container\n     */\n    drawDoors(): void;\n\n    /**\n     * Create a Door Control icon for a given Wall object\n     * @param wall - The Wall for which to create a DoorControl\n     * @returns The created DoorControl\n     */\n    createDoorControl(wall: InstanceType<ConfiguredObjectClassForName<'Wall'>>): ReturnType<DoorControl['draw']> | null;\n\n    /**\n     * Draw Ruler tools\n     */\n    drawRulers(): void;\n\n    /**\n     * Draw the select rectangle given an event originated within the base canvas layer\n     * @param coords - The rectangle coordinates of the form `{x, y, width, height}`\n     */\n    drawSelect({ x, y, width, height }: { x: number; y: number; width: number; height: number }): void;\n\n    /** @override */\n    deactivate(): void;\n\n    /**\n     * Handle mousemove events on the game canvas to broadcast activity of the user's cursor position\n     */\n    protected _onMoveCursor(event: PIXI.InteractionEvent): void;\n\n    /**\n     * Create and draw the Cursor object for a given User\n     * @param user - The User entity for whom to draw the cursor Container\n     */\n    drawCursor(user: InstanceType<ConfiguredDocumentClass<typeof User>>): Cursor;\n\n    /**\n     * Update the cursor when the user moves to a new position\n     * @param user     - The User for whom to update the cursor\n     * @param position - The new cursor position\n     */\n    updateCursor(user: InstanceType<ConfiguredDocumentClass<typeof User>>, position: Point | null): void;\n\n    /**\n     * Update display of an active Ruler object for a user given provided data\n     */\n    updateRuler(\n      user: InstanceType<ConfiguredDocumentClass<typeof User>>,\n      rulerData: Parameters<Ruler['update']>[0] | null\n    ): void;\n  }\n\n  namespace ControlsLayer {\n    interface LayerOptions extends CanvasLayer.LayerOptions {\n      name: 'controls';\n      zIndex: 1000;\n    }\n  }\n}\n"
    ]
  