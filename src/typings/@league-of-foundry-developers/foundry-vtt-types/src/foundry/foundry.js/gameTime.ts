
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/foundry.js/gameTime.d.ts",
      "/**\n * A singleton class {@link game#time} which keeps the official Server and World time stamps.\n * Uses a basic implementation of https://www.geeksforgeeks.org/cristians-algorithm/ for synchronization.\n */\ndeclare class GameTime {\n  constructor(socket?: io.Socket | null);\n\n  /**\n   * The most recently synchronized timestamps retrieved from the server.\n   * @defaultValue `{}`\n   */\n  protected _time: GameTime.Timestamps;\n\n  /**\n   * The average one-way latency across the most recent 5 trips\n   * @defaultValue `0`\n   */\n  protected _dt: number;\n\n  /**\n   * The most recent five synchronization durations\n   * @defaultValue `[]`\n   */\n  protected _dts: number[];\n\n  /**\n   * The amount of time to delay before re-syncing the official server time.\n   * @defaultValue `1000 * 60 * 5`\n   */\n  static SYNC_INTERVAL_MS: number;\n\n  /**\n   * The current server time based on the last synchronization point and the approximated one-way latency.\n   */\n  get serverTime(): number;\n\n  /**\n   * The current World time based on the last recorded value of the core.time setting\n   */\n  get worldTime(): number;\n\n  /**\n   * Advance the game time by a certain number of seconds\n   * @param seconds - The number of seconds to advance (or rewind if negative) by\n   * @returns The new game time\n   */\n  advance(seconds: number): Promise<number>;\n\n  /**\n   * Synchronize the local client game time with the official time kept by the server\n   */\n  sync(socket?: io.Socket | null): Promise<this>;\n\n  /**\n   * Handle follow-up actions when the official World time is changed\n   * @param worldTime - The new canonical World time.\n   */\n  onUpdateWorldTime(worldTime: number): void;\n}\n\ndeclare namespace GameTime {\n  interface Timestamps {\n    clientTime: number;\n    serverTime: number;\n    worldTime: number;\n  }\n}\n"
    ]
  