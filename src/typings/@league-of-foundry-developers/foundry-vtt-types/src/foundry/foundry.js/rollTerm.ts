
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/foundry.js/rollTerm.d.ts",
      "/**\n * An abstract class which represents a single token that can be used as part of a Roll formula.\n * Every portion of a Roll formula is parsed into a subclass of RollTerm in order for the Roll to be fully evaluated.\n */\ndeclare abstract class RollTerm {\n  constructor({ options }?: { options?: RollTerm.Options });\n\n  /** An object of additional options which describes and modifies the term. */\n  options: RollTerm.Options;\n\n  /** An internal flag for whether the term has been evaluated */\n  protected _evaluated: boolean;\n\n  /**\n   * Is this term intermediate, and should be evaluated first as part of the simplification process?\n   * @defaultValue `false`\n   */\n  isIntermediate: boolean;\n\n  /** A regular expression pattern which identifies optional term-level flavor text */\n  static FLAVOR_REGEXP_STRING: string;\n\n  /** A regular expression which identifies term-level flavor text */\n  static FLAVOR_REGEXP: RegExp;\n\n  /** A regular expression used to match a term of this type */\n  static REGEXP: RegExp;\n\n  /** An array of additional attributes which should be retained when the term is serialized */\n  static SERIALIZE_ATTRIBUTES: string[];\n\n  /** A string representation of the formula expression for this RollTerm, prior to evaluation */\n  get expression(): string;\n\n  /** A string representation of the formula, including optional flavor text. */\n  get formula(): string;\n\n  /** A string or numeric representation of the final output for this term, after evaluation. */\n  get total(): number | string | null | undefined;\n\n  /** Optional flavor text which modifies and describes this term. */\n  get flavor(): string;\n\n  /**\n   * Evaluate the roll term, populating the results Array.\n   * @param options - (default: `{}`)\n   * @returns The evaluated dice term\n   */\n  evaluate(options?: Partial<RollTerm.EvaluationOptions & { async: false }>): this;\n  evaluate(options: Partial<RollTerm.EvaluationOptions> & { async: true }): Promise<this>;\n  evaluate(options?: Partial<RollTerm.EvaluationOptions>): this | Promise<this>;\n\n  protected _evaluate({ minimize, maximize }?: { minimize?: boolean; maximize?: boolean }): Promise<this>;\n\n  protected _evaluateSync({ minimize, maximize }?: { minimize?: boolean; maximize?: boolean }): this;\n\n  /* -------------------------------------------- */\n  /*  Serialization and Loading                   */\n  /* -------------------------------------------- */\n\n  /**\n   * Construct a RollTerm from a provided data object\n   * @param data - Provided data from an un-serialized term\n   * @returns The constructed RollTerm\n   */\n  static fromData(data: object): RollTerm;\n\n  /**\n   * * Define term-specific logic for how a de-serialized data object is restored as a functional RollTerm\n   * @param data - The de-serialized term data\n   * @returns The re-constructed RollTerm object\n   */\n  protected static _fromData<T extends RollTerm>(this: ConstructorOf<T>, data: object): T;\n\n  /**\n   * Reconstruct a RollTerm instance from a provided JSON string\n   * @param json - A serialized JSON representation of a DiceTerm\n   * @returns A reconstructed RollTerm from the provided JSON\n   */\n  static fromJSON(json: string): RollTerm;\n\n  /**\n   * Serialize the RollTerm to a JSON string which allows it to be saved in the database or embedded in text.\n   * This method should return an object suitable for passing to the JSON.stringify function.\n   */\n  toJSON(): object;\n}\n\ndeclare namespace RollTerm {\n  interface Options {\n    flavor?: string;\n  }\n\n  interface EvaluationOptions {\n    /**\n     * Maximize the result, obtaining the largest possible value.\n     * @defaultValue `false`\n     * */\n    maximize: boolean;\n\n    /**\n     * Minimize the result, obtaining the smallest possible value\n     * @defaultValue `false`\n     */\n    minimize: boolean;\n\n    /**\n     * Evaluate the roll asynchronously, receiving a Promise as the returned value.\n     * This will become the default behavior in version 10.x\n     * @defaultValue `false`\n     */\n    async: boolean;\n  }\n\n  interface Data {\n    class: string;\n    evaluated: boolean;\n    options: Options;\n  }\n}\n"
    ]
  