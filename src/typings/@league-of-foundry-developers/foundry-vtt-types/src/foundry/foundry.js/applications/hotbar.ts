
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/foundry.js/applications/hotbar.d.ts",
      "import { ConfiguredDocumentClass } from '../../../types/helperTypes';\n\ndeclare global {\n  /**\n   * The global action bar displayed at the bottom of the game view.\n   * The Hotbar is a UI element at the bottom of the screen which contains Macros as interactive buttons.\n   * The Hotbar supports 5 pages of global macros which can be dragged and dropped to organize as you wish.\n   *\n   * Left clicking a Macro button triggers its effect.\n   * Right clicking the button displays a context menu of Macro options.\n   * The number keys 1 through 0 activate numbered hotbar slots.\n   * Pressing the delete key while hovering over a Macro will remove it from the bar.\n   *\n   * @see {@link Macros}\n   * @see {@link Macro}\n   *\n   * @typeParam Options - the type of the options object\n   */\n  class Hotbar<Options extends Application.Options = Application.Options> extends Application<Options> {\n    constructor(options?: Partial<Options>);\n\n    /**\n     * The currently viewed macro page\n     * @defaultValue `1`\n     */\n    page: number;\n\n    /**\n     * The currently displayed set of macros\n     * @defaultValue `[]`\n     */\n    macros: InstanceType<ConfiguredDocumentClass<typeof Macro>>[];\n\n    /**\n     * Track collapsed state\n     * @defaultValue `false`\n     */\n    protected _collapsed: boolean;\n\n    /**\n     * Track which hotbar slot is the current hover target, if any\n     * @defaultValue `null`\n     */\n    protected _hover: number | null;\n\n    /**\n     * @override\n     * @defaultValue\n     * ```typescript\n     * mergeObject(super.defaultOptions, {\n     *   id: \"hotbar\",\n     *   template: \"templates/hud/hotbar.html\",\n     *   popOut: false,\n     *   dragDrop: [{ dragSelector: \".macro-icon\", dropSelector: \"#macro-list\" }]\n     * })\n     * ```\n     */\n    static get defaultOptions(): Application.Options;\n\n    /** @override */\n    getData(options?: Partial<Options>): Hotbar.Data | Promise<Hotbar.Data>;\n\n    /**\n     * Get the Array of Macro (or null) values that should be displayed on a numbered page of the bar\n     * @param page -\n     */\n    protected _getMacrosByPage(page: number): InstanceType<ConfiguredDocumentClass<typeof Macro>>[];\n\n    /**\n     * Collapse the Hotbar, minimizing its display.\n     * @returns A promise which resolves once the collapse animation completes\n     */\n    collapse(): Promise<boolean>;\n\n    /**\n     * Expand the Hotbar, displaying it normally.\n     * @returns A promise which resolves once the expand animation completes\n     */\n    expand(): Promise<boolean>;\n\n    /**\n     * Change to a specific numbered page from 1 to 5\n     * @param page - The page number to change to.\n     *               (default: `1` )\n     */\n    changePage(page?: number): void;\n\n    /**\n     * Change the page of the hotbar by cycling up (positive) or down (negative)\n     * @param direction - The direction to cycle\n     */\n    cyclePage(direction?: number): void;\n\n    /** @override */\n    activateListeners(html: JQuery): void;\n\n    /**\n     * Create a Context Menu attached to each Macro button\n     * @param html - The HTML being rendered for the hotbar\n     */\n    protected _contextMenu(html: JQuery): void;\n\n    /**\n     * Handle left-click events to\n     * @param event - The originating click event\n     */\n    protected _onClickMacro(event: JQuery.ClickEvent): Promise<void>;\n\n    /**\n     * Handle hover events on a macro button to track which slot is the hover target\n     * @param event - The originating mouseover or mouseleave event\n     */\n    protected _onHoverMacro(event: JQuery.MouseEnterEvent | JQuery.MouseLeaveEvent): void;\n\n    /**\n     * Handle pagination controls\n     * @param event - The originating click event\n     */\n    protected _onClickPageControl(event: JQuery.ClickEvent): void;\n\n    /**\n     * @override\n     * @param selector - (unused)\n     */\n    protected _canDragStart(selector: string): boolean;\n\n    /** @override */\n    protected _onDragStart(event: DragEvent): false | void;\n\n    /**\n     * @override\n     * @param selector - (unused)\n     */\n    protected _canDragDrop(selector: string): boolean;\n\n    /** @override */\n    protected _onDrop(\n      event: DragEvent\n    ): void | ReturnType<InstanceType<ConfiguredDocumentClass<typeof User>>['assignHotbarMacro']>;\n\n    /**\n     * Handle click events to toggle display of the macro bar\n     * @param event -\n     */\n    protected _onToggleBar(event: JQuery.ClickEvent): void;\n  }\n\n  namespace Hotbar {\n    interface Data {\n      page: number;\n      macros: Macro[];\n      barClass: 'collapsed' | '';\n    }\n  }\n}\n"
    ]
  