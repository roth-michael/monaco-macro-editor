
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/foundry.js/applications/formApplications/worldConfig.d.ts",
      "// TODO: Remove when updating this class!!!\n// eslint-disable-next-line\n// @ts-nocheck\n\n/**\n * The World Management setup application\n */\ndeclare class WorldConfig extends FormApplication<WorldConfig.Options, WorldConfig.Data, Game.World> {\n  /**\n   * @defaultValue\n   * ```typescript\n   * mergeObject(super.defaultOptions, {\n   *   id: \"world-config\",\n   *   template: \"templates/setup/world-config.html\",\n   *   width: 600,\n   *   height: \"auto\",\n   *   create: false\n   * });\n   * ```\n   */\n  static get defaultOptions(): WorldConfig.Options;\n\n  /** @override */\n  get title(): string;\n\n  /**\n   * @param options - (unused)\n   * @override\n   */\n  getData(options?: Partial<WorldConfig.Options>): WorldConfig.Data;\n\n  /**\n   * @remarks This method returns `Promise<void>`.\n   * @override\n   */\n  protected _onSubmit(event: Event): Promise<any>;\n\n  /**\n   * @remarks This method does not exist on WorldConfig and only exists to make the typescript compile!\n   */\n  protected _updateObject(...args: unknown[]): Promise<unknown>;\n}\n\ndeclare namespace WorldConfig {\n  interface Data {\n    world: WorldConfig['object'];\n    systems: Game.System[];\n    isCreate: WorldConfig['options']['create'];\n    submitText: string;\n    nextDate: string;\n    nextTime: string;\n  }\n\n  interface Options extends FormApplication.Options {\n    /**\n     * @defaultValue `false`\n     */\n    create: boolean;\n  }\n}\n"
    ]
  