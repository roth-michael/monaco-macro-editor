
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/foundry.js/applications/sidebarTabs/sidebarDirectories/playlistDirectory.d.ts",
      "// TODO: Remove when updating this class!!!\n// eslint-disable-next-line\n// @ts-nocheck\n\n/**\n * A directory listing of audio playlists\n */\ndeclare class PlaylistDirectory extends SidebarDirectory<PlaylistDirectory.Options> {\n  /**\n   * Track the playlist IDs which are currently expanded in their display\n   */\n  protected _expanded: Set<string>;\n\n  /**\n   * @override\n   */\n  static get defaultOptions(): PlaylistDirectory.Options;\n\n  /**\n   * @override\n   */\n  static get entity(): 'Playlist';\n\n  /**\n   * @override\n   * @see {@link Game.playlists}\n   */\n  static get collection(): Game['playlists'];\n\n  /**\n   * Return an Array of the Playlist entities which are currently playing\n   */\n  get playing(): Playlist[];\n\n  /**\n   * Prepare the data used to render the AudioList application\n   * @param options - (unused)\n   */\n  getData(options?: Partial<PlaylistDirectory.Options>): PlaylistDirectory.Data;\n\n  /**\n   * Given a constant playback mode, provide the FontAwesome icon used to display it\n   */\n  protected _getModeIcon(mode: foundry.CONST.PlaylistMode): string;\n\n  /**\n   * Given a constant playback mode, provide the string tooltip used to describe it\n   */\n  protected _getModeTooltip(mode: foundry.CONST.PlaylistMode): string;\n\n  /**\n   * @override\n   */\n  activateListeners(html: JQuery): void;\n\n  /**\n   * Handle global volume change for the playlist sidebar\n   */\n  protected _onGlobalVolume(event: JQuery.ChangeEvent): void;\n\n  /**\n   * Handle Playlist collapse toggle\n   */\n  protected _onPlaylistCollapse(event: JQuery.ClickEvent): void;\n\n  /**\n   * Helper method to render the expansion or collapse of playlists\n   * @param speed - (default: `250`)\n   */\n  protected _collapse(li: JQuery, collapse: boolean, speed: number): void;\n\n  /**\n   * Handle Playlist edit action\n   */\n  protected _onPlaylistEdit(event: JQuery.ClickEvent): void;\n\n  /**\n   * Handle Playlist deletion requests\n   * Confirm the deletion with a yes/no dialog prompt\n   */\n  protected _onPlaylistDelete(event: JQuery.ClickEvent): void;\n\n  /**\n   * Handle Playlist track addition request\n   */\n  protected _onPlaylistAddTrack(event: JQuery.ClickEvent): void;\n\n  /**\n   * Handle Playlist playback state changes\n   */\n  protected _onPlaylistPlay(event: JQuery.ClickEvent, playing: boolean): void;\n\n  /**\n   * Handle cycling the playback mode for a Playlist\n   * @param event - The initial click event\n   */\n  protected _onPlaylistToggleMode(event: JQuery.ClickEvent): void;\n\n  /**\n   * Handle editing a Sound within a PLaylist\n   * @param event - The initial click event\n   */\n  protected _onSoundEdit(event: JQuery.ClickEvent): void;\n\n  /**\n   * Modify the playback state of a Sound within a Playlist\n   * @param event - The initial click event\n   */\n  protected _onSoundPlay(event: JQuery.ClickEvent, playing: boolean): void;\n\n  /**\n   * Handle volume adjustments to sounds within a Playlist\n   * @param event - The initial change event\n   */\n  protected _onSoundVolume(event: JQuery.ChangeEvent): void;\n\n  /**\n   * Handle changes to the sound playback mode\n   * @param event - The initial click event\n   */\n  protected _onSoundToggleMode(event: JQuery.ClickEvent): void;\n\n  /**\n   * Handle Playlist track deletion request\n   */\n  protected _onSoundDelete(event: JQuery.ClickEvent): void;\n\n  /**\n   * Handle right click context-menu options on a Playlist or a Sound\n   */\n  protected _contextMenu(html: JQuery): void;\n\n  /**\n   * Get context menu options for individual sound effects\n   * @returns The context options for each sound\n   */\n  protected _getSoundContextOptions(): ContextMenuEntry[];\n}\n\ndeclare namespace PlaylistDirectory {\n  interface Data {\n    user: User;\n    isGM: boolean;\n    entities: PlaylistEntity[];\n    playlistModifier: ReturnType<typeof AudioHelper['volumeToInput']>;\n    ambientModifier: ReturnType<typeof AudioHelper['volumeToInput']>;\n    interfaceModifier: ReturnType<typeof AudioHelper['volumeToInput']>;\n  }\n\n  interface PlaylistEntity extends foundry.utils.Duplicated<Playlist.Data> {\n    modeIcon: string;\n    modeTooltip: string;\n    disabled: boolean;\n    controlCSS: string;\n    expanded: boolean;\n    sounds: Sound[];\n  }\n\n  interface Sound extends foundry.utils.Duplicated<Playlist.Sound> {\n    lvolume: ReturnType<typeof AudioHelper['volumeToInput']>;\n    controlCSS: string;\n  }\n\n  interface Options extends SidebarDirectory.Options {\n    /**\n     * @defaultValue The `dragSelector` of the first entry is `'.playlist-name'`.\n     */\n    dragDrop: SidebarDirectory.Options['dragDrop'];\n\n    /**\n     * @defaultValue `['name', 'playing', 'mode']`\n     */\n    renderUpdateKeys: string[];\n  }\n}\n"
    ]
  