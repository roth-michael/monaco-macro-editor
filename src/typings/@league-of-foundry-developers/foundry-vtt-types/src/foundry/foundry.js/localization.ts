
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/foundry.js/localization.d.ts",
      "import { ModuleData, SystemData } from '../common/packages.mjs';\n\ndeclare global {\n  /**\n   * A helper class which assists with localization and string translation\n   */\n  class Localization {\n    /**\n     * @param serverLanguage - The default language configuration setting for the server\n     */\n    constructor(serverLanguage?: string);\n\n    /**\n     * The target language for localization\n     * @defaultValue `'en'`\n     */\n    lang: string;\n\n    /**\n     * The package authorized to provide default language configurations\n     * @defaultValue `'core'`\n     */\n    defaultModule: string;\n\n    /**\n     * The translation dictionary for the target language\n     * @defaultValue `{}`\n     */\n    translations: Translations;\n\n    /**\n     * Fallback translations if the target keys are not found\n     * @defaultValue `{}`\n     */\n    protected _fallback: Translations;\n\n    /**\n     * Initialize the Localization module\n     * Discover available language translations and apply the current language setting\n     * @returns A Promise which resolves once languages are initialized\n     */\n    initialize(): Promise<void>;\n\n    /**\n     * Set a language as the active translation source for the session\n     * @param lang - A language string in CONFIG.supportedLanguages\n     * @returns A Promise which resolves once the translations for the requested language are ready\n     */\n    setLanguage(lang: string): Promise<void>;\n\n    /**\n     * Discover the available supported languages from the set of packages which are provided\n     */\n    protected _discoverSupportedLanguages(): Record<string, string>;\n\n    /**\n     * Prepare the dictionary of translation strings for the requested language\n     * @param lang - The language for which to load translations\n     * @returns The retrieved translations object\n     */\n    protected _getTranslations(lang: string): Promise<Translations>;\n\n    /**\n     * Reduce the languages array provided by a package to an array of file paths of translations to load\n     * @param pkg  - The package data\n     * @param lang - The target language to filter on\n     * @returns An array of translation file paths\n     */\n    protected _filterLanguagePaths(pkg: ModuleData | SystemData, lang: string): string[];\n\n    /**\n     * Load a single translation file and return its contents as processed JSON\n     * @param src - The translation file path to load\n     * @returns The loaded translation dictionary\n     */\n    protected _loadTranslationFile(src: string): Promise<Translations>;\n\n    /**\n     * Return whether a certain string has a known translation defined.\n     * @param stringId - The string key being translated\n     * @param fallback - Allow fallback translations to count?\n     *                   (unused)\n     */\n    has(stringId: string, fallback?: boolean): boolean;\n\n    /**\n     * Localize a string by drawing a translation from the available translations dictionary, if available\n     * If a translation is not available, the original string is returned\n     * @param stringId - The string ID to translate\n     * @returns The translated string\n     *\n     * @example <caption>Localizing a simple string in JavaScript</caption>\n     * ```typescript\n     * {\n     *   \"MYMODULE.MYSTRING\": \"Hello, this is my module!\"\n     * }\n     * game.i18n.localize(\"MYMODULE.MYSTRING\"); // Hello, this is my module!\n     * ```\n     *\n     * @example <caption>Localizing a simple string in Handlebars</caption>\n     * ```handlebars\n     * {{localize \"MYMODULE.MYSTRING\"}} <!-- Hello, this is my module! -->\n     * ```\n     */\n    localize(stringId: string): string;\n\n    /**\n     * Localize a string including variable formatting for input arguments.\n     * Provide a string ID which defines the localized template.\n     * Variables can be included in the template enclosed in braces and will be substituted using those named keys.\n     *\n     * @param stringId - The string ID to translate\n     * @param data     - Provided input data\n     *                   (defaultValue: `{}`)\n     * @returns The translated and formatted string\n     *\n\n     * @example <caption>Localizing a formatted string in JavaScript</caption>\n     * ```typescript\n     * {\n     *   \"MYMODULE.GREETING\": \"Hello {name}, this is my module!\"\n     * }\n     * game.i18n.format(\"MYMODULE.GREETING\" {name: \"Andrew\"}); // Hello Andrew, this is my module!\n     * ```\n     *\n     * @example <caption>Localizing a formatted string in Handlebars</caption>\n     * ```handlebars\n     * {{localize \"MYMODULE.GREETING\" name=\"Andrew\"}} <!-- Hello, this is my module! -->\n     * ```\n     */\n    format(stringId: string, data?: Record<string, unknown>): string;\n  }\n}\n\ntype Translations = {\n  [K: string]: string | Translations;\n};\n"
    ]
  