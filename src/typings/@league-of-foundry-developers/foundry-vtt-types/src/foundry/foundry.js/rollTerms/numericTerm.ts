
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/foundry.js/rollTerms/numericTerm.d.ts",
      "declare global {\n  /**\n   * A type of RollTerm used to represent static numbers.\n   */\n  class NumericTerm extends RollTerm {\n    constructor({ number, options }: NumericTermData);\n\n    number: NumericTermData['number'];\n\n    /**\n     * @defaultValue\n     * ```typescript\n     * new RegExp(`^([0-9]+(?:\\\\.[0-9]+)?)${RollTerm.FLAVOR_REGEXP_STRING}?$`)\n     * ```\n     */\n    static REGEXP: RegExp;\n\n    /**\n     * @defaultValue `['number']`\n     */\n    static SERIALIZE_ATTRIBUTES: string[];\n\n    get expression(): string;\n\n    get total(): number;\n\n    /**\n     * Determine whether a string expression matches a NumericTerm\n     * @param expression - The expression to parse\n     */\n    static matchTerm(expression: string): RegExpMatchArray | null;\n\n    /* -------------------------------------------- */\n\n    /**\n     * Construct a term of this type given a matched regular expression array.\n     * @param match -  The matched regular expression array\n     * @returns The constructed term\n     */\n    static fromMatch(match: RegExpMatchArray): NumericTerm;\n  }\n}\n\ninterface NumericTermData {\n  number: number;\n\n  /**\n   * @defaultValue `{}`\n   */\n  options?: RollTerm.Options;\n}\n\nexport {};\n"
    ]
  