
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/foundry.js/applications/formApplications/tokenConfig.d.ts",
      "// TODO: Remove when updating this class!!!\n// eslint-disable-next-line\n// @ts-nocheck\n\n/**\n * A Token Configuration Application\n * @typeParam P - the type of the options object\n */\ndeclare class TokenConfig<P extends TokenConfig.Options = TokenConfig.Options> extends FormApplication<\n  P,\n  TokenConfig.Data,\n  Token\n> {\n  /**\n   * @param token   - The Token object for which settings are being configured\n   * @param options - TokenConfig ui options (see Application)\n   */\n  constructor(token: Token, options?: Partial<P>);\n\n  /**\n   * @override\n   * @defaultValue\n   * ```typescript\n   * mergeObject(super.defaultOptions, {\n   *   classes: [\"sheet\", \"token-sheet\"],\n   *   template: \"templates/scene/token-config.html\",\n   *   width: 480,\n   *   height: \"auto\",\n   *   tabs: [{navSelector: \".tabs\", contentSelector: \"form\", initial: \"character\"}]\n   * });\n   * ```\n   */\n  static get defaultOptions(): TokenConfig.Options;\n\n  /** @override */\n  get id(): string;\n\n  /**\n   * Convenience access for the Token object\n   */\n  get token(): this['object'];\n\n  /**\n   * Convenience access for the Token's linked Actor, if any\n   */\n  get actor(): this['token']['actor'];\n\n  /** @override */\n  get title(): string;\n\n  /**\n   * @param options - (unused)\n   * @override\n   */\n  getData(options?: Partial<P>): Promise<TokenConfig.Data>;\n\n  /** @override */\n  render(force?: boolean, options?: Application.RenderOptions<P>): Promise<void>;\n\n  /**\n   * Inspect the Actor data model and identify the set of attributes which could be used for a Token Bar\n   */\n  static getTrackedAttributeChoices(attributes: TokenConfig.Attributes): Partial<Record<string, string[]>>;\n\n  /**\n   * Test whether an individual data object is a valid attribute - containing both a \"value\" and \"max\" field\n   * @param data  - The data object to search\n   * @param _path - The attribute path being recursed\n   *                (default: `[]`)\n   * @returns An object containing both bar and value attribute paths\n   */\n  protected static getTrackedAttributes(data: object, _path: string[]): TokenConfig.Attributes;\n\n  /**\n   * Get an Object of image paths and filenames to display in the Token sheet\n   */\n  protected _getAlternateTokenImages(): Promise<Partial<Record<string, string>>>;\n\n  /** @override */\n  activateListeners(html: JQuery): void;\n\n  /** @override */\n  protected _getSubmitData(\n    updateData?: TokenConfig.FormData\n  ): ReturnType<FormApplication['_getSubmitData']> & { lightAlpha: number };\n\n  /** @override */\n  protected _updateObject(event: Event, formData: TokenConfig.FormData): Promise<void>;\n\n  /**\n   * Update certain fields of a linked actor token when token configuration is changed\n   * @param tokenData - The new token data\n   */\n  protected _updateActorData(tokenData: TokenConfig.FormData): ReturnType<Actor['update']> | void;\n\n  /**\n   * Handle Token assignment requests to update the default prototype Token\n   * @param event - The left-click event on the assign token button\n   */\n  protected _onAssignToken(event: JQuery.ClickEvent): Promise<void>;\n\n  /**\n   * Handle changing the attribute bar in the drop-down selector to update the default current and max value\n   */\n  protected _onBarChange(ev: JQuery.ChangeEvent): Promise<void>;\n}\n\ndeclare namespace TokenConfig {\n  interface Attributes {\n    bar: string[][];\n    value: string[][];\n  }\n\n  interface Data {\n    cssClasses: 'prototype' | '';\n    isPrototype: Options['configureDefault'];\n    hasAlternates: boolean;\n    alternateImages: TokenConfig['_getAlternateTokenImages'] | [];\n    object: foundry.utils.Duplicated<TokenConfig['token']['data']>;\n    options: TokenConfig['options'];\n    gridUnits: Scene['data']['gridUnits'] | Game['system']['gridUnits'];\n    barAttributes: ReturnType<typeof TokenConfig['getTrackedAttributeChoices']>;\n    bar1: ReturnType<TokenConfig['object']['getBarAttribute']>;\n    bar2: ReturnType<TokenConfig['object']['getBarAttribute']>;\n    displayModes: Record<foundry.CONST.TokenDisplayMode, string>;\n    actors: Array<Pick<Actor, '_id' | 'name'>>;\n    dispositions: Record<foundry.CONST.TokenDisposition, string>;\n    lightAnimations: { [Key in keyof typeof CONFIG['Canvas']['lightAnimations']]: string } & { '': 'None' };\n    lightAlpha: number;\n    isGM: User['isGM'];\n  }\n\n  interface FormData {\n    actorId: Token.Data['actorId'];\n    actorLink: Token.Data['actorLink'];\n    alternateImages?: string;\n    'bar1.attribute': Token.Data['bar1']['attribute'];\n    'bar2.attribute': Token.Data['bar2']['attribute'];\n    brightLight: Token.Data['brightLight'] | null;\n    brightSight: Token.Data['brightSight'] | null;\n    dimLight: Token.Data['dimLight'] | null;\n    dimSight: Token.Data['dimSight'] | null;\n    displayBars: Token.Data['displayBars'];\n    displayName: Token.Data['displayName'];\n    disposition: Token.Data['disposition'];\n    elevation: Token.Data['elevation'] | null;\n    height: Token.Data['height'] | null;\n    img: Token.Data['img'];\n    lightAlpha: Token.Data['lightAlpha'];\n    lightAngle: Token.Data['lightAngle'] | null;\n    'lightAnimation.intensity': Token.Data['lightAnimation']['intensity'];\n    'lightAnimation.speed': Token.Data['lightAnimation']['speed'];\n    'lightAnimation.type': Token.Data['lightAnimation']['type'];\n    lightColor: Token.Data['lightColor'];\n    lockRotation: Token.Data['lockRotation'];\n    mirrorX: Token.Data['mirrorX'];\n    mirrorY: Token.Data['mirrorY'];\n    name: Token.Data['name'];\n    rotation: Token.Data['rotation'] | null;\n    scale: Token.Data['scale'];\n    sightAngle: Token.Data['sightAngle'] | null;\n    tint: Token.Data['tint'];\n    vision: Token.Data['vision'];\n    width: Token.Data['width'] | null;\n    x: Token.Data['x'] | null;\n    y: Token.Data['y'] | null;\n  }\n\n  interface Options extends FormApplication.Options {\n    /**\n     * Configure the default actor token on submit\n     */\n    configureDefault?: boolean;\n  }\n}\n"
    ]
  