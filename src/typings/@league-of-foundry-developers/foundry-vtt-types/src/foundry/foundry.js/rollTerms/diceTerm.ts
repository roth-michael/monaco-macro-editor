
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/foundry.js/rollTerms/diceTerm.d.ts",
      "/**\n * An abstract base class for any type of RollTerm which involves randomized input from dice, coins, or other devices.\n */\ndeclare abstract class DiceTerm extends RollTerm {\n  /**\n   * @param termData  - Data used to create the Dice Term, including the following:\n   *                    (default: `{}`)\n   * @param number    - The number of dice of this term to roll, before modifiers are applied\n   *                    (default: `1`)\n   * @param faces     - The number of faces on each die of this type\n   *                    (default: `6`)\n   * @param modifiers - An array of modifiers applied to the results\n   *                    (default: `[]`)\n   * @param results   - An optional array of pre-cast results for the term\n   *                    (default: `[]`)\n   * @param options   - Additional options that modify the term\n   *                    (default: `{}`)\n   */\n  constructor(termData?: Partial<DiceTerm.TermData>);\n\n  /**\n   * The number of dice of this term to roll, before modifiers are applied\n   */\n  number: DiceTerm.TermData['number'];\n\n  /**\n   * The number of faces on the die\n   */\n  faces: DiceTerm.TermData['faces'];\n\n  /**\n   * An Array of dice term modifiers which are applied\n   */\n  modifiers: DiceTerm.TermData['modifiers'];\n\n  /**\n   * The array of dice term results which have been rolled\n   */\n  results: DiceTerm.Result[];\n\n  /* -------------------------------------------- */\n\n  /**\n   * Define the denomination string used to register this DiceTerm type in CONFIG.Dice.terms\n   * @defaultValue \"\"\n   */\n  static DENOMINATION: string;\n\n  /**\n   * Define the named modifiers that can be applied for this particular DiceTerm type.\n   * @defaultValue `{}`\n   */\n  static MODIFIERS: DiceTerm.Modifiers;\n\n  /**\n   * A regular expression pattern which captures the full set of term modifiers\n   * Anything until a space, group symbol, or arithmetic operator\n   */\n  static MODIFIERS_REGEXP_STRING: string;\n\n  /** A regular expression used to separate individual modifiers */\n  static MODIFIER_REGEXP: RegExp;\n\n  /* -------------------------------------------- */\n  /*  Dice Term Attributes                        */\n  /* -------------------------------------------- */\n\n  /**\n   * Return an array of rolled values which are still active within this term\n   */\n  get values(): number[];\n\n  /* -------------------------------------------- */\n\n  /**\n   * Alter the DiceTerm by adding or multiplying the number of dice which are rolled\n   * @param multiply - A factor to multiply. Dice are multiplied before any additions.\n   * @param add      - A number of dice to add. Dice are added after multiplication.\n   * @returns The altered term\n   */\n  alter(multiply: number, add: number): this;\n\n  /* -------------------------------------------- */\n\n  protected _evaluateSync({ minimize, maximize }?: { minimize?: boolean; maximize?: boolean }): this;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Roll the DiceTerm by mapping a random uniform draw against the faces of the dice term.\n   * @param minimize - Minimize the result, obtaining the smallest possible value.\n   * @param maximize - Maximize the result, obtaining the largest possible value.\n   * @returns The produced result\n   */\n  roll({ minimize, maximize }?: { minimize: boolean; maximize: boolean }): DiceTerm.Result;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Return a string used as the label for each rolled result\n   * @param result - The rolled result\n   * @returns The result label\n   */\n  getResultLabel(result: DiceTerm.Result): string;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Get the CSS classes that should be used to display each rolled result\n   * @param result - The rolled result\n   * @returns The desired classes\n   */\n  getResultCSS(result: DiceTerm.Result): (string | null)[];\n\n  /* -------------------------------------------- */\n\n  /**\n   * Render the tooltip HTML for a Roll instance\n   * @returns The data object used to render the default tooltip template for this DiceTerm\n   */\n  getTooltipData(): DiceTerm.ToolTipData;\n\n  /* -------------------------------------------- */\n  /*  Modifier Helpers                            */\n  /* -------------------------------------------- */\n\n  /**\n   * Sequentially evaluate each dice roll modifier by passing the term to its evaluation function\n   * Augment or modify the results array.\n   */\n  protected _evaluateModifiers(): void;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Evaluate a single modifier command, recording it in the array of evaluated modifiers\n   * @param command - The parsed modifier command\n   * @param modifier -  The full modifier request\n   */\n  protected _evaluateModifier(command: string, modifier: string): void;\n  /* -------------------------------------------- */\n\n  /**\n   * A helper comparison function.\n   * Returns a boolean depending on whether the result compares favorably against the target.\n   * @param result     - The result being compared\n   * @param comparison - The comparison operator in [=,&lt;,&lt;=,\\>,\\>=]\n   * @param target     - The target value\n   * @returns Is the comparison true?\n   */\n  static compareResult(result: number, comparison: string, target: number): boolean;\n\n  /* -------------------------------------------- */\n\n  /**\n   * A helper method to modify the results array of a dice term by flagging certain results are kept or dropped.\n   * @param results - The results array\n   * @param number  - The number to keep or drop\n   * @param keep    - Keep results?\n   *                  (default: `true`)\n   * @param highest - Keep the highest?\n   *                  (default: `true`)\n   * @returns The modified results array\n   */\n  protected static _keepOrDrop(\n    results: DiceTerm.Result[],\n    number: number,\n    {\n      keep,\n      highest\n    }?: {\n      keep: boolean;\n      highest: boolean;\n    }\n  ): DiceTerm.Result;\n\n  /* -------------------------------------------- */\n\n  /**\n   * A reusable helper function to handle the identification and deduction of failures\n   * @param flagFailure - (default: `false`)\n   * @param flagSuccess - (default: `false`)\n   */\n  protected static _applyCount(\n    results: DiceTerm.Result[],\n    comparison: string,\n    target: number,\n    {\n      flagSuccess,\n      flagFailure\n    }?: {\n      flagSuccess: boolean;\n      flagFailure: boolean;\n    }\n  ): void;\n\n  /* -------------------------------------------- */\n\n  /**\n   * A reusable helper function to handle the identification and deduction of failures\n   * @param deductFailure - (default: `false`)\n   * @param invertFailure - (default: `false`)\n   */\n  protected static _applyDeduct(\n    results: DiceTerm.Result[],\n    comparison: string,\n    target: number,\n    {\n      deductFailure,\n      invertFailure\n    }?: {\n      deductFailure: boolean;\n      invertFailure: boolean;\n    }\n  ): void;\n\n  /* -------------------------------------------- */\n  /*  Factory Methods                             */\n  /* -------------------------------------------- */\n\n  /**\n   * @deprecated since 0.8.1\n   */\n  static fromExpression(expression: string, options: DiceTerm.Options): DiceTerm | null;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Determine whether a string expression matches this type of term\n   * @param expression - The expression to parse\n   * @param options - Additional options which customize the match\n   * @param imputeNumber - Allow the number of dice to be optional, i.e. \"d6\"\n   *                       (default: `true`)\n   */\n  static matchTerm(expression: string, { imputeNumber }?: { imputeNumber: boolean }): RegExpMatchArray | null;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Construct a term of this type given a matched regular expression array.\n   * @param match - The matched regular expression array\n   * @returns The constructed term\n   */\n  static fromMatch(match: RegExpMatchArray): DiceTerm;\n\n  /* -------------------------------------------- */\n\n  /**\n   * @deprecated since 0.8.1\n   */\n  static fromResults(options: Partial<DiceTerm.TermData>, results: DiceTerm.Result[]): DiceTerm;\n\n  /**\n   * @deprecated since 0.8.1\n   */\n  static getResultLabel(): string;\n}\n\ndeclare namespace DiceTerm {\n  interface Data extends Partial<TermData> {\n    class?: string;\n    results: DiceTerm.Result[];\n  }\n\n  interface TermData {\n    number: number;\n    faces: number;\n    modifiers: string[];\n    results: Result[];\n    options: DiceTerm.Options;\n  }\n\n  type Options = RollTerm.Options;\n\n  interface Result {\n    result: number;\n    active?: boolean;\n    count?: number;\n    success?: boolean;\n    failure?: boolean;\n    discarded?: boolean;\n    rerolled?: boolean;\n    exploded?: boolean;\n  }\n\n  interface ToolTipData {\n    formula: string;\n    total: number;\n    faces: number;\n    flavor: string;\n    rolls: { result: string; classes: string }[];\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-interface\n  interface Modifiers {}\n}\n"
    ]
  