
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/foundry.js/draggable.d.ts",
      "/**\n * A UI utility to make an element draggable.\n */\ndeclare class Draggable<R extends boolean | undefined = undefined> {\n  constructor(app: Draggable['app'], element: JQuery, handle: Draggable['handle'], resizable?: R);\n\n  app: Application;\n\n  element: HTMLElement;\n\n  handle: HTMLElement;\n\n  /**\n   * @defaultValue `false`\n   */\n  resizable: R extends boolean ? R : false;\n\n  /**\n   * Duplicate the application's starting position to track differences\n   * @defaultValue `null`\n   */\n  position: foundry.utils.Duplicated<Application.Position> | null;\n\n  /**\n   * Remember event handlers associated with this Draggable class so they may be later unregistered\n   */\n  // prettier-ignore\n  handlers: this['resizable'] extends true\n    ? Draggable.ResizableHandlers\n    : this['resizable'] extends false\n      ? Draggable.Handlers\n      : Draggable.Handlers | Draggable.ResizableHandlers;\n\n  /**\n   * Throttle mousemove event handling to 60fps\n   * @defaultValue `0`\n   */\n  protected _moveTime: number;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Activate event handling for a Draggable application\n   * Attach handlers for floating, dragging, and resizing\n   */\n  activateListeners(): void;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Handle the initial mouse click which activates dragging behavior for the application\n   */\n  protected _onDragMouseDown(event: Event): void;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Move the window with the mouse, bounding the movement to ensure the window stays within bounds of the viewport\n   */\n  protected _onDragMouseMove(event: Event): void;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Conclude the dragging behavior when the mouse is release, setting the final position and removing listeners\n   */\n  protected _onDragMouseUp(event: Event): void;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Handle the initial mouse click which activates dragging behavior for the application\n   */\n  protected _onResizeMouseDown(event: Event): void;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Move the window with the mouse, bounding the movement to ensure the window stays within bounds of the viewport\n   */\n  protected _onResizeMouseMove(event: Event): void;\n\n  /* -------------------------------------------- */\n\n  /**\n   * Conclude the dragging behavior when the mouse is release, setting the final position and removing listeners\n   */\n  protected _onResizeMouseUp(event: Event): void;\n}\n\ndeclare namespace Draggable {\n  interface Handlers {\n    click: ['click', (e: Event) => void, { capture: boolean; passive: boolean }];\n\n    dragDown: ['mousedown', (e: Event) => void, false];\n    dragMove: ['mousemove', (e: Event) => void, false];\n    dragUp: ['mouseup', (e: Event) => void, false];\n  }\n\n  interface ResizableHandlers extends Handlers {\n    resizeDown: ['mousedown', (e: Event) => void, false];\n    resizeMove: ['mousemove', (e: Event) => void, false];\n    resizeUp: ['mouseup', (e: Event) => void, false];\n  }\n}\n"
    ]
  