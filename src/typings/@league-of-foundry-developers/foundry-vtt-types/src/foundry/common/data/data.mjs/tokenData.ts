
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/common/data/data.mjs/tokenData.d.ts",
      "import DocumentData from '../../abstract/data.mjs';\nimport { ConfiguredFlags, FieldReturnType, PropertiesToSource } from '../../../../types/helperTypes';\nimport { CONST, documents } from '../../module.mjs';\nimport * as fields from '../fields.mjs';\nimport { AnimationData, AnimationDataConstructorData } from './animationData';\nimport { TokenBarData, TokenBarDataConstructorData } from './tokenBarData';\nimport { ActorDataSource } from './actorData.js';\n\ninterface VisionFieldOptions {\n  validate: (d: number) => boolean;\n  validationError: 'Invalid {name} {field} distance which must be a number with absolute value less than 1000';\n}\n\nexport interface TokenDataSchema extends DocumentSchema {\n  _id: typeof fields.DOCUMENT_ID;\n  name: typeof fields.STRING_FIELD;\n  displayName: DocumentField<CONST.TokenDisplayMode> & {\n    type: typeof Number;\n    required: true;\n    default: typeof CONST.TOKEN_DISPLAY_MODES.NONE;\n    validate: (m: any) => boolean;\n    validationError: 'Invalid {name} {field} which must be a value in CONST.TOKEN_DISPLAY_MODES';\n  };\n  actorId: fields.ForeignDocumentField<{ type: documents.BaseActor; required: true }>;\n  actorLink: typeof fields.BOOLEAN_FIELD;\n  actorData: typeof fields.OBJECT_FIELD;\n  img: FieldReturnType<typeof fields.VIDEO_FIELD, { default: () => string }>;\n  tint: typeof fields.COLOR_FIELD;\n  width: FieldReturnType<typeof fields.REQUIRED_POSITIVE_NUMBER, { default: number }>;\n  height: FieldReturnType<typeof fields.REQUIRED_POSITIVE_NUMBER, { default: number }>;\n  scale: DocumentField<number> & {\n    type: typeof Number;\n    required: true;\n    default: 1;\n    validate: (s: unknown) => boolean;\n    validationError: 'Invalid {name} {field} which must be a number between 0.25 and 10';\n  };\n  mirrorX: typeof fields.BOOLEAN_FIELD;\n  mirrorY: typeof fields.BOOLEAN_FIELD;\n  x: typeof fields.REQUIRED_NUMBER;\n  y: typeof fields.REQUIRED_NUMBER;\n  elevation: typeof fields.REQUIRED_NUMBER;\n  lockRotation: typeof fields.BOOLEAN_FIELD;\n  rotation: FieldReturnType<typeof fields.ANGLE_FIELD, { default: number }>;\n  effects: DocumentField<string[]> & {\n    type: typeof String[];\n    required: true;\n    default: string[];\n  };\n  overlayEffect: typeof fields.STRING_FIELD;\n  alpha: typeof fields.ALPHA_FIELD;\n  hidden: typeof fields.BOOLEAN_FIELD;\n  vision: DocumentField<boolean> & {\n    type: typeof Boolean;\n    required: true;\n    default: (data: { readonly dimSight?: number; readonly brightSight?: number }) => boolean;\n  };\n  dimSight: FieldReturnType<typeof fields.REQUIRED_NUMBER, VisionFieldOptions>;\n  brightSight: FieldReturnType<typeof fields.REQUIRED_NUMBER, VisionFieldOptions>;\n  dimLight: FieldReturnType<typeof fields.REQUIRED_NUMBER, VisionFieldOptions>;\n  brightLight: FieldReturnType<typeof fields.REQUIRED_NUMBER, VisionFieldOptions>;\n  sightAngle: typeof fields.ANGLE_FIELD;\n  lightAngle: typeof fields.ANGLE_FIELD;\n  lightColor: typeof fields.COLOR_FIELD;\n  lightAlpha: FieldReturnType<typeof fields.ALPHA_FIELD, { default: 0.25 }>;\n  lightAnimation: DocumentField<AnimationData> & {\n    type: typeof AnimationData;\n    required: true;\n    default: {};\n  };\n  disposition: DocumentField<CONST.TokenDisposition> & {\n    type: typeof Number;\n    required: true;\n    default: typeof CONST.TOKEN_DISPOSITIONS.HOSTILE;\n    validate: (n: any) => boolean;\n    validationError: 'Invalid {name} {field} which must be a value in CONST.TOKEN_DISPOSITIONS';\n  };\n  displayBars: DocumentField<CONST.TokenDisplayMode> & {\n    type: typeof Number;\n    required: true;\n    default: typeof CONST.TOKEN_DISPLAY_MODES.NONE;\n    validate: (m: any) => boolean;\n    validationError: 'Invalid {name} {field} which must be a value in CONST.TOKEN_DISPLAY_MODES';\n  };\n  bar1: DocumentField<TokenBarData> & {\n    type: typeof TokenBarData;\n    required: true;\n    default: () => { attribute: Game['system']['data']['primaryTokenAttribute'] | null };\n  };\n  bar2: DocumentField<TokenBarData> & {\n    type: typeof TokenBarData;\n    required: true;\n    default: () => { attribute: Game['system']['data']['secondaryTokenAttribute'] | null };\n  };\n  flags: typeof fields.OBJECT_FIELD;\n}\n\nexport interface TokenDataProperties {\n  /**\n   * The Token _id which uniquely identifies it within its parent Scene\n   * @defaultValue `null`\n   */\n  _id: string | null;\n\n  /**\n   * The name used to describe the Token\n   */\n  name?: string;\n\n  /**\n   * The display mode of the Token nameplate, from CONST.TOKEN_DISPLAY_MODES\n   * @defaultValue `CONST.TOKEN_DISPLAY_MODES.NONE`\n   */\n  displayName: CONST.TokenDisplayMode;\n\n  /**\n   * The _id of an Actor document which this Token represents\n   * @defaultValue `null`\n   */\n  actorId: string | null;\n\n  /**\n   * Does this Token uniquely represent a singular Actor, or is it one of many?\n   * @defaultValue `false`\n   */\n  actorLink: boolean;\n\n  /**\n   * Token-level data which overrides the base data of the associated Actor\n   * @defaultValue `{}`\n   */\n  actorData: Partial<ActorDataSource>;\n\n  /**\n   * A file path to an image or video file used to depict the Token\n   * @defaultValue `this.DEFAULT_ICON`\n   */\n  img: string | null;\n\n  /**\n   * An optional color tint applied to the Token image\n   */\n  tint?: string | null;\n\n  /**\n   * The width of the Token in grid units\n   * @defaultValue `1`\n   */\n  width: number;\n\n  /**\n   * The height of the Token in grid units\n   * @defaultValue `1`\n   */\n  height: number;\n\n  /**\n   * A scale factor applied to the Token image, between 0.25 and 3\n   * @defaultValue `1`\n   */\n  scale: number;\n\n  /**\n   * Flip the Token image horizontally?\n   * @defaultValue `false`\n   */\n  mirrorX: boolean;\n\n  /**\n   * Flip the Token image vertically?\n   * @defaultValue `false`\n   */\n  mirrorY: boolean;\n\n  /**\n   * The x-coordinate of the top-left corner of the Token\n   * @defaultValue `0`\n   */\n  x: number;\n\n  /**\n   * The y-coordinate of the top-left corner of the Token\n   * @defaultValue `0`\n   */\n  y: number;\n\n  /**\n   * The vertical elevation of the Token, in distance units\n   * @defaultValue `0`\n   */\n  elevation: number;\n\n  /**\n   * Prevent the Token image from visually rotating?\n   * @defaultValue `false`\n   */\n  lockRotation: boolean;\n\n  /**\n   * The rotation of the Token in degrees, from 0 to 360. A value of 0 represents a southward-facing Token.\n   * @defaultValue `0`\n   */\n  rotation: number;\n\n  /**\n   * An array of effect icon paths which are displayed on the Token\n   * @defaultValue `[]`\n   */\n  effects: string[];\n\n  /**\n   * A single icon path which is displayed as an overlay on the Token\n   */\n  overlayEffect?: string;\n\n  /**\n   * The opacity of the token image\n   * @defaultValue `1`\n   */\n  alpha: number;\n\n  /**\n   * Is the Token currently hidden from player view?\n   * @defaultValue `false`\n   */\n  hidden: boolean;\n\n  /**\n   * Is this Token a source of vision?\n   * @defaultValue Whether dimSight or brightSight have a value greater 0.\n   */\n  vision: boolean;\n\n  /**\n   * How far in distance units the Token can naturally see as if in dim light\n   * @defaultValue `0`\n   */\n  dimSight: number;\n\n  /**\n   * How far in distance units the Token can naturally see as if in bright light\n   * @defaultValue `0`\n   */\n  brightSight: number;\n\n  /**\n   * How far in distance units this Token emits dim light\n   * @defaultValue `0`\n   */\n  dimLight: number;\n\n  /**\n   * How far in distance units this Token emits bright light\n   * @defaultValue `0`\n   */\n  brightLight: number;\n\n  /**\n   * The angle at which this Token is able to see, if it has vision\n   * @defaultValue `360`\n   */\n  sightAngle: number;\n\n  /**\n   * The angle at which this Token is able to emit light\n   * @defaultValue `360`\n   */\n  lightAngle: number;\n\n  /**\n   * The color of the token's emitted light as an HTML hexadecimal color string\n   */\n  lightColor: string | undefined | null;\n\n  /**\n   * The intensity of any light emitted by the token\n   * @defaultValue `0.25`\n   */\n  lightAlpha: number;\n\n  /**\n   * A data object which configures token light animation settings\n   * @defaultValue `{}`\n   */\n  lightAnimation: AnimationData;\n\n  /**\n   * A displayed Token disposition from CONST.TOKEN_DISPOSITIONS\n   * @defaultValue `CONST.TOKEN_DISPOSITIONS.HOSTILE`\n   */\n  disposition: CONST.TokenDisposition;\n\n  /**\n   * The display mode of Token resource bars, from CONST.TOKEN_DISPLAY_MODES\n   * @defaultValue `CONST.TOKEN_DISPLAY_MODES.NONE`\n   */\n  displayBars: CONST.TokenDisplayMode;\n\n  /**\n   * The configuration of the Token's primary resource bar\n   * @defaultValue `{ attribute: game?.system.data.primaryTokenAttribute || null }`\n   */\n  bar1: TokenBarData;\n\n  /**\n   * The configuration of the Token's secondary resource bar\n   * @defaultValue `{ attribute: game?.system.data.secondaryTokenAttribute || null }`\n   */\n  bar2: TokenBarData;\n\n  /**\n   * An object of optional key/value flags\n   * @defaultValue `{}`\n   */\n  flags: ConfiguredFlags<'Token'>;\n}\n\nexport interface TokenDataConstructorData {\n  /**\n   * The Token _id which uniquely identifies it within its parent Scene\n   * @defaultValue `null`\n   */\n  _id?: string | null;\n\n  /**\n   * The name used to describe the Token\n   */\n  name?: string | null;\n\n  /**\n   * The display mode of the Token nameplate, from CONST.TOKEN_DISPLAY_MODES\n   * @defaultValue `CONST.TOKEN_DISPLAY_MODES.NONE`\n   */\n  displayName?: CONST.TokenDisplayMode | null;\n\n  /**\n   * The _id of an Actor document which this Token represents\n   * @defaultValue `null`\n   */\n  actorId?: string | null;\n\n  /**\n   * Does this Token uniquely represent a singular Actor, or is it one of many?\n   * @defaultValue `false`\n   */\n  actorLink?: boolean;\n\n  /**\n   * Token-level data which overrides the base data of the associated Actor\n   * @defaultValue `{}`\n   */\n  actorData?: Partial<ActorDataSource> | null;\n\n  /**\n   * A file path to an image or video file used to depict the Token\n   * @defaultValue `this.DEFAULT_ICON`\n   */\n  img?: string | null;\n\n  /**\n   * An optional color tint applied to the Token image\n   */\n  tint?: string | null;\n\n  /**\n   * The width of the Token in grid units\n   * @defaultValue `1`\n   */\n  width?: number | null;\n\n  /**\n   * The height of the Token in grid units\n   * @defaultValue `1`\n   */\n  height?: number | null;\n\n  /**\n   * A scale factor applied to the Token image, between 0.25 and 3\n   * @defaultValue `1`\n   */\n  scale?: number | null;\n\n  /**\n   * Flip the Token image horizontally?\n   * @defaultValue `false`\n   */\n  mirrorX?: boolean | null;\n\n  /**\n   * Flip the Token image vertically?\n   * @defaultValue `false`\n   */\n  mirrorY?: boolean | null;\n\n  /**\n   * The x-coordinate of the top-left corner of the Token\n   * @defaultValue `0`\n   */\n  x?: number | null;\n\n  /**\n   * The y-coordinate of the top-left corner of the Token\n   * @defaultValue `0`\n   */\n  y?: number | null;\n\n  /**\n   * The vertical elevation of the Token, in distance units\n   * @defaultValue `0`\n   */\n  elevation?: number | null;\n\n  /**\n   * Prevent the Token image from visually rotating?\n   * @defaultValue `false`\n   */\n  lockRotation?: boolean | null;\n\n  /**\n   * The rotation of the Token in degrees, from 0 to 360. A value of 0 represents a southward-facing Token.\n   * @defaultValue `0`\n   */\n  rotation?: number | null;\n\n  /**\n   * An array of effect icon paths which are displayed on the Token\n   * @defaultValue `[]`\n   */\n  effects?: string[] | null;\n\n  /**\n   * A single icon path which is displayed as an overlay on the Token\n   */\n  overlayEffect?: string | null;\n\n  /**\n   * The opacity of the token image\n   * @defaultValue `1`\n   */\n  alpha?: number | null;\n\n  /**\n   * Is the Token currently hidden from player view?\n   * @defaultValue `false`\n   */\n  hidden?: boolean | null;\n\n  /**\n   * Is this Token a source of vision?\n   * @defaultValue Whether dimSight or brightSight have a value greater 0.\n   */\n  vision?: boolean | null;\n\n  /**\n   * How far in distance units the Token can naturally see as if in dim light\n   * @defaultValue `0`\n   */\n  dimSight?: number | null;\n\n  /**\n   * How far in distance units the Token can naturally see as if in bright light\n   * @defaultValue `0`\n   */\n  brightSight?: number | null;\n\n  /**\n   * How far in distance units this Token emits dim light\n   * @defaultValue `0`\n   */\n  dimLight?: number | null;\n\n  /**\n   * How far in distance units this Token emits bright light\n   * @defaultValue `0`\n   */\n  brightLight?: number | null;\n\n  /**\n   * The angle at which this Token is able to see, if it has vision\n   * @defaultValue `360`\n   */\n  sightAngle?: number | null;\n\n  /**\n   * The angle at which this Token is able to emit light\n   * @defaultValue `360`\n   */\n  lightAngle?: number | null;\n\n  /**\n   * The color of the token's emitted light as an HTML hexadecimal color string\n   */\n  lightColor?: string | null;\n\n  /**\n   * The intensity of any light emitted by the token\n   * @defaultValue `0.25`\n   */\n  lightAlpha?: number | null;\n\n  /**\n   * A data object which configures token light animation settings\n   * @defaultValue `{}`\n   */\n  lightAnimation?: AnimationDataConstructorData | null;\n\n  /**\n   * A displayed Token disposition from CONST.TOKEN_DISPOSITIONS\n   * @defaultValue `CONST.TOKEN_DISPOSITIONS.HOSTILE`\n   */\n  disposition?: CONST.TokenDisposition | null;\n\n  /**\n   * The display mode of Token resource bars, from CONST.TOKEN_DISPLAY_MODES\n   * @defaultValue `CONST.TOKEN_DISPLAY_MODES.NONE`\n   */\n  displayBars?: CONST.TokenDisplayMode | null;\n\n  /**\n   * The configuration of the Token's primary resource bar\n   * @defaultValue `{ attribute: game?.system.data.primaryTokenAttribute || null }`\n   */\n  bar1?: TokenBarDataConstructorData | null;\n\n  /**\n   * The configuration of the Token's secondary resource bar\n   * @defaultValue `{ attribute: game?.system.data.secondaryTokenAttribute || null }`\n   */\n  bar2?: TokenBarDataConstructorData | null;\n\n  /**\n   * An object of optional key/value flags\n   * @defaultValue `{}`\n   */\n  flags?: ConfiguredFlags<'Token'> | null;\n}\n\n/**\n * The data schema for a Token document.\n */\nexport class TokenData extends DocumentData<\n  TokenDataSchema,\n  TokenDataProperties,\n  PropertiesToSource<TokenDataProperties>,\n  TokenDataConstructorData,\n  documents.BaseToken\n> {\n  static defineSchema(): TokenDataSchema;\n\n  /**\n   * The default icon used for newly created Item documents\n   * @defaultValue `CONST.DEFAULT_TOKEN`\n   */\n  static DEFAULT_ICON: string;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport declare interface TokenData extends TokenDataProperties {}\n"
    ]
  