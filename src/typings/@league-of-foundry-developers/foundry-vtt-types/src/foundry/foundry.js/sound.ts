
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/foundry.js/sound.d.ts",
      "/**\n * The Sound class is used to control the playback of audio sources using the Web Audio API.\n */\ndeclare class Sound {\n  constructor(src: string);\n\n  /**\n   * The numeric identifier for accessing this node\n   */\n  id: number;\n\n  /**\n   * The audio source path\n   */\n  src: string;\n\n  /**\n   * The AudioContainer which controls playback\n   */\n  container: AudioContainer;\n\n  /**\n   * The time in seconds at which playback was started\n   * @defaultValue `undefined`\n   */\n  startTime: number | undefined;\n\n  /**\n   * The time in seconds at which playback was paused\n   * @defaultValue `undefined`\n   */\n  pausedTime: number | undefined;\n\n  /**\n   * Registered event callbacks\n   * @defaultValue `{stop: {}, start: {}, end: {}, pause: {}, load: {}}`\n   */\n  events: Sound.EventCallbacks;\n\n  /**\n   * The registered event handler id for this Sound.\n   * Incremented each time a callback is registered.\n   * @defaultValue `1`\n   * @internal\n   */\n  protected _eventHandlerId: number;\n\n  /**\n   * If this Sound source is currently in the process of loading, this attribute contains a Promise that will resolve\n   * when the loading process completes.\n   * @defaultValue `undefined`\n   */\n  loading: Promise<void> | undefined;\n\n  /**\n   * A collection of scheduled events recorded as window timeout IDs\n   * @internal\n   */\n  protected _scheduledEvents: Set<number>;\n\n  /**\n   * A global audio node ID used to quickly reference a specific audio node\n   * @defaultValue `0`\n   * @internal\n   */\n  protected static _nodeId: number;\n\n  /**\n   * A convenience reference to the sound context used by the application\n   */\n  get context(): AudioContext;\n\n  /**\n   * A reference to the audio source node being used by the AudioContainer\n   */\n  get node(): AudioBufferSourceNode | MediaElementAudioSourceNode | undefined;\n\n  /**\n   * A reference to the GainNode parameter which controls volume\n   */\n  get gain(): AudioParam | undefined;\n\n  /**\n   * The current playback time of the sound\n   */\n  get currentTime(): number | undefined;\n\n  /**\n   * The total sound duration, in seconds\n   */\n  get duration(): number | undefined;\n\n  /**\n   * Is the contained audio node loaded and ready for playback?\n   */\n  get loaded(): boolean;\n\n  /**\n   * Did the contained audio node fail to load?\n   */\n  get failed(): boolean;\n\n  /**\n   * Is the audio source currently playing?\n   */\n  get playing(): boolean;\n\n  /**\n   * Is the Sound current looping?\n   */\n  get loop(): boolean;\n  set loop(looping: boolean);\n\n  /**\n   * The volume at which the Sound is playing\n   */\n  get volume(): number | undefined;\n  set volume(value: number | undefined);\n\n  /**\n   * Fade the volume for this sound between its current level and a desired target volume\n   * @param volume  - The desired target volume level between 0 and 1\n   * @param options - Additional options that configure the fade operation\n   *                  (default: `{}`)\n   * @returns A Promise that resolves after the requested fade duration\n   */\n  fade(volume: number, options?: Sound.FadeOptions): Promise<void>;\n\n  /**\n   * Load the audio source, creating an AudioBuffer.\n   * Audio loading is idempotent, it can be requested multiple times but only the first load request will be honored.\n   * @param options - Additional options which affect resource loading\n   *                  (default: `{}`)\n   * @returns The Sound once its source audio buffer is loaded\n   */\n  load(options?: Sound.LoadOptions): Promise<Sound>;\n\n  /**\n   * Begin playback for the sound node\n   * @param options - Options which configure playback\n   *                  (default: `{}`)\n   */\n  play(options?: Sound.PlayOptions): void;\n\n  /**\n   * Pause playback, remembering the playback position in order to resume later.\n   */\n  pause(): void;\n\n  /**\n   * Stop playback, fully resetting the Sound to a non-playing state.\n   */\n  stop(): void;\n\n  /**\n   * Schedule a function to occur at the next occurrence of a specific playbackTime for this Sound.\n   * @param fn           - A function that will be called with this Sound as its single argument\n   * @param playbackTime - The desired playback time at which the function should be called\n   * @returns A Promise which resolves once the scheduled function has been called\n   *\n   * @example\n   * ```typescript\n   * sound.schedule(() => console.log(\"Do something exactly 30 seconds into the track\"), 30);\n   * sound.schedule(() => console.log(\"Do something next time the track loops back to the beginning\"), 0);\n   * sound.schedule(() => console.log(\"Do something 5 seconds before the end of the track\"), sound.duration - 5);\n   * ```\n   */\n  schedule(fn: Sound.Callback, playbackTime: number): Promise<void>;\n\n  /**\n   * Trigger registered callback functions for a specific event name.\n   * @param eventName - The event name being emitted\n   */\n  emit(eventName: Sound.EventName): void;\n\n  /**\n   * Deactivate an event handler which was previously registered for a specific event\n   * @param eventName - The event name being deactivated\n   * @param fn        - The callback ID or callback function being un-registered\n   */\n  off(eventName: Sound.EventName, fn: number | Sound.Callback): void;\n\n  /**\n   * Register an event handler to take actions for a certain Sound event.\n   * @param eventName- The event name being deactivated\n   * @param fn       - The callback function to trigger when the event occurs\n   * @param options  - Additional options that affect callback registration\n   *                   (default: `{}`)\n   */\n  on(eventName: Sound.EventName, fn: Sound.Callback, options?: Sound.OnOptions): number;\n\n  /**\n   * Register a new callback function for a certain event. For internal use only.\n   * @internal\n   */\n  protected _registerForEvent(eventName: Sound.EventName, callback: Sound.Callback): number;\n\n  /**\n   * Cancel all pending scheduled events.\n   * @internal\n   */\n  protected _clearEvents(): void;\n\n  /**\n   * Called when playback concludes naturally\n   */\n  protected _onEnd(): void;\n\n  /**\n   * Called when the audio buffer is first loaded\n   */\n  protected _onLoad(): void;\n\n  /**\n   * Called when playback is paused\n   */\n  protected _onPause(): void;\n\n  /**\n   * Called when the sound begins playing\n   */\n  protected _onStart(): void;\n\n  /**\n   * Called when playback is stopped (prior to naturally reaching the end)\n   */\n  protected _onStop(): void;\n}\n\ndeclare namespace Sound {\n  type Callback = (sound: Sound) => void;\n\n  type EventName = 'end' | 'pause' | 'start' | 'stop' | 'load';\n\n  type EventCallbacks = Record<EventName, Partial<Record<number, Callback>>>;\n\n  type FadeType = 'linear' | 'exponential';\n\n  interface FadeOptions {\n    /**\n     * The duration of the fade effect in milliseconds\n     * @defaultValue `1000`\n     */\n    duration?: number;\n\n    /**\n     * A volume level to start from, the current volume by default\n     */\n    from?: number;\n\n    /**\n     * The type of fade easing, 'linear' or 'exponential'\n     * @defaultValue `'linear'`\n     */\n    type?: FadeType;\n  }\n\n  interface LoadOptions {\n    /**\n     * Automatically begin playback of the audio source once loaded\n     * @defaultValue `false`\n     */\n    autoplay?: boolean;\n\n    /**\n     * Additional options passed to the play method when loading is complete\n     * @defaultValue `{}`\n     */\n    autoplayOptions?: PlayOptions;\n  }\n\n  interface PlayOptions {\n    /**\n     * Whether to loop the audio automatically\n     * @defaultValue `false`\n     */\n    loop?: boolean;\n\n    /**\n     * A specific offset in seconds at which to begin playback\n     */\n    offset?: number;\n\n    /**\n     * The desired volume at which to begin playback\n     */\n    volume?: number;\n\n    /**\n     * Fade volume changes over a desired duration in milliseconds\n     * @defaultValue `0`\n     */\n    fade?: number;\n  }\n\n  interface OnOptions {\n    /**\n     * Trigger the callback once only and automatically un-register it\n     * @defaultValue `false`\n     */\n    once?: boolean;\n  }\n}\n"
    ]
  