
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/foundry.js/collections/documentCollections/worldCollections/playlists.d.ts",
      "import { ConfiguredDocumentClass, ConstructorDataType } from '../../../../../types/helperTypes';\n\ndeclare global {\n  /**\n   * The singleton collection of Playlist documents which exist within the active World.\n   * This Collection is accessible within the Game object as game.playlists.\n   *\n   * @see {@link Playlist} The Playlist entity\n   * @see {@link PlaylistDirectory} The PlaylistDirectory sidebar directory\n   */\n  class Playlists extends WorldCollection<typeof foundry.documents.BasePlaylist, 'Playlists'> {\n    constructor(\n      data?: StoredDocument<\n        InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BasePlaylist>>\n      >['data']['_source'][]\n    );\n\n    /** @override */\n    static documentName: 'Playlist';\n\n    /**\n     * Return the subset of Playlist entities which are currently playing\n     */\n    get playing(): ReturnType<this['filter']>;\n\n    /**\n     * Perform one-time initialization to begin playback of audio\n     */\n    initialize(): void;\n\n    /**\n     * Handle changes to a Scene to determine whether to trigger changes to Playlist entities.\n     * @param scene - The Scene entity being updated\n     * @param data  - The incremental update data\n     */\n    protected _onChangeScene(\n      scene: StoredDocument<InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BaseScene>>>,\n      data: DeepPartial<ConstructorDataType<foundry.documents.BaseScene['data']>>\n    ): Promise<void>;\n  }\n}\n"
    ]
  