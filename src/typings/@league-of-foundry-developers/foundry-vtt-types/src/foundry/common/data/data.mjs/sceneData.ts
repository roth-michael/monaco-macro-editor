
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/common/data/data.mjs/sceneData.d.ts",
      "import {\n  ConfiguredDocumentClass,\n  ConfiguredFlags,\n  ConstructorDataType,\n  FieldReturnType,\n  PropertiesToSource\n} from '../../../../types/helperTypes';\nimport EmbeddedCollection from '../../abstract/embedded-collection.mjs';\nimport { DocumentData } from '../../abstract/module.mjs';\nimport * as fields from '../fields.mjs';\nimport * as documents from '../../documents.mjs';\nimport * as CONST from '../../constants.mjs';\nimport { AmbientLightData } from './ambientLightData';\nimport { AmbientSoundData } from './ambientSoundData';\nimport { DrawingData } from './drawingData';\nimport { MeasuredTemplateData } from './measuredTemplateData';\nimport { NoteData } from './noteData';\nimport { TileData } from './tileData';\nimport { TokenData } from './tokenData';\nimport { WallData } from './wallData';\n\ninterface SceneDataSchema extends DocumentSchema {\n  _id: typeof fields.DOCUMENT_ID;\n  name: typeof fields.REQUIRED_STRING;\n  active: typeof fields.BOOLEAN_FIELD;\n  navigation: FieldReturnType<typeof fields.BOOLEAN_FIELD, { default: true }>;\n  navOrder: typeof fields.INTEGER_SORT_FIELD;\n  navName: typeof fields.BLANK_STRING;\n  img: typeof fields.VIDEO_FIELD;\n  foreground: typeof fields.VIDEO_FIELD;\n  thumb: typeof fields.IMAGE_FIELD;\n  width: FieldReturnType<typeof fields.POSITIVE_INTEGER_FIELD, { required: true; default: 4000 }>;\n  height: FieldReturnType<typeof fields.POSITIVE_INTEGER_FIELD, { required: true; default: 3000 }>;\n  padding: {\n    type: typeof Number;\n    required: true;\n    default: 0.25;\n    validate: (p: unknown) => boolean;\n    validation: 'Invalid {name} {field} which must be a number between 0 and 0.5';\n  };\n  initial: {\n    type: typeof Object;\n    required: false;\n    nullable: true;\n    default: null;\n    validate: typeof _validateInitialViewPosition;\n    validationError: 'Invalid initial view position object provided for Scene';\n  };\n  backgroundColor: FieldReturnType<typeof fields.COLOR_FIELD, { required: true; default: '#999999' }>;\n  gridType: FieldReturnType<\n    typeof fields.REQUIRED_NUMBER,\n    {\n      default: typeof CONST.GRID_TYPES.SQUARE;\n      validate: (t: unknown) => t is CONST.GridType;\n      validationError: 'Invalid {name } {field} which must be a value in CONST.GRID_TYPES';\n    }\n  >;\n  grid: {\n    type: typeof Number;\n    required: true;\n    default: 100;\n    validate: (n: unknown) => boolean;\n    validationError: `Invalid {name} {field} which must be an integer number of pixels, ${typeof CONST.GRID_MIN_SIZE} or greater`;\n  };\n  shiftX: FieldReturnType<typeof fields.INTEGER_FIELD, { required: true; default: 0 }>;\n  shiftY: FieldReturnType<typeof fields.INTEGER_FIELD, { required: true; default: 0 }>;\n  gridColor: FieldReturnType<typeof fields.COLOR_FIELD, { required: true; default: '#000000' }>;\n  gridAlpha: FieldReturnType<typeof fields.ALPHA_FIELD, { required: true; default: 0.2 }>;\n  gridDistance: FieldReturnType<typeof fields.REQUIRED_POSITIVE_NUMBER, { default: () => number }>;\n  gridUnits: FieldReturnType<typeof fields.BLANK_STRING, { default: () => string }>;\n  tokenVision: FieldReturnType<typeof fields.BOOLEAN_FIELD, { default: true }>;\n  fogExploration: FieldReturnType<typeof fields.BOOLEAN_FIELD, { default: true }>;\n  fogReset: typeof fields.TIMESTAMP_FIELD;\n  globalLight: typeof fields.BOOLEAN_FIELD;\n  globalLightThreshold: {\n    type: typeof Number;\n    required: true;\n    nullable: true;\n    default: null;\n    validate: (n: unknown) => boolean;\n    validationError: 'Invalid {name} {field} which must be null, or a number between 0 and 1';\n  };\n  darkness: FieldReturnType<typeof fields.ALPHA_FIELD, { default: 0 }>;\n  drawings: fields.EmbeddedCollectionField<typeof documents.BaseDrawing>;\n  tokens: fields.EmbeddedCollectionField<typeof documents.BaseToken>;\n  lights: fields.EmbeddedCollectionField<typeof documents.BaseAmbientLight>;\n  notes: fields.EmbeddedCollectionField<typeof documents.BaseNote>;\n  sounds: fields.EmbeddedCollectionField<typeof documents.BaseAmbientSound>;\n  templates: fields.EmbeddedCollectionField<typeof documents.BaseMeasuredTemplate>;\n  tiles: fields.EmbeddedCollectionField<typeof documents.BaseToken>;\n  walls: fields.EmbeddedCollectionField<typeof documents.BaseWall>;\n  playlist: fields.ForeignDocumentField<{ type: typeof documents.BasePlaylist; required: false }>;\n  playlistSound: fields.ForeignDocumentField<{ type: typeof documents.BasePlaylistSound; required: false }>;\n  journal: fields.ForeignDocumentField<{ type: typeof documents.BaseJournalEntry; required: false }>;\n  weather: typeof fields.BLANK_STRING;\n  folder: fields.ForeignDocumentField<{ type: typeof documents.BaseFolder }>;\n  sort: typeof fields.INTEGER_SORT_FIELD;\n  permission: typeof fields.DOCUMENT_PERMISSIONS;\n  flags: typeof fields.BLANK_STRING;\n}\n\ninterface SceneDataProperties {\n  /**\n   * The _id which uniquely identifies this Scene document\n   */\n  _id: string | null;\n\n  /**\n   * The name of this scene\n   */\n  name: string;\n\n  /**\n   * Is this scene currently active? Only one scene may be active at a given time.\n   * @defaultValue `false`\n   */\n  active: boolean;\n\n  /**\n   * Is this scene displayed in the top navigation bar?\n   * @defaultValue `true`\n   */\n  navigation: boolean;\n\n  /**\n   * The integer sorting order of this Scene in the navigation bar relative to others\n   */\n  navOrder: number;\n\n  /**\n   * A string which overrides the canonical Scene name which is displayed in the navigation bar\n   * @defaultValue `''`\n   */\n  navName: string;\n\n  /**\n   * An image or video file path which provides the background media for the scene\n   * @defaultValue `undefined`\n   */\n  img: string | undefined | null;\n\n  /**\n   * An image or video file path which is drawn on top of all other elements in the scene\n   * @defaultValue `undefined`\n   */\n  foreground: string | undefined | null;\n\n  /**\n   * A thumbnail image (base64) or file path which visually summarizes the scene\n   * @defaultValue `undefined`\n   */\n  thumb: string | undefined | null;\n\n  /**\n   * The width of the scene canvas, this should normally be the width of the background media\n   * @defaultValue `4000`\n   */\n  width: number;\n\n  /**\n   * The height of the scene canvas, this should normally be the height of the background media\n   * @defaultValue `3000`\n   */\n  height: number;\n\n  /**\n   * The proportion of canvas padding applied around the outside of the scene\n   * dimensions to provide additional buffer space\n   * @defaultValue `0.25`\n   */\n  padding: number;\n\n  /**\n   * The initial view coordinates for the scene, or null\n   * @defaultValue `null`\n   */\n  initial: { x: number; y: number; scale: number } | null;\n\n  /**\n   * The color of the canvas which is displayed behind the scene background\n   * @defaultValue `'#999999'`\n   */\n  backgroundColor: string | null;\n\n  /**\n   * The type of grid used in this scene, a number from CONST.GRID_TYPES\n   * @defaultValue `CONST.GRID_TYPES.SQUARE`\n   */\n  gridType: CONST.GridType;\n\n  /**\n   * The grid size which represents the width (or height) of a single grid space\n   * @defaultValue `100`\n   */\n  grid: number;\n\n  /**\n   * A number of offset pixels that the background image is shifted horizontally relative to the grid\n   * @defaultValue `0`\n   */\n  shiftX: number;\n\n  /**\n   * A number of offset pixels that the background image is shifted vertically relative to the grid\n   * @defaultValue `0`\n   */\n  shiftY: number;\n\n  /**\n   * A string representing the color used to render the grid lines\n   * @defaultValue `'#000000'`\n   */\n  gridColor: string | null;\n\n  /**\n   * A number between 0 and 1 for the opacity of the grid lines\n   * @defaultValue `0.2`\n   */\n  gridAlpha: number;\n\n  /**\n   * The number of distance units which are represented by a single grid space.\n   */\n  gridDistance: number;\n\n  /**\n   * A label for the units of measure which are used for grid distance.\n   */\n  gridUnits: string;\n\n  /**\n   * Do Tokens require vision in order to see the Scene environment?\n   * @defaultValue `true`\n   */\n  tokenVision: boolean;\n\n  /**\n   * Should fog exploration progress be tracked for this Scene?\n   * @defaultValue `true`\n   */\n  fogExploration: boolean;\n\n  /**\n   * The timestamp at which fog of war was last reset for this Scene.\n   */\n  fogReset: number;\n\n  /**\n   * Does this Scene benefit from global illumination which provides bright light everywhere?\n   * @defaultValue `false`\n   */\n  globalLight: boolean;\n\n  /**\n   * A darkness level between 0 and 1, beyond which point global illumination is\n   * temporarily disabled if globalLight is true.\n   * @defaultValue `null`\n   */\n  globalLightThreshold: number | null;\n\n  /**\n   * The ambient darkness level in this Scene, where 0 represents mid-day\n   * (maximum illumination) and 1 represents mid-night (maximum darkness)\n   * @defaultValue `0`\n   */\n  darkness: number;\n\n  /**\n   * A collection of embedded Drawing objects.\n   */\n  drawings: EmbeddedCollection<ConfiguredDocumentClass<typeof documents.BaseDrawing>, SceneData>;\n\n  /**\n   * A collection of embedded Token objects.\n   */\n  tokens: EmbeddedCollection<ConfiguredDocumentClass<typeof documents.BaseToken>, SceneData>;\n\n  /**\n   *\n   * A collection of embedded AmbientLight objects.\n   */\n  lights: EmbeddedCollection<ConfiguredDocumentClass<typeof documents.BaseAmbientLight>, SceneData>;\n\n  /**\n   * A collection of embedded Note objects.\n   */\n  notes: EmbeddedCollection<ConfiguredDocumentClass<typeof documents.BaseNote>, SceneData>;\n\n  /**\n   * A collection of embedded AmbientSound objects.\n   */\n  sounds: EmbeddedCollection<ConfiguredDocumentClass<typeof documents.BaseAmbientSound>, SceneData>;\n\n  /**\n   * A collection of embedded MeasuredTemplate objects.\n   */\n  templates: EmbeddedCollection<ConfiguredDocumentClass<typeof documents.BaseMeasuredTemplate>, SceneData>;\n\n  /**\n   * A collection of embedded Tile objects.\n   */\n  tiles: EmbeddedCollection<ConfiguredDocumentClass<typeof documents.BaseTile>, SceneData>;\n\n  /**\n   * A collection of embedded Wall objects\n   */\n  walls: EmbeddedCollection<ConfiguredDocumentClass<typeof documents.BaseWall>, SceneData>;\n\n  /**\n   * A linked Playlist document which should begin automatically playing when this\n   * Scene becomes active.\n   * @defaultValue `null`\n   */\n  playlist: string | null;\n\n  /**\n   * @defaultValue `null`\n   */\n  playlistSound: string | null;\n\n  /**\n   * A linked JournalEntry document which provides narrative details about this Scene.\n   * @defaultValue `null`\n   */\n  journal: string | null;\n\n  /**\n   * A named weather effect which should be rendered in this Scene.\n   * @defaultValue `''`\n   */\n  weather: string;\n\n  /**\n   * The _id of a Folder which contains this Actor\n   * @defaultValue `null`\n   */\n  folder: string | null;\n\n  /**\n   * The numeric sort value which orders this Actor relative to its siblings\n   * @defaultValue `0`\n   */\n  sort: number;\n\n  /**\n   * An object which configures user permissions to this Actor\n   * @defaultValue `{ default: CONST.ENTITY_PERMISSIONS.NONE }`\n   */\n  permission: Partial<Record<string, foundry.CONST.EntityPermission>>;\n\n  /**\n   * An object of optional key/value flags\n   */\n  flags: ConfiguredFlags<'Scene'>;\n}\n\ninterface SceneDataConstructorData {\n  /**\n   * The _id which uniquely identifies this Scene document\n   */\n  _id?: string | null;\n\n  /**\n   * The name of this scene\n   */\n  name: string;\n\n  /**\n   * Is this scene currently active? Only one scene may be active at a given time.\n   * @defaultValue `false`\n   */\n  active?: boolean | null;\n\n  /**\n   * Is this scene displayed in the top navigation bar?\n   * @defaultValue `true`\n   */\n  navigation?: boolean | null;\n\n  /**\n   * The integer sorting order of this Scene in the navigation bar relative to others\n   */\n  navOrder?: number | null;\n\n  /**\n   * A string which overrides the canonical Scene name which is displayed in the navigation bar\n   * @defaultValue `''`\n   */\n  navName?: string | null;\n\n  /**\n   * An image or video file path which provides the background media for the scene\n   * @defaultValue `undefined`\n   */\n  img?: string | undefined | null;\n\n  /**\n   * An image or video file path which is drawn on top of all other elements in the scene\n   * @defaultValue `undefined`\n   */\n  foreground?: string | undefined | null;\n\n  /**\n   * A thumbnail image (base64) or file path which visually summarizes the scene\n   * @defaultValue `undefined`\n   */\n  thumb?: string | undefined | null;\n\n  /**\n   * The width of the scene canvas, this should normally be the width of the background media\n   * @defaultValue `4000`\n   */\n  width?: number | null;\n\n  /**\n   * The height of the scene canvas, this should normally be the height of the background media\n   * @defaultValue `3000`\n   */\n  height?: number | null;\n\n  /**\n   * The proportion of canvas padding applied around the outside of the scene\n   * dimensions to provide additional buffer space\n   * @defaultValue `0.25`\n   */\n  padding?: number | null;\n\n  /**\n   * The initial view coordinates for the scene, or null\n   * @defaultValue `null`\n   */\n  initial?: { x: number; y: number; scale: number } | null;\n\n  /**\n   * The color of the canvas which is displayed behind the scene background\n   * @defaultValue `#999999`\n   */\n  backgroundColor?: string | null;\n\n  /**\n   * The type of grid used in this scene, a number from CONST.GRID_TYPES\n   * @defaultValue `CONST.GRID_TYPES.SQUARE`\n   */\n  gridType?: CONST.GridType | null;\n\n  /**\n   * The grid size which represents the width (or height) of a single grid space\n   * @defaultValue `100`\n   */\n  grid?: number | null;\n\n  /**\n   * A number of offset pixels that the background image is shifted horizontally relative to the grid\n   * @defaultValue `0`\n   */\n  shiftX?: number | null;\n\n  /**\n   * A number of offset pixels that the background image is shifted vertically relative to the grid\n   * @defaultValue `0`\n   */\n  shiftY?: number | null;\n\n  /**\n   * A string representing the color used to render the grid lines\n   * @defaultValue `#000000`\n   */\n  gridColor?: string | null;\n\n  /**\n   * A number between 0 and 1 for the opacity of the grid lines\n   * @defaultValue `0.2`\n   */\n  gridAlpha?: number | null;\n\n  /**\n   * The number of distance units which are represented by a single grid space.\n   */\n  gridDistance?: number | null;\n\n  /**\n   * A label for the units of measure which are used for grid distance.\n   */\n  gridUnits?: string | null;\n\n  /**\n   * Do Tokens require vision in order to see the Scene environment?\n   * @defaultValue `true`\n   */\n  tokenVision?: boolean | null;\n\n  /**\n   * Should fog exploration progress be tracked for this Scene?\n   * @defaultValue `true`\n   */\n  fogExploration?: boolean | null;\n\n  /**\n   * The timestamp at which fog of war was last reset for this Scene.\n   */\n  fogReset?: number | null;\n\n  /**\n   * Does this Scene benefit from global illumination which provides bright light everywhere?\n   * @defaultValue `false`\n   */\n  globalLight?: boolean | null;\n\n  /**\n   * A darkness level between 0 and 1, beyond which point global illumination is\n   * temporarily disabled if globalLight is true.\n   * @defaultValue `null`\n   */\n  globalLightThreshold?: number | null;\n\n  /**\n   * The ambient darkness level in this Scene, where 0 represents mid-day\n   * (maximum illumination) and 1 represents mid-night (maximum darkness)\n   * @defaultValue `0`\n   */\n  darkness?: number | null;\n\n  /**\n   * A collection of embedded Drawing objects.\n   */\n  drawings?: ConstructorDataType<DrawingData>[] | null;\n\n  /**\n   * A collection of embedded Token objects.\n   */\n  tokens?: ConstructorDataType<TokenData>[] | null;\n\n  /**\n   *\n   * A collection of embedded AmbientLight objects.\n   */\n  lights?: ConstructorDataType<AmbientLightData>[] | null;\n\n  /**\n   * A collection of embedded Note objects.\n   */\n  notes?: ConstructorDataType<NoteData>[] | null;\n\n  /**\n   * A collection of embedded AmbientSound objects.\n   */\n  sounds?: ConstructorDataType<AmbientSoundData>[] | null;\n\n  /**\n   * A collection of embedded MeasuredTemplate objects.\n   */\n  templates?: ConstructorDataType<MeasuredTemplateData>[] | null;\n\n  /**\n   * A collection of embedded Tile objects.\n   */\n  tiles?: ConstructorDataType<TileData>[] | null;\n\n  /**\n   * A collection of embedded Wall objects\n   */\n  walls?: ConstructorDataType<WallData>[] | null;\n\n  /**\n   * A linked Playlist document which should begin automatically playing when this\n   * Scene becomes active.\n   * @defaultValue `null`\n   */\n  playlist?: string | null;\n\n  /**\n   * @defaultValue `null`\n   */\n  playlistSound?: string | null;\n\n  /**\n   * A linked JournalEntry document which provides narrative details about this Scene.\n   * @defaultValue `null`\n   */\n  journal?: string | null;\n\n  /**\n   * A named weather effect which should be rendered in this Scene.\n   * @defaultValue `''`\n   */\n  weather?: string | null;\n\n  /**\n   * The _id of a Folder which contains this Actor\n   * @defaultValue `null`\n   */\n  folder?: string | null;\n\n  /**\n   * The numeric sort value which orders this Actor relative to its siblings\n   * @defaultValue `0`\n   */\n  sort?: number | null;\n\n  /**\n   * An object which configures user permissions to this Actor\n   * @defaultValue `{ default: CONST.ENTITY_PERMISSIONS.NONE }`\n   */\n  permission?: Partial<Record<string, foundry.CONST.EntityPermission>> | null;\n\n  /**\n   * An object of optional key/value flags\n   */\n  flags?: ConfiguredFlags<'Scene'> | null;\n}\n\n/**\n * The data schema for a Scene document.\n * @see BaseScene\n */\nexport declare class SceneData extends DocumentData<\n  SceneDataSchema,\n  SceneDataProperties,\n  PropertiesToSource<SceneDataProperties>,\n  SceneDataConstructorData,\n  documents.BaseScene\n> {\n  /**\n   * @remarks This override does not exist in foundry but is added here to prevent runtime errors.\n   */\n  constructor(data: SceneDataConstructorData, document?: documents.BaseScene | null);\n\n  static defineSchema(): SceneDataSchema;\n\n  /** @override */\n  protected _initialize(): void;\n\n  size: number;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport declare interface SceneData extends SceneDataProperties {}\n\n/**\n * Verify that the initial view position for a Scene is valid\n * @param pos - The scene position object, or null\n * @returns Is the position valid?\n */\ndeclare function _validateInitialViewPosition(pos: unknown): pos is { x: number; y: number; scale: number } | null;\n"
    ]
  