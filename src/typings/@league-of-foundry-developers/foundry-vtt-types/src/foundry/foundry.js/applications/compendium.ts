
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/foundry.js/applications/compendium.d.ts",
      "/**\n * An interface for displaying the content of a CompendiumCollection.\n * @typeParam Metadata - The metadata of the compendium\n * @typeParam Options  - The type of the options object\n */\ndeclare class Compendium<\n  Metadata extends CompendiumCollection.Metadata,\n  Options extends Application.Options = Application.Options\n> extends Application<Options> {\n  constructor(collection: CompendiumCollection<Metadata>, options?: Partial<Options>);\n\n  collection: CompendiumCollection<Metadata>;\n\n  /**\n   * @override\n   * @defaultValue\n   * ```typescript\n   * foundry.utils.mergeObject(super.defaultOptions, {\n   *   template: \"templates/apps/compendium.html\",\n   *   width: 350,\n   *   height: window.innerHeight - 100,\n   *   top: 70,\n   *   left: 120,\n   *   scrollY: [\".directory-list\"],\n   *   dragDrop: [{ dragSelector: \".directory-item\", dropSelector: \".directory-list\" }],\n   *   filters: [{inputSelector: 'input[name=\"search\"]', contentSelector: \".directory-list\"}]\n   * });\n   * ```\n   */\n  static get defaultOptions(): Application.Options;\n\n  /** @override */\n  get title(): string;\n\n  /**\n   * A convenience redirection back to the metadata object of the associated CompendiumCollection\n   */\n  get metadata(): this['collection']['metadata'];\n\n  /** @override */\n  getData(options?: Partial<Options>): Promise<Compendium.Data<Metadata>>;\n\n  /** @override */\n  close(options?: Application.CloseOptions): Promise<void>;\n\n  /** @override */\n  activateListeners(html: JQuery): void;\n\n  /**\n   * Handle opening a single compendium entry by invoking the configured entity class and its sheet\n   * @param event - The originating click event\n   * @remarks\n   * This actually returns a promise of {@link FormApplication} but the return type is not meant to be used, so it is\n   * typed as `unknown` to give deriving classes more freedom.\n   */\n  protected _onClickEntry(event: JQuery.ClickEvent): Promise<unknown>;\n\n  /** @override */\n  protected _onSearchFilter(event: KeyboardEvent, query: string, rgx: RegExp, html: HTMLElement): void;\n\n  /** @override */\n  protected _canDragStart(selector: string): boolean;\n\n  /** @override */\n  protected _canDragDrop(selector: string): boolean;\n\n  /** @override */\n  protected _onDragStart(event: DragEvent): void;\n\n  /** @override */\n  protected _onDrop(event: DragEvent): ReturnType<this['collection']['importDocument']> | false;\n\n  /**\n   * Render the ContextMenu which applies to each compendium Document\n   */\n  protected _contextMenu(html: JQuery): void;\n}\n\ndeclare namespace Compendium {\n  interface Data<Metadata extends CompendiumCollection.Metadata> {\n    collection: CompendiumCollection<Metadata>;\n    cssClass: string;\n    index: CompendiumCollection<Metadata>['index'];\n  }\n}\n"
    ]
  