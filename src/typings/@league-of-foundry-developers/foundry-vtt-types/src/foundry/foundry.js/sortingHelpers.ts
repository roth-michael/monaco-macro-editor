
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/foundry.js/sortingHelpers.d.ts",
      "/**\n * A collection of functions related to sorting objects within a parent container.\n */\ndeclare class SortingHelpers {\n  /**\n   * Given a source object to sort, a target to sort relative to, and an Array of siblings in the container:\n   * Determine the updated sort keys for the source object, or all siblings if a reindex is required.\n   * Return an Array of updates to perform, it is up to the caller to dispatch these updates.\n   * Each update is structured as:\n   * ```typescript\n   * {\n   *   target: object,\n   *   update: {sortKey: sortValue}\n   * }\n   * ```\n   *\n   * @param source     - source object being sorted\n   * @param target     - The target object relative which to sort\n   *                     (default: `null`)\n   * @param siblings   - The sorted Array of siblings which share the same sorted container\n   *                     (default: `[]`)\n   * @param sortKey    - The name of the data property within the source object which defines the sort key\n   *                     (default: `'sort'`)\n   * @param sortBefore - Whether to sort before the target (if true) or after (if false)\n   *                     (default: `true`)\n   * @typeParam T      - the type of the source and target object\n   *\n   * @returns An Array of updates for the caller of the helper function to perform\n   */\n  static performIntegerSort<T, SortKey extends string = 'sort'>(\n    source: T,\n    {\n      target,\n      siblings,\n      sortKey,\n      sortBefore\n    }?: {\n      /**\n       * The target object relative which to sort\n       * @defaultValue `null`\n       */\n      target?: T | null;\n\n      /**\n       * The sorted Array of siblings which share the same sorted container\n       * @defaultValue `[]`\n       */\n      siblings?: T[];\n\n      /**\n       * The name of the data property within the source object which defines the sort key\n       * @defaultValue `'sort'`\n       */\n      sortKey?: SortKey;\n\n      /**\n       * Whether to sort before the target (if true) or after (if false)\n       * @defaultValue `true`\n       */\n      sortBefore?: boolean;\n    }\n  ): Array<{\n    target: T;\n    update: {\n      [Key in SortKey]: number;\n    };\n  }>;\n\n  /**\n   * Given an ordered Array of siblings and a target position, return the [min,max] indices to sort before the target\n   */\n  protected static _sortBefore<T>(siblings: T[], idx: number, sortKey: string): [T, T];\n\n  /**\n   * Given an ordered Array of siblings and a target position, return the [min,max] indices to sort after the target\n   */\n  protected static _sortAfter<T>(siblings: T[], idx: number, sortKey: string): [T, T];\n}\n"
    ]
  