
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/foundry.js/applications/sidebarTabs/settings.d.ts",
      "import { ConfiguredDocumentClass } from '../../../../types/helperTypes';\n\ndeclare global {\n  /**\n   * The sidebar tab which displays various game settings, help messages, and configuration options.\n   * The Settings sidebar is the furthest-to-right using a triple-cogs icon.\n   * @typeParam Options - The type of the options object\n   */\n  class Settings<Options extends Application.Options = Application.Options> extends SidebarTab<Options> {\n    /**\n     * @override\n     * @defaultValue\n     * ```typescript\n     * foundry.utils.mergeObject(super.defaultOptions, {\n     *   id: \"setting\",\n     *   template: \"templates/sidebar/settings.html\".\n     *   title: \"Settings\"\n     * })\n     * ```\n     */\n    static get defaultOptions(): Application.Options;\n\n    /**\n     * @param options - (unused)\n     * @override\n     */\n    getData(options?: Partial<Options>): Settings.Data;\n\n    /**\n     * @override\n     */\n    activateListeners(html: JQuery): void;\n\n    /**\n     * Delegate different actions for different settings buttons\n     */\n    protected _onSettingsButton(event: JQuery.ClickEvent): void;\n\n    /**\n     * Executes with the update notification pip is clicked\n     * @param event - The originating click event\n     */\n    protected _onUpdateNotificationClick(event: JQuery.ClickEvent): void;\n  }\n\n  namespace Settings {\n    interface Data {\n      user: InstanceType<ConfiguredDocumentClass<typeof User>>;\n      system: Game['system'];\n      coreVersion: Game['data']['version'];\n      isDemo: boolean;\n      canConfigure: boolean;\n      canSetup: boolean;\n      coreUpdate: string | false;\n      systemUpdate: string | false;\n      modules: number;\n    }\n  }\n}\n"
    ]
  