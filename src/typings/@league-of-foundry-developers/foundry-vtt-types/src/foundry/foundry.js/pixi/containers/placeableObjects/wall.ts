
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/foundry.js/pixi/containers/placeableObjects/wall.d.ts",
      "import type { ConfiguredDocumentClass } from '../../../../../types/helperTypes';\n\ndeclare global {\n  /**\n   * A Wall is an implementation of PlaceableObject which represents a physical or visual barrier within the Scene.\n   * Walls are used to restrict Token movement or visibility as well as to define the areas of effect for ambient lights\n   * and sounds.\n   *\n   * @see {@link WallsLayer}\n   * @see {@link WallConfig}\n   *\n   * @example\n   * ```typescript\n   * Wall.create<Wall>({\n   *  c = [100, 200, 400, 600],\n   *  move: CONST.WALL_MOVEMENT_TYPES.NORMAL,\n   *  sense: CONST.WALL_SENSE_TYPES.NORMAL,\n   *  dir: CONST.WALL_DIRECTIONS.BOTH,\n   *  door: CONST.WALL_DOOR_TYPES.DOOR,\n   *  ds: CONST.WALL_DOOR_STATES.CLOSED\n   * });\n   * ```\n   */\n  class Wall extends PlaceableObject<InstanceType<ConfiguredDocumentClass<typeof WallDocument>>> {\n    /**\n     * @remarks Not used for `Wall`\n     */\n    controlIcon: null;\n    /**\n     * @remarks Type is `MouseInteractionManager<this, this['endpoints']>`\n     */\n    mouseInteractionManager: MouseInteractionManager<this, any> | null;\n\n    /**\n     * An reference the Door Control icon associated with this Wall, if any\n     */\n    protected doorControl: DoorControl | null;\n\n    /** @override */\n    static get embeddedName(): 'Wall';\n\n    /**\n     * A convenience reference to the coordinates Array for the Wall endpoints, [x0,y0,x1,y1].\n     */\n    get coords(): Wall.Data['c'];\n\n    /** @override */\n    get bounds(): NormalizedRectangle;\n\n    /**\n     * Return the coordinates [x,y] at the midpoint of the wall segment\n     */\n    get midpoint(): [number, number];\n\n    /** @override */\n    get center(): PIXI.Point;\n\n    /**\n     * Get the direction of effect for a directional Wall\n     * @returns The angle of wall effect\n     */\n    get direction(): number | null;\n\n    /**\n     * This helper converts the wall segment to a Ray\n     * @returns The wall in Ray representation\n     */\n    toRay(): Ray;\n\n    /** @override */\n    draw(): Promise<this>;\n\n    endpoints: PIXI.Graphics;\n\n    /** @override */\n    protected _createInteractionManager(): NonNullable<this['mouseInteractionManager']>;\n\n    /** @override */\n    activateListeners(): void;\n\n    /**\n     * Draw a directional prompt icon for one-way walls to illustrate their direction of effect.\n     * @returns The drawn icon\n     */\n    protected _drawDirection(): PIXI.Sprite | void; // TODO: returning void may be unreachable\n\n    /** @override */\n    refresh(): this;\n\n    /**\n     * Compute an approximate Polygon which encloses the line segment providing a specific hitArea for the line\n     * @param coords - The original wall coordinates\n     * @param pad    - The amount of padding to apply\n     * @returns A constructed Polygon for the line\n     */\n    protected _getWallHitPolygon(coords: [number, number, number, number], pad: number): PIXI.Polygon;\n\n    /**\n     * Given the properties of the wall - decide upon a color to render the wall for display on the WallsLayer\n     */\n    protected _getWallColor(): number;\n\n    /** @override */\n    protected _onControl({ chain }?: PlaceableObject.ControlOptions & { chain?: boolean }): void;\n\n    /** @override */\n    protected _onRelease(): void;\n\n    /** @override */\n    destroy(options?: { children?: boolean; texture?: boolean; baseTexture?: boolean }): void;\n\n    /**\n     * Test whether the Wall direction lies between two provided angles\n     * This test is used for collision and vision checks against one-directional walls\n     */\n    isDirectionBetweenAngles(lower: number, upper: number): boolean;\n\n    /**\n     * A simple test for whether a Ray can intersect a directional wall\n     * @param ray - The ray to test\n     * @returns Can an intersection occur?\n     */\n    canRayIntersect(ray: Ray): boolean;\n\n    /**\n     * Get an Array of Wall objects which are linked by a common coordinate\n     * @returns An object reporting ids and endpoints of the linked segments\n     */\n    getLinkedSegments(): {\n      ids: string;\n      walls: Wall[];\n      endpoints: Array<[number, number]>;\n    };\n\n    /** @override */\n    protected _onCreate(): void;\n\n    /** @override */\n    protected _onUpdate(changed: DeepPartial<foundry.data.WallData>, options?: any, userId?: string): void;\n\n    /** @override */\n    protected _onDelete(): void;\n\n    /**\n     * Callback actions when a wall that contains a door is moved or its state is changed\n     * @param doorChange - Update vision and sound restrictions\n     */\n    protected _onModifyWall(doorChange?: boolean): Promise<void>;\n\n    /** @override */\n    protected _canControl(user?: User, event?: PIXI.InteractionEvent): boolean;\n\n    /** @override */\n    protected _onHoverIn(event: PIXI.InteractionEvent, options?: { hoverOutOthers: boolean }): void;\n\n    /** @override */\n    protected _onHoverOut(event: PIXI.InteractionEvent): void;\n\n    /**\n     * Handle mouse-hover events on the line segment itself, pulling the Wall to the front of the container stack\n     */\n    protected _onMouseOverLine(event: PIXI.InteractionEvent): void;\n\n    /** @override */\n    protected _onClickLeft(event: PIXI.InteractionEvent): boolean;\n\n    /** @override */\n    protected _onClickLeft2(event: PIXI.InteractionEvent): void;\n\n    /** @override */\n    protected _onClickRight2(event: PIXI.InteractionEvent): void;\n\n    /** @override */\n    protected _onDragLeftStart(event: PIXI.InteractionEvent): void;\n\n    /** @override */\n    protected _onDragLeftMove(event: PIXI.InteractionEvent): void;\n\n    /** @override */\n    protected _onDragLeftDrop(event: PIXI.InteractionEvent): Promise<any>;\n  }\n\n  namespace Wall {\n    interface Data {\n      /**\n       * Coordinates of the endpoints\n       */\n      c: [number, number, number, number];\n      /**\n       * 0 - both\n       * 1 - left\n       * 2 - right\n       */\n      dir?: foundry.CONST.WallDirection;\n      /**\n       * 0 - wall\n       * 1 - door\n       * 2 - secret\n       */\n      door: foundry.CONST.WallDoorType;\n      /**\n       * 0 - closed\n       * 1 - open\n       * 2 - locked\n       */\n      ds: foundry.CONST.WallDoorState;\n      /**\n       * 0 - blocked\n       * 1 - allowed\n       */\n      move: foundry.CONST.WallMovementType;\n      /**\n       * 0 - opaque\n       * 1 - transparent\n       * 2 - terrain\n       */\n      sense: foundry.CONST.WallSenseType;\n    }\n  }\n}\n"
    ]
  