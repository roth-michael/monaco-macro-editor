
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/common/abstract/backend.mjs.d.ts",
      "import { BaseUser } from '../documents.mjs';\nimport { AnyDocumentData } from './data.mjs';\nimport Document from './document.mjs';\n\n/**\n * An interface shared by both the client and server-side which defines how creation, update, and deletion operations are transacted.\n */\ndeclare abstract class DatabaseBackend {\n  /**\n   * Retrieve Documents based on provided query parameters\n   * @param documentClass - The Document definition\n   * @param request       - The requested operation\n   * @param user          - The requesting User\n   * @returns The created Document instances\n   */\n  get<T extends Document<any, any>>(documentClass: ConstructorOf<T>, request: Request, user: BaseUser): T[];\n\n  /**\n   * Validate the arguments passed to the get operation\n   * @param query   - A document search query to execute\n   *                  (default: `{}`)\n   * @param options - Operation options\n   *                  (default: `{}`)\n   * @param pack    - A Compendium pack identifier\n   */\n  protected _getArgs({ query, options, pack }?: Request): { query: object; options: RequestOptions; pack?: string };\n\n  /**\n   * Get primary Document instances\n   */\n  protected abstract _getDocuments<T extends Document<any, any>>(\n    documentClass: ConstructorOf<T>,\n    query: Request,\n    options: RequestOptions,\n    user: BaseUser\n  ): Promise<T[]>;\n\n  /**\n   * Get embedded Document instances\n   */\n  protected abstract _getEmbeddedDocuments<T extends Document<any, any>>(\n    documentClass: ConstructorOf<T>,\n    parent: T extends Document<any, infer U> ? U : never,\n    query: Request,\n    options: RequestOptions,\n    user: BaseUser\n  ): Promise<T[]>;\n\n  /**\n   * Get the parent Document (if any) associated with a request\n   * @param request - The requested operation\n   * @returns The parent Document, or null\n   *\n   * @remarks Actually, this returns `undefined` if  there is no parent, the JSDoc is incorrect.\n   */\n  protected _getParent(request: Request): Promise<Document<any, any> | undefined>;\n\n  /**\n   * Perform document creation operations\n   * @param documentClass - The Document definition\n   * @param request       - The requested operation\n   * @param user          - The requesting User\n   * @returns The created Document instances\n   */\n  create<T extends Document<any, any>>(documentClass: ConstructorOf<T>, request: Request, user: BaseUser): Promise<T[]>;\n\n  /**\n   * Validate the arguments passed to the create operation\n   * @param data    - An array of document data\n   *                  (default: `[]`)\n   * @param options - Operation options\n   *                  (default: `{}`)\n   * @param pack    - A Compendium pack identifier\n   */\n  protected _createArgs({ data, options, pack }?: Request): {\n    data: AnyDocumentData[];\n    options: RequestOptions;\n    pack?: string;\n  };\n\n  /**\n   * Create primary Document instances\n   */\n  protected abstract _createDocuments<T extends Document<any, any>>(\n    documentClass: ConstructorOf<T>,\n    request: Request,\n    user: BaseUser\n  ): Promise<T[]>;\n\n  /**\n   * Create embedded Document instances\n   */\n  protected abstract _createEmbeddedDocuments<T extends Document<any, any>>(\n    documentClass: ConstructorOf<T>,\n    parent: T extends Document<any, infer U> ? U : never,\n    request: Request,\n    user: BaseUser\n  ): Promise<T[]>;\n\n  /**\n   * Perform document update operations\n   * @param documentClass - The Document definition\n   * @param request       - The requested operation\n   * @param user          - The requesting User\n   * @returns The updated Document instances\n   */\n  update<T extends Document<any, any>>(documentClass: ConstructorOf<T>, request: Request, user: BaseUser): Promise<T[]>;\n\n  /**\n   * Validate the arguments passed to the update operation\n   * @param updates - An array of document data\n   *                  (default: `[]`)\n   * @param options - Operation options\n   *                  (default: `{}`)\n   * @param pack    - A Compendium pack identifier\n   */\n  protected _updateArgs({ updates, options, pack }?: Request): {\n    updates: AnyDocumentData[];\n    options: RequestOptions;\n    pack?: string;\n  };\n\n  /**\n   * Update primary Document instances\n   */\n  protected abstract _updateDocuments<T extends Document<any, any>>(\n    documentClass: ConstructorOf<T>,\n    request: Request,\n    user: BaseUser\n  ): Promise<T[]>;\n\n  /**\n   * Update embedded Document instances\n   */\n  protected abstract _updateEmbeddedDocuments<T extends Document<any, any>>(\n    documentClass: ConstructorOf<T>,\n    parent: T extends Document<any, infer U> ? U : never,\n    request: Request,\n    user: BaseUser\n  ): Promise<T[]>;\n\n  /**\n   * Perform document deletion operations\n   * @param documentClass - The Document definition\n   * @param request       - The requested operation\n   * @param user          - The requesting User\n   * @returns The deleted Document instances\n   */\n  delete<T extends Document<any, any>>(documentClass: ConstructorOf<T>, request: Request, user: BaseUser): Promise<T[]>;\n\n  /**\n   * Validate the arguments passed to the delete operation\n   * @param request - The requested operation\n   * @param ids     - An array of document ids\n   *                  (default: `[]`)\n   * @param options - Operation options\n   *                  (default: `{}`)\n   * @param pack    - A Compendium pack identifier\n   */\n  protected _deleteArgs({ ids, options, pack }?: Request): { ids: string[]; options: RequestOptions; pack?: string };\n\n  /**\n   * Delete primary Document instances\n   */\n  protected abstract _deleteDocuments<T extends Document<any, any>>(\n    documentClass: ConstructorOf<T>,\n    request: Request,\n    user: BaseUser\n  ): Promise<T[]>;\n\n  /**\n   * Delete embedded Document instances\n   */\n  protected abstract _deleteEmbeddedDocuments<T extends Document<any, any>>(\n    documentClass: ConstructorOf<T>,\n    parent: T extends Document<any, infer U> ? U : never,\n    request: Request,\n    user: BaseUser\n  ): Promise<T[]>;\n\n  /**\n   * Describe the scopes which are suitable as the namespace for a flag key\n   */\n  protected getFlagScopes(): string[];\n\n  /**\n   * Describe the scopes which are suitable as the namespace for a flag key\n   */\n  protected getCompendiumScopes(): string[];\n\n  /**\n   * Provide the Logger implementation that should be used for database operations\n   */\n  protected _getLogger(): Console;\n\n  /**\n   * Log a database operation for an embedded document, capturing the action taken and relevant IDs\n   * @param action    - The action performed\n   * @param type      - The document type\n   * @param documents - The documents modified\n   * @param info      - The logging level\n   * @param parent    - A parent document\n   * @param pack      - A compendium pack within which the operation occurred\n   */\n  protected _logOperation(\n    action: string,\n    type: string,\n    documents: Document<any, any>[],\n    { parent, pack, level }?: { parent?: Document<any, any>; pack?: string; level?: string }\n  ): void;\n\n  /**\n   * Construct a standardized error message given the context of an attempted operation\n   */\n  protected _logError(\n    user: BaseUser,\n    action: string,\n    subject: Document<any, any> | string,\n    { parent, pack }?: { parent?: Document<any, any>; pack?: string }\n  ): string;\n\n  /**\n   * Determine a string suffix for a log message based on the parent and/or compendium context.\n   */\n  protected _logContext({ parent, pack }?: { parent?: Document<any, any>; pack?: string }): string;\n}\n\ninterface Request {\n  data?: AnyDocumentData[];\n  updates?: AnyDocumentData[];\n  ids?: string[];\n  parent?: Document<any, any>;\n  query?: object | IdQuery | SceneIdUserQuery;\n  options?: RequestOptions;\n  pack?: string;\n}\n\nexport interface IdQuery {\n  _id: string;\n}\nexport interface SceneIdUserQuery {\n  sceneId: string;\n  user: string;\n}\n\nexport interface RequestOptions {\n  index?: boolean;\n  broadcast?: boolean;\n  temporary?: boolean;\n  nohook?: boolean;\n  [key: string]: unknown;\n}\n\nexport default DatabaseBackend;\n"
    ]
  