
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/foundry.js/clientDocuments/fogExploration.d.ts",
      "import { ConfiguredDocumentClass } from '../../../types/helperTypes';\nimport { RequestOptions } from '../../common/abstract/backend.mjs';\n\ndeclare global {\n  /**\n   * The client-side FogExploration document which extends the common BaseFogExploration model.\n   * Each FogExploration document contains FogExplorationData which defines its data schema.\n   *\n   * @see {@link data.FogExplorationData} The FogExploration data schema\n   */\n  class FogExploration extends ClientDocumentMixin(foundry.documents.BaseFogExploration) {\n    /**\n     * @param data - Initial data provided to construct the FogExploration document\n     *               (default: `{}`)\n     */\n    constructor(\n      data?: ConstructorParameters<ConstructorOf<foundry.documents.BaseFogExploration>>[0],\n      context?: ConstructorParameters<ConstructorOf<foundry.documents.BaseFogExploration>>[1]\n    );\n\n    /**\n     * Explore fog of war for a new point source position.\n     * @param source - The candidate source of exploration\n     * @param force  - Force the position to be re-explored\n     *                 (default: `false`)\n     * @returns Is the source position newly explored?\n     */\n    explore(source: PointSource, force?: boolean): boolean;\n\n    /**\n     * Obtain the fog of war exploration progress for a specific Scene and User.\n     * @param options - (default: `{}`)\n     */\n    static get(\n      {\n        scene,\n        user\n      }?: {\n        scene?: InstanceType<ConfiguredDocumentClass<typeof Scene>>;\n        user?: InstanceType<ConfiguredDocumentClass<typeof User>>;\n      },\n      options?: RequestOptions\n    ): Promise<StoredDocument<InstanceType<ConfiguredDocumentClass<typeof FogExploration>>> | null>;\n\n    /**\n     * Transform the explored base64 data into a PIXI.Texture object\n     */\n    getTexture(): PIXI.Texture | null;\n\n    /**\n     * Open Socket listeners which transact JournalEntry data\n     * @internal\n     */\n    static _activateSocketListeners(socket: io.Socket): void;\n\n    /**\n     * Handle a request from the server to reset fog of war for a particular scene.\n     * @internal\n     */\n    protected static _onResetFog(sceneId: string): void | Promise<void>;\n  }\n}\n\nexport {};\n"
    ]
  