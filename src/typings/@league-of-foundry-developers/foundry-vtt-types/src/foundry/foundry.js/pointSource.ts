
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/foundry.js/pointSource.d.ts",
      "/**\n * A helper class used by the Sight Layer to represent a source of vision or illumination.\n */\ndeclare class PointSource {\n  constructor();\n\n  /**\n   * The light or darkness container for this source\n   */\n  illumination: PIXI.Container;\n\n  /**\n   * This visible color container for this source\n   */\n  coloration: PIXI.Container;\n\n  /**\n   * A flag for whether this source is currently active (rendered) or not\n   * @defaultValue `false`\n   */\n  active: boolean;\n\n  /**\n   * Internal flag for whether this is a darkness source\n   * @defaultValue `false`\n   */\n  darkness: boolean;\n\n  /**\n   * Is the light source limited by an angle of emission?\n   * @defaultValue `false`\n   */\n  limited: boolean;\n\n  /**\n   * The maximum radius of emission for this source\n   * @defaultValue `0`\n   */\n  radius: number;\n\n  /**\n   * Internal flag for animation throttling time\n   * @defaultValue `0`\n   */\n  protected _animateTime: number;\n\n  /**\n   * An integer seed which de-synchronizes otherwise similar animations\n   * @defaultValue `null`\n   */\n  protected _animateSeed: number | null;\n\n  /**\n   * A flag for whether to re-initialize illumination shader uniforms the next time the light is rendered.\n   * @defaultValue `true`\n   */\n  protected _resetIlluminationUniforms: boolean;\n\n  /**\n   * A flag for whether to re-initialize coloration shader uniforms the next time the light is rendered.\n   * @defaultValue `true`\n   */\n  protected _resetColorationUniforms: boolean;\n\n  /**\n   * The x-coordinate of the source location\n   * @defaultValue `undefined`\n   */\n  x?: number;\n\n  /**\n   * The y-coordinate of the source location\n   * @defaultValue `undefined`\n   */\n  y?: number;\n\n  /**\n   * An optional z-index sorting for the source\n   * @defaultValue `undefined`\n   */\n  z?: number | null;\n\n  /**\n   * The allowed radius of dim vision or illumination\n   * @defaultValue `undefined`\n   */\n  dim?: number;\n\n  /**\n   * The allowed radius of bright vision or illumination\n   * @defaultValue `undefined`\n   */\n  bright?: number;\n\n  /**\n   * The angle of emission for this point source\n   * @defaultValue `undefined`\n   */\n  angle?: number;\n\n  /**\n   * The angle of rotation for this point source\n   * @defaultValue `undefined`\n   */\n  rotation?: number;\n\n  /**\n   * A tint color for the emitted light, if any\n   * @defaultValue `undefined`\n   */\n  color?: number | null;\n\n  /**\n   * An opacity for the emitted light, if any\n   * @defaultValue `undefined`\n   */\n  alpha?: number;\n\n  /**\n   * A level of darkness beyond which this light is active\n   * @defaultValue `undefined`\n   */\n  darknessThreshold?: number;\n\n  /**\n   * The source type from {@link SOURCE_TYPES}\n   * @defaultValue `undefined`\n   */\n  type?: foundry.CONST.SourceType;\n\n  /**\n   * An animation configuration for the source\n   * @defaultValue `undefined`\n   */\n  animation?: PointSource.Animation;\n\n  /**\n   * An integer seed to synchronize (or de-synchronize) animations\n   * @defaultValue `undefined`\n   */\n  seed?: number;\n\n  /**\n   * @defaultValue `undefined`\n   */\n  colorRGB?: [number, number, number];\n\n  /**\n   * @defaultValue `undefined`\n   */\n  ratio?: number;\n\n  /**\n   * @defaultValue `undefined`\n   */\n  fov?: PIXI.Polygon;\n\n  /**\n   * @defaultValue `undefined`\n   */\n  los?: PIXI.Polygon;\n\n  /**\n   * Create the structure of a source Container which can be rendered to the sight layer shadow-map\n   * @returns The constructed light source container\n   */\n  protected _createContainer(shaderCls: ConstructorOf<AbstractBaseShader>): PIXI.Container;\n\n  /**\n   * Initialize the source with provided object data.\n   *\n   * @param x                 - The x-coordinate of the source location\n   *                            (default: `0`)\n   * @param y                 - The y-coordinate of the source location\n   *                            (default: `0`)\n   * @param z                 - An optional z-index sorting for the source\n   *                            (default: `null`)\n   * @param dim               - The allowed radius of dim vision or illumination\n   *                            (default: `0`)\n   * @param bright            - The allowed radius of bright vision or illumination\n   *                            (default: `0`)\n   * @param angle             - The angle of emission for this point source\n   *                            (default: `360`)\n   * @param rotation          - The angle of rotation for this point source\n   *                            (default: `0`)\n   * @param color             - A tint color for the emitted light, if any\n   *                            (default: `null`)\n   * @param alpha             - An opacity for the emitted light, if any\n   *                            (default: `0.5`)\n   * @param darknessThreshold - A level of darkness beyond which this light is active\n   *                            (default: `0`)\n   * @param type              - The source type from SOURCE_TYPES\n   *                            (default: `SOURCE_TYPES.LOCAL`)\n   * @param animation         - An animation configuration for the source\n   *                            (default: `{type: null}`)\n   * @param seed              - An integer seed to synchronize (or de-synchronize) animations\n   *                            (default: `undefined`)\n   *\n   * @returns A reference to the initialized source\n   */\n  initialize({\n    x,\n    y,\n    z,\n    dim,\n    bright,\n    angle,\n    rotation,\n    color,\n    alpha,\n    darknessThreshold,\n    type,\n    animation,\n    seed\n  }?: {\n    x?: number;\n    y?: number;\n    z?: number | null;\n    dim?: number;\n    bright?: number;\n    angle?: number;\n    rotation?: number;\n    color?: number | string | null;\n    alpha?: number;\n    darknessThreshold?: number;\n    type?: string;\n    animation?: PointSource.Animation;\n    seed?: number;\n  }): this;\n\n  /**\n   * Initialize the shaders used for this animation.\n   * Reset the current shader values back to defaults.\n   * Swap to a different Shader instance if necessary.\n   */\n  protected _initializeShaders(): void;\n\n  /**\n   * Initialize the blend mode and vertical sorting of this source relative to others in the container.\n   */\n  protected _initializeBlending(): void;\n\n  /**\n   * Draw the display of this source for the darkness/light container of the SightLayer.\n   * @param updateChannels - Is this drawing initiated because lighting channels have changed?\n   * @returns The rendered light container\n   */\n  drawLight({ updateChannels }?: { updateChannels?: boolean }): PIXI.Container;\n\n  /**\n   * Draw and return a container used to depict the visible color tint of the light source on the LightingLayer\n   * @returns An updated color container for the source\n   */\n  drawColor(): PIXI.Container;\n\n  /**\n   * A common helper function for updating the display of a source container.\n   * Assign the container position, dimensions, and polygons.\n   */\n  protected _drawContainer(c: PIXI.Container): PIXI.Container;\n\n  /**\n   * Animate the PointSource, if an animation is enabled and if it currently has rendered containers.\n   * @param dt - Delta time\n   */\n  animate(dt: number): void;\n\n  /**\n   * A torch animation where the luminosity and coloration decays each frame and is revitalized by flashes\n   * @param dt        - Delta time\n   * @param speed     - The animation speed, from 1 to 10\n   * @param intensity - The animation intensity, from 1 to 10\n   */\n  animateTorch: PointSource.AnimationFunction;\n\n  /**\n   * A basic \"pulse\" animation which expands and contracts.\n   * @param dt        - Delta time\n   * @param speed     - The animation speed, from 1 to 10\n   * @param intensity - The animation intensity, from 1 to 10\n   */\n  animatePulse: PointSource.AnimationFunction;\n\n  /**\n   * Emanate waves of light from the source origin point\n   * @param dt        - Delta time\n   * @param speed     - The animation speed, from 1 to 10\n   * @param intensity - The animation intensity, from 1 to 10\n   */\n  animateTime: PointSource.AnimationFunction;\n\n  /**\n   * Evolve a value using a stochastic AR(1) process\n   * @param y      - The current value\n   * @param phi    - The decay rate of prior values\n   * @param center - The stationary mean of the series\n   * @param sigma  - The volatility of the process - standard deviation of the error term\n   * @param max    - The maximum allowed outcome, or null\n   * @param min    - The minimum allowed outcome, or null\n   * @returns The new value of the process\n   */\n  protected _ar1(\n    y: number,\n    {\n      phi,\n      center,\n      sigma,\n      max,\n      min\n    }: { phi?: number; center?: number; sigma?: number; max?: number | null; min?: number | null }\n  ): number;\n\n  static GEOMETRY: PIXI.Geometry;\n}\n\ndeclare namespace PointSource {\n  interface AnimationProperties {\n    speed?: number;\n    intensity?: number;\n  }\n  interface Animation extends AnimationProperties {\n    type: null | keyof typeof CONFIG.Canvas.lightAnimations;\n  }\n\n  type AnimationFunction = (this: PointSource, dt: number, { speed, intensity }?: AnimationProperties) => void;\n}\n"
    ]
  