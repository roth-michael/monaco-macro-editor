
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/common/data/data.mjs/actorData.d.ts",
      "import EmbeddedCollection from '../../abstract/embedded-collection.mjs';\nimport {\n  ConfiguredData,\n  ConfiguredDocumentClass,\n  ConfiguredFlags,\n  ConfiguredSource,\n  FieldReturnType,\n  PropertiesToSource\n} from '../../../../types/helperTypes';\nimport { DocumentData } from '../../abstract/module.mjs';\nimport * as documents from '../../documents.mjs';\nimport * as fields from '../fields.mjs';\nimport { PrototypeTokenData } from '../data.mjs';\nimport { PrototypeTokenDataConstructorData } from './prototypeTokenData.js';\n\ninterface ActorDataSchema extends DocumentSchema {\n  _id: typeof fields.DOCUMENT_ID;\n  name: typeof fields.REQUIRED_STRING;\n  type: DocumentField<string> & {\n    type: typeof String;\n    required: true;\n    validate: (t: unknown) => boolean;\n    validationError: 'The provided Actor type must be in the array of types defined by the game system';\n  };\n  img: FieldReturnType<typeof fields.IMAGE_FIELD, { default: () => string }>;\n  data: FieldReturnType<typeof fields.OBJECT_FIELD, { default: (data: { type: string }) => any }>; // TODO\n  token: DocumentField<PrototypeTokenData> & {\n    type: typeof PrototypeTokenData;\n    required: true;\n    default: (data: unknown) => { name: string; img: string };\n  };\n  items: fields.EmbeddedCollectionField<typeof documents.BaseItem>;\n  effects: fields.EmbeddedCollectionField<typeof documents.BaseActiveEffect>;\n  folder: fields.ForeignDocumentField<{ type: typeof documents.BaseFolder }>;\n  sort: typeof fields.INTEGER_SORT_FIELD;\n  permission: typeof fields.DOCUMENT_PERMISSIONS;\n  flags: typeof fields.OBJECT_FIELD;\n}\n\ninterface ActorDataBaseProperties {\n  /**\n   * The _id which uniquely identifies this Actor document\n   * @defaultValue `null`\n   */\n  _id: string | null;\n\n  /**\n   * The name of this Actor\n   */\n  name: string;\n\n  /**\n   * An Actor subtype which configures the system data model applied\n   */\n  type: string;\n\n  /**\n   * An image file path which provides the artwork for this Actor\n   * @defaultValue `ActorDataConstructor.DEFAULT_ICON`\n   */\n  img: string | null;\n\n  /**\n   * The system data object which is defined by the system template.json model\n   */\n  data: object;\n\n  /**\n   * Default Token settings which are used for Tokens created from this Actor\n   */\n  token: PrototypeTokenData;\n\n  /**\n   * A Collection of Item embedded Documents\n   */\n  items: EmbeddedCollection<ConfiguredDocumentClass<typeof documents.BaseItem>, ActorData>;\n\n  /**\n   * A collection of ActiveEffect embedded Documents\n   */\n  effects: EmbeddedCollection<ConfiguredDocumentClass<typeof documents.BaseActiveEffect>, ActorData>;\n\n  /**\n   * The _id of a Folder which contains this Actor\n   * @defaultValue `null`\n   */\n  folder: string | null;\n\n  /**\n   * The numeric sort value which orders this Actor relative to its siblings\n   * @defaultValue `0`\n   */\n  sort: number;\n\n  /**\n   * An object which configures user permissions to this Actor\n   * @defaultValue `{ default: CONST.ENTITY_PERMISSIONS.NONE }`\n   */\n  permission: Partial<Record<string, foundry.CONST.EntityPermission>>;\n\n  /**\n   * An object of optional key/value flags\n   * @defaultValue `{}`\n   */\n  flags: ConfiguredFlags<'Actor'>;\n}\n\ninterface ActorDataConstructorData {\n  /**\n   * The _id which uniquely identifies this Actor document\n   * @defaultValue `null`\n   */\n  _id?: string | null;\n\n  /**\n   * The name of this Actor\n   */\n  name: string;\n\n  /**\n   * An Actor subtype which configures the system data model applied\n   */\n  type: ActorDataSource['type'];\n\n  /**\n   * An image file path which provides the artwork for this Actor\n   * @defaultValue `ActorDataConstructor.DEFAULT_ICON`\n   */\n  img?: string | null;\n\n  /**\n   * The system data object which is defined by the system template.json model\n   */\n  data?: DeepPartial<ActorDataSource['data']> | null;\n\n  /**\n   * Default Token settings which are used for Tokens created from this Actor\n   */\n  token?: PrototypeTokenDataConstructorData | null;\n\n  /**\n   * A Collection of Item embedded Documents\n   */\n  items?: ConstructorParameters<ConfiguredDocumentClass<typeof documents.BaseItem>>[0][] | null;\n\n  /**\n   * A collection of ActiveEffect embedded Documents\n   */\n  effects?: ConstructorParameters<ConfiguredDocumentClass<typeof documents.BaseActiveEffect>>[0][] | null;\n\n  /**\n   * The _id of a Folder which contains this Actor\n   * @defaultValue `null`\n   */\n  folder?: string | null;\n\n  /**\n   * The numeric sort value which orders this Actor relative to its siblings\n   * @defaultValue `0`\n   */\n  sort?: number | null;\n\n  /**\n   * An object which configures user permissions to this Actor\n   * @defaultValue `{ default: CONST.ENTITY_PERMISSIONS.NONE }`\n   */\n  permission?: Partial<Record<string, foundry.CONST.EntityPermission>> | null;\n\n  /**\n   * An object of optional key/value flags\n   * @defaultValue `{}`\n   */\n  flags?: ConfiguredFlags<'Actor'> | null;\n}\n\ntype ActorDataBaseSource = PropertiesToSource<ActorDataBaseProperties>;\ntype ActorDataProperties = ActorDataBaseProperties & ConfiguredData<'Actor'>;\ntype ActorDataSource = ActorDataBaseSource & ConfiguredSource<'Actor'>;\n\ntype DocumentDataConstructor = Pick<typeof DocumentData, keyof typeof DocumentData>;\n\ninterface ActorDataConstructor extends DocumentDataConstructor {\n  new (data: ActorDataConstructorData, document?: documents.BaseActor | null): ActorData;\n\n  defineSchema(): ActorDataSchema;\n\n  /**\n   * The default icon used for newly created Actor documents\n   * @defaultValue `CONST.DEFAULT_TOKEN`\n   */\n  DEFAULT_ICON: string;\n}\n\n/**\n * The data schema for an Actor document.\n * @see BaseActor\n */\nexport type ActorData = DocumentData<\n  ActorDataSchema,\n  ActorDataProperties,\n  ActorDataSource,\n  ActorDataConstructorData,\n  documents.BaseActor\n> &\n  ActorDataProperties & {\n    _initializeSource(data: ActorDataConstructorData): ActorDataSource;\n\n    _initialize(): void;\n  };\n\nexport declare const ActorData: ActorDataConstructor;\n"
    ]
  