
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/foundry.js/pixi/containers/baseGrid.d.ts",
      "/**\n * The base grid class.\n * This double-dips to implement the \"gridless\" option\n */\ndeclare class BaseGrid extends PIXI.Container {\n  constructor(options: BaseGrid.GridOptions);\n\n  options: BaseGrid.GridOptions;\n\n  /**\n   * Grid Unit Width\n   */\n  w: number;\n\n  /**\n   * Grid Unit Height\n   */\n  h: number;\n\n  /**\n   * Highlight active grid spaces\n   */\n  highlight: PIXI.Container;\n\n  draw(): this;\n\n  /**\n   * Highlight a grid position for a certain coordinates\n   * @param layer   - The highlight layer to use\n   * @param options - (default: `{}`)\n   */\n  highlightGridPosition(layer: GridHighlight, options?: BaseGrid.HighlightGridPositionOptions): void;\n\n  /**\n   * Given a pair of coordinates (x, y) - return the top-left of the grid square which contains that point\n   * @returns An Array [x, y] of the top-left coordinate of the square which contains (x, y)\n   */\n  getTopLeft(x: number, y: number): PointArray;\n\n  /**\n   * Given a pair of coordinates (x, y), return the center of the grid square which contains that point\n   * @param x - The x-coordinate\n   * @param y - The y-coordinate\n   * @returns An array [cx, cy] of the central point of the grid space which contains (x, y)\n   */\n  getCenter(x: number, y: number): PointArray;\n\n  /**\n   * Given a pair of coordinates (x1,y1), return the grid coordinates (x2,y2) which represent the snapped position\n   * Under a \"gridless\" system, every pixel position is a valid snapping position\n   *\n   * @param x        - The exact target location x\n   * @param y        - The exact target location y\n   * @param interval - An interval of grid spaces at which to snap.\n   *                   At interval=1, snapping occurs at pixel intervals defined by the grid size\n   *                   At interval=2, snapping would occur at the center-points of each grid size\n   *                   At interval=null, no snapping occurs\n   *                   (default: `null`)\n   * @returns An object containing the coordinates of the snapped location\n   */\n  getSnappedPosition(x: number, y: number, interval?: number | null): { x: number; y: number };\n\n  /**\n   * Given a pair of pixel coordinates, return the grid position as an Array.\n   * Always round down to the nearest grid position so the pixels are within the grid space (from top-left).\n   * @param x - The x-coordinate pixel position\n   * @param y - The y-coordinate pixel position\n   * @returns An array representing the position in grid units\n   */\n  getGridPositionFromPixels(x: number, y: number): PointArray;\n\n  /**\n   * Given a pair of grid coordinates, return the pixel position as an Array.\n   * Always round up to a whole pixel so the pixel is within the grid space (from top-left).\n   * @param x - The x-coordinate grid position\n   * @param y - The y-coordinate grid position\n   * @returns An array representing the position in pixels\n   */\n  getPixelsFromGridPosition(x: number, y: number): PointArray;\n\n  /**\n   * Shift a pixel position [x,y] by some number of grid units dx and dy\n   * @param x  - The starting x-coordinate in pixels\n   * @param y  - The starting y-coordinate in pixels\n   * @param dx - The number of grid positions to shift horizontally\n   * @param dy - The number of grid positions to shift vertically\n   */\n  shiftPosition(x: number, y: number, dx: number, dy: number): PointArray;\n\n  /**\n   * Measure the distance traversed over an array of measured segments\n   * @param segments - An Array of measured movement segments\n   * @param options  - Additional options which modify the measurement\n   *                   (default: `{}`)\n   * @returns An Array of distance measurements for each segment\n   */\n  measureDistances(segments: GridLayer.Segment[], options?: BaseGrid.MeasureDistancesOptions): number[];\n\n  /**\n   * Get the grid row and column positions which are neighbors of a certain position\n   * @param row - The grid row coordinate against which to test for neighbors\n   * @param col - The grid column coordinate against which to test for neighbors\n   * @returns An array of grid positions which are neighbors of the row and column\n   */\n  getNeighbors(row: number, col: number): PointArray[];\n}\n\ndeclare namespace BaseGrid {\n  interface GridOptions {\n    dimensions: Canvas['dimensions'];\n    color: string;\n    alpha: Scene['data']['gridAlpha'];\n    columns?: boolean;\n    even?: boolean;\n  }\n\n  interface HighlightGridPositionOptions {\n    /**\n     * The x-coordinate of the highlighted position\n     */\n    x?: number;\n\n    /**\n     * The y-coordinate of the highlighted position\n     */\n    y?: number;\n\n    /**\n     * The hex fill color of the highlight\n     * @defaultValue `0x33BBFF`\n     */\n    color?: number;\n\n    /**\n     * The hex border color of the highlight\n     * @defaultValue `null`\n     */\n    border?: number | null;\n\n    /**\n     * The opacity of the highlight\n     * @defaultValue `0.25`\n     */\n    alpha?: number;\n\n    /**\n     * A predefined shape to highlight\n     * @defaultValue `null`\n     */\n    shape?: PIXI.Polygon | null;\n  }\n\n  interface MeasureDistancesOptions {\n    gridSpaces?: boolean;\n  }\n}\n"
    ]
  