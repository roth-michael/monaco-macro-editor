
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/foundry.js/pixi/containers/canvasLayers/effectsLayer.d.ts",
      "/**\n * A CanvasLayer for displaying visual effects like weather, transitions, flashes, or more\n */\ndeclare class EffectsLayer extends CanvasLayer<EffectsLayer.LayerOptions> {\n  /**\n   * The weather overlay container\n   * @defaultValue `undefined`\n   */\n  weather: PIXI.Container | undefined;\n\n  /**\n   * The currently active weather effect\n   * @defaultValue `undefined`\n   */\n  weatherEffect: SpecialEffect | undefined;\n\n  /**\n   * Track any active emitters within this Scene\n   * @defaultValue `[]`\n   */\n  emitters: PIXI.particles.Emitter[];\n\n  /**\n   * An occlusion filter that prevents weather from being displayed in certain regions\n   * @defaultValue `undefined`\n   */\n  weatherOcclusionFilter: AbstractBaseMaskFilter | undefined;\n\n  /**\n   * @remarks This is not overridden in foundry but reflects the real behavior.\n   */\n  static get instance(): Canvas['effects'];\n\n  /**\n   * @defaultValue\n   * ```typescript\n   * foundry.utils.mergeObject(super.layerOptions, {\n   *  name: \"effects\",\n   *  zIndex: 700\n   * })\n   * ```\n   */\n  static get layerOptions(): EffectsLayer.LayerOptions;\n\n  /** @override */\n  tearDown(): Promise<this>;\n\n  /** @override */\n  draw(): Promise<undefined>;\n\n  /**\n   * Draw the weather container.\n   * @returns The weather container, or null if no effect is present\n   */\n  drawWeather(): Exclude<this['weather'], undefined> | null;\n}\n\ndeclare namespace EffectsLayer {\n  interface LayerOptions extends CanvasLayer.LayerOptions {\n    name: 'effects';\n    zIndex: 700;\n  }\n}\n"
    ]
  