
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/foundry.js/applications/sidebarTab.d.ts",
      "/**\n * An abstract pattern followed by the different tabs of the sidebar\n * @typeParam Options - The type of the options object\n */\ndeclare abstract class SidebarTab<\n  Options extends Application.Options = Application.Options\n> extends Application<Options> {\n  constructor(...args: ConstructorParameters<typeof Application>);\n  /**\n   * The base name of this sidebar tab\n   * @defaultValue `''`\n   */\n  tabName: string;\n\n  /**\n   * A reference to the pop-out variant of this SidebarTab, if one exists\n   * @defaultValue `null`\n   */\n  protected _popout: this | null;\n\n  /**\n   * Denote whether or not this is the original version of the sidebar tab, or a pop-out variant\n   * @defaultValue `null`\n   */\n  protected _original: this | null;\n\n  /**\n   * @override\n   * @defaultValue\n   * ```typescript\n   * foundry.utils.mergeObject(super.defaultOptions, {\n   *   popOut: false,\n   *   width: 300,\n   *   height: \"auto\",\n   *   baseApplication: \"SidebarTab\"\n   * });\n   * ```\n   */\n  static get defaultOptions(): Application.Options;\n\n  /**  @override */\n  protected _renderInner(data: object): Promise<JQuery>;\n\n  /** @override */\n  protected _render(force?: boolean, options?: Application.RenderOptions<Options>): Promise<void>;\n\n  /** @override */\n  render(force?: boolean, options?: Application.RenderOptions<Options>): unknown;\n\n  /**\n   * Activate this SidebarTab, switching focus to it\n   */\n  activate(): void;\n\n  /** @override */\n  close(options?: Application.CloseOptions): Promise<void>;\n\n  /**\n   * Create a second instance of this SidebarTab class which represents a singleton popped-out container\n   * @returns The popped out sidebar tab instance\n   */\n  createPopout(): this;\n\n  /**\n   * Render the SidebarTab as a pop-out container\n   */\n  renderPopout(): void;\n\n  /**\n   * Handle lazy loading for sidebar images to only load them once they become observed\n   * @param entries  - The entries which are now observed\n   * @param observer - The intersection observer instance\n   */\n  protected _onLazyLoadImage(entries: IntersectionObserverEntry[], observer: IntersectionObserver): void;\n}\n"
    ]
  