
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/foundry.js/applications/formApplications/lightConfig.d.ts",
      "/**\n * Light Source Configuration Sheet\n * @typeParam P - the type of the options object\n */\ndeclare class LightConfig<P extends FormApplication.Options = FormApplication.Options> extends FormApplication<\n  P,\n  LightConfig.Data,\n  AmbientLight\n> {\n  /**\n   * @param light   - The AmbientLight object for which settings are being configured\n   * @param options - LightConfig ui options (see Application)\n   */\n  constructor(light: AmbientLight, options?: Partial<P>);\n\n  /**\n   * @override\n   * @defaultValue\n   * ```typescript\n   * mergeObject(super.defaultOptions, {\n   *   classes: [\"sheet\", \"light-sheet\"],\n   *   title: \"LIGHT.ConfigTitle\",\n   *   template: \"templates/scene/light-config.html\",\n   *   width: 480\n   * });\n   * ```\n   */\n  static get defaultOptions(): typeof FormApplication['defaultOptions'];\n\n  /**\n   * @param options - (unused)\n   * @override\n   */\n  getData(options?: Partial<P>): LightConfig.Data;\n\n  /** @override */\n  activateListeners(html: JQuery): void;\n\n  /** @override */\n  close(options?: Application.CloseOptions): Promise<void>;\n\n  /**\n   * Preview the change caused by a change on the form by refreshing the display of the light source\n   */\n  protected _onPreviewChange(event: JQuery.ChangeEvent): void;\n\n  /** @override */\n  protected _getSubmitData(\n    updateData?: LightConfig.FormData\n  ): ReturnType<FormApplication['_getSubmitData']> & { tintAlpha: number };\n\n  /**\n   * @param event - (unused)\n   * @override\n   */\n  protected _updateObject(event: Event, formData: LightConfig.FormData): Promise<AmbientLight>;\n\n  /**\n   * Reset the state of the previewed light source object to its original data\n   * @param refresh - (default: `true`)\n   */\n  protected _resetObject(refresh?: boolean): void;\n}\n\ndeclare namespace LightConfig {\n  interface Data {\n    object: foundry.utils.Duplicated<LightConfig['object']['data']>;\n    options: LightConfig['options'];\n    submitText: string;\n    lightTypes: LightTypes;\n    lightAnimations: LightAnimations;\n    colorIntensity: number;\n  }\n\n  interface FormData {\n    angle: AmbientLight.Data['angle'] | null;\n    bright: AmbientLight.Data['bright'] | null;\n    darknessThreshold: AmbientLight.Data['darknessThreshold'];\n    dim: AmbientLight.Data['dim'] | null;\n    'lightAnimation.intensity': AmbientLight.Data['lightAnimation']['intensity'];\n    'lightAnimation.speed': AmbientLight.Data['lightAnimation']['speed'];\n    'lightAnimation.type': AmbientLight.Data['lightAnimation']['type'];\n    rotation: AmbientLight.Data['rotation'];\n    t: AmbientLight.Data['t'];\n    tintAlpha: AmbientLight.Data['tintAlpha'];\n    tintColor: string;\n    x: AmbientLight.Data['x'] | null;\n    y: AmbientLight.Data['y'] | null;\n  }\n\n  type LightAnimations = {\n    [Key in keyof typeof CONFIG['Canvas']['lightAnimations']]: string;\n  } & { '': 'None' };\n\n  type LightTypes = {\n    [Key in keyof typeof foundry.CONST['SOURCE_TYPES'] as typeof foundry.CONST['SOURCE_TYPES'][Key]]: `LIGHT.Type${Titlecase<Key>}`;\n  };\n}\n"
    ]
  