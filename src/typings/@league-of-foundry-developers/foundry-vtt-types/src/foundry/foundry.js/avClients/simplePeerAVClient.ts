
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/foundry.js/avClients/simplePeerAVClient.d.ts",
      "/**\n * An implementation of the AVClient which uses the simple-peer library and the Foundry socket server for signaling.\n * Credit to bekit#4213 for identifying simple-peer as a viable technology and providing a POC implementation.\n */\ndeclare class SimplePeerAVClient extends AVClient {\n  /**\n   * The local Stream which captures input video and audio\n   * @defaultValue `null`\n   */\n  localStream: MediaStream | null;\n\n  /**\n   * A mapping of connected peers\n   */\n  peers: Map<string, SimplePeer.Instance>;\n\n  /**\n   * A mapping of connected remote streams\n   */\n  remoteStreams: Map<string, MediaStream>;\n\n  /**\n   * Has the client been successfully initialized?\n   * @defaultValue `false`\n   * @internal\n   */\n  _initialized: boolean;\n\n  /**\n   * Is outbound broadcast of local audio enabled?\n   * @defaultValue `false`\n   */\n  audioBroadcastEnabled: boolean;\n\n  /** @override */\n  connect(): Promise<boolean>;\n\n  /** @override */\n  disconnect(): Promise<boolean>;\n\n  /** @override */\n  initialize(): Promise<void>;\n\n  /** @override */\n  getConnectedUsers(): string[];\n\n  /** @override */\n  getMediaStreamForUser(userId: string): MediaStream | null | undefined;\n\n  /** @override */\n  isAudioEnabled(): boolean;\n\n  /** @override */\n  isVideoEnabled(): boolean;\n\n  /** @override */\n  toggleAudio(enable: boolean): void;\n\n  /** @override */\n  toggleBroadcast(broadcast: boolean): void;\n\n  /** @override */\n  toggleVideo(enable: boolean): void;\n\n  /** @override */\n  setUserVideo(userId: string, videoElement: HTMLVideoElement): Promise<void>;\n\n  /**\n   * Initialize a local media stream for the current user\n   */\n  initializeLocalStream(): Promise<MediaStream | null>;\n\n  /**\n   * Listen for Audio/Video updates on the av socket to broker connections between peers\n   */\n  activateSocketListeners(): void;\n\n  /**\n   * Initialize a stream connection with a new peer\n   * @param userId - The Foundry user ID for which the peer stream should be established\n   * @returns A Promise which resolves once the peer stream is initialized\n   */\n  initializePeerStream(userId: string): Promise<SimplePeer.Instance>;\n\n  /**\n   * Receive a request to establish a peer signal with some other User id\n   * @param userId - The Foundry user ID who is requesting to establish a connection\n   * @param data   - The connection details provided by SimplePeer\n   */\n  receiveSignal(userId: string, data: SimplePeer.SignalData): void;\n\n  /**\n   * Connect to a peer directly, either as the initiator or as the receiver\n   * @param userId      - The Foundry user ID with whom we are connecting\n   * @param isInitiator - Is the current user initiating the connection, or responding to it?\n   *                      (default: `false`)\n   * @returns The constructed and configured SimplePeer instance\n   */\n  connectPeer(userId: string, isInitiator?: boolean): SimplePeer.Instance;\n\n  /**\n   * Create the SimplePeer instance for the desired peer connection.\n   * Modules may implement more advanced connection strategies by overriding this method.\n   * @param userId      - The Foundry user ID with whom we are connecting\n   * @param isInitiator - Is the current user initiating the connection, or responding to it?\n   * @internal\n   */\n  _createPeerConnection(userId: string, isInitiator: boolean): SimplePeer.Instance;\n\n  /**\n   * Setup the custom TURN relay to be used in subsequent calls if there is one configured.\n   * TURN credentials are mandatory in WebRTC.\n   * @param options - The SimplePeer configuration object.\n   * @internal\n   */\n  _setupCustomTURN(options: SimplePeer.Options): void;\n\n  /**\n   * Disconnect from a peer by stopping current stream tracks and destroying the SimplePeer instance\n   * @param userId - The Foundry user ID from whom we are disconnecting\n   * @returns A Promise which resolves once the disconnection is complete\n   */\n  disconnectPeer(userId: string): Promise<void>;\n\n  /**\n   * Disconnect from all current peer streams\n   * @returns A Promise which resolves once all peers have been disconnected\n   */\n  disconnectAll(): Promise<Array<void>>;\n\n  /** @override */\n  onSettingsChanged(changed: DeepPartial<AVSettings.Settings>): Promise<void>;\n\n  /**\n   * Replace the local stream for each connected peer with a re-generated MediaStream\n   */\n  updateLocalStream(): Promise<void>;\n}\n"
    ]
  