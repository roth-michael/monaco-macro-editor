
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/foundry.js/pixi/containers/placeableObjects/measuredTemplate.d.ts",
      "import { ConfiguredDocumentClass } from '../../../../../types/helperTypes';\nimport { DocumentModificationOptions } from '../../../../common/abstract/document.mjs';\n\ndeclare global {\n  /**\n   * A MeasuredTemplate is an implementation of PlaceableObject which represents an area of the canvas grid which is\n   * covered by some effect.\n   */\n  class MeasuredTemplate extends PlaceableObject<\n    InstanceType<ConfiguredDocumentClass<typeof MeasuredTemplateDocument>>\n  > {\n    constructor(document: InstanceType<ConfiguredDocumentClass<typeof MeasuredTemplateDocument>>);\n\n    controlIcon: ControlIcon | null;\n    template: PIXI.Graphics | null;\n    ruler: PreciseText | null;\n\n    /**\n     * The tiling texture used for this template, if any\n     */\n    texture: PIXI.Texture | null;\n\n    /**\n     * The template shape used for testing point intersection\n     */\n    shape: PIXI.Circle | PIXI.Ellipse | PIXI.Polygon | PIXI.Rectangle | PIXI.RoundedRectangle;\n\n    /**\n     * Internal property used to configure the control border thickness\n     */\n    protected _borderThickness: number;\n\n    /** @override */\n    static embeddedName: 'MeasuredTemplate';\n\n    /**\n     * A convenience accessor for the border color as a numeric hex code\n     */\n    get borderColor(): string | number;\n\n    /**\n     * A convenience accessor for the fill color as a numeric hex code\n     */\n    get fillColor(): string | number;\n\n    /**\n     * A flag for whether the current User has full ownership over the MeasuredTemplate document.\n     */\n    get owner(): boolean;\n\n    /** @override */\n    draw(): Promise<this>;\n\n    /**\n     * Draw the ControlIcon for the MeasuredTemplate\n     */\n    protected _drawControlIcon(): ControlIcon;\n\n    /**\n     * Draw the Text label used for the MeasuredTemplate\n     */\n    protected _drawRulerText(): PreciseText;\n\n    /** @override */\n    refresh(): this;\n\n    /**\n     * Get a Circular area of effect given a radius of effect\n     */\n    protected _getCircleShape(distance: number): PIXI.Circle;\n\n    /**\n     * Get a Conical area of effect given a direction, angle, and distance\n     */\n    protected _getConeShape(direction: number, angle: number, distance: number): PIXI.Polygon;\n\n    /**\n     * Get a Rectangular area of effect given a width and height\n     */\n    protected _getRectShape(direction: number, distance: number): NormalizedRectangle;\n\n    /**\n     * Get a rotated Rectangular area of effect given a width, height, and direction\n     */\n    protected _getRayShape(direction: number, distance: number, width: number): PIXI.Polygon;\n\n    /**\n     * Draw the rotation control handle and assign event listeners\n     */\n    protected _drawRotationHandle(radius: number): void;\n\n    /**\n     * Update the displayed ruler tooltip text\n     */\n    protected _refreshRulerText(): void;\n\n    /**\n     * Highlight the grid squares which should be shown under the area of effect\n     */\n    highlightGrid(): void;\n\n    /** @override */\n    rotate(angle: number, snap: number): Promise<this>;\n\n    /** @override */\n    protected _canControl(user: InstanceType<ConfiguredDocumentClass<typeof User>>, event?: any): boolean;\n\n    /** @override */\n    protected _canConfigure(user: InstanceType<ConfiguredDocumentClass<typeof User>>, event?: any): boolean;\n\n    /** @override */\n    protected _canView(user: InstanceType<ConfiguredDocumentClass<typeof User>>, event?: any): boolean;\n\n    /** @override */\n    protected _onUpdate(\n      data: DeepPartial<InstanceType<ConfiguredDocumentClass<typeof MeasuredTemplateDocument>>['data']['_source']>,\n      options?: DocumentModificationOptions,\n      userId?: string\n    ): void;\n\n    /** @override */\n    protected _onDelete(options: DocumentModificationOptions, userId: string): void;\n  }\n}\n"
    ]
  