
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/common/data/data.mjs/drawingData.d.ts",
      "import DocumentData from '../../abstract/data.mjs';\nimport { BaseUser } from '../../documents.mjs';\nimport { ForeignDocumentField } from '../fields.mjs';\nimport * as fields from '../fields.mjs';\nimport * as documents from '../../documents.mjs';\nimport { ConfiguredDocumentClass, FieldReturnType, PropertiesToSource } from '../../../../types/helperTypes';\n\ninterface DrawingDataSchema extends DocumentSchema {\n  _id: typeof fields.DOCUMENT_ID;\n  author: ForeignDocumentField<{ type: typeof documents.BaseUser; required: true }>;\n  type: DocumentField<foundry.CONST.DrawingType> & {\n    type: typeof String;\n    required: true;\n    default: typeof CONST.DRAWING_TYPES.POLYGON;\n    validate: (t: unknown) => t is foundry.CONST.DrawingType;\n    validationError: 'Invalid {name} {field} which must be a value in CONST.DRAWING_TYPES';\n  };\n  x: typeof fields.REQUIRED_NUMBER;\n  y: typeof fields.REQUIRED_NUMBER;\n  width: typeof fields.REQUIRED_NUMBER;\n  height: typeof fields.REQUIRED_NUMBER;\n  rotation: FieldReturnType<typeof fields.ANGLE_FIELD, { default: 0 }>;\n  z: typeof fields.REQUIRED_NUMBER;\n  points: DocumentField<Array<[x: number, y: number]>> & {\n    type: [typeof Array];\n    required: true;\n    default: [];\n    validate: typeof _validateDrawingPoints;\n    validationError: 'Invalid {name} {field} which must be an array of points [x,y]';\n  };\n  bezierFactor: FieldReturnType<typeof fields.ALPHA_FIELD, { default: 0 }>;\n  fillType: FieldReturnType<\n    typeof fields.REQUIRED_NUMBER,\n    {\n      default: typeof CONST.DRAWING_FILL_TYPES.NONE;\n      validate: (v: unknown) => v is foundry.CONST.DrawingFillType;\n      validationError: 'Invalid {name} {field} which must be a value in CONST.DRAWING_FILL_TYPES';\n    }\n  >;\n  fillColor: typeof fields.COLOR_FIELD;\n  fillAlpha: FieldReturnType<typeof fields.ALPHA_FIELD, { default: 0.5 }>;\n  strokeWidth: FieldReturnType<typeof fields.NONNEGATIVE_INTEGER_FIELD, { default: 8 }>;\n  strokeColor: typeof fields.COLOR_FIELD;\n  strokeAlpha: typeof fields.ALPHA_FIELD;\n  texture: typeof fields.IMAGE_FIELD;\n  text: typeof fields.STRING_FIELD;\n  fontFamily: FieldReturnType<typeof fields.REQUIRED_STRING, { default: 'Signika' }>;\n  fontSize: FieldReturnType<\n    typeof fields.POSITIVE_INTEGER_FIELD,\n    {\n      default: 48;\n      validate: (n: unknown) => boolean;\n      validationError: 'Invalid {name} {field} which must be an integer between 8 and 256';\n    }\n  >;\n  textColor: FieldReturnType<typeof fields.COLOR_FIELD, { default: '#FFFFFF' }>;\n  textAlpha: typeof fields.ALPHA_FIELD;\n  hidden: typeof fields.BOOLEAN_FIELD;\n  locked: typeof fields.BOOLEAN_FIELD;\n  flags: typeof fields.OBJECT_FIELD;\n}\n\ninterface DrawingDataProperties {\n  /**\n   * The _id which uniquely identifies this BaseDrawing embedded document\n   * @defaultValue `null`\n   */\n  _id: string | null;\n\n  /**\n   * The _id of the user who created the drawing\n   * @defaultValue `null`\n   */\n  author: string | null;\n\n  /**\n   * The value in CONST.DRAWING_TYPES which defines the geometry type of this drawing\n   * @defaultValue `CONST.DRAWING_TYPES.POLYGON`\n   */\n  type: foundry.CONST.DrawingType;\n\n  /**\n   * The x-coordinate position of the top-left corner of the drawn shape\n   * @defaultValue `0`\n   */\n  x: number;\n\n  /**\n   * The y-coordinate position of the top-left corner of the drawn shape\n   * @defaultValue `0`\n   */\n  y: number;\n\n  /**\n   * The pixel width of the drawing figure\n   * @defaultValue `0`\n   */\n  width: number;\n\n  /**\n   * The pixel height of the drawing figure\n   * @defaultValue `0`\n   */\n  height: number;\n\n  /**\n   * The angle of rotation for the drawing figure\n   * @defaultValue `0`\n   */\n  rotation: number;\n\n  /**\n   * The z-index of this drawing relative to other siblings\n   * @defaultValue `0`\n   */\n  z: number;\n\n  /**\n   * An array of points [x,y] which define polygon vertices\n   * @defaultValue `[]`\n   */\n  points: Array<[x: number, y: number]>;\n\n  /**\n   * An amount of bezier smoothing applied, between 0 and 1\n   * @defaultValue `0`\n   */\n  bezierFactor: number;\n\n  /**\n   * The fill type of the drawing shape, a value from CONST.DRAWING_FILL_TYPES\n   * @defaultValue `CONST.DRAWING_FILL_TYPES.NONE`\n   */\n  fillType: foundry.CONST.DrawingFillType;\n\n  /**\n   * An optional color string with which to fill the drawing geometry\n   */\n  fillColor?: string | null;\n\n  /**\n   * The opacity of the fill applied to the drawing geometry\n   * @defaultValue `0.5`\n   */\n  fillAlpha: number;\n\n  /**\n   * The width in pixels of the boundary lines of the drawing geometry\n   * @defaultValue `8`\n   */\n  strokeWidth: number;\n\n  /**\n   * The color of the boundary lines of the drawing geometry\n   */\n  strokeColor?: string | null;\n\n  /**\n   * The opacity of the boundary lines of the drawing geometry\n   * @defaultValue `1`\n   */\n  strokeAlpha: number;\n\n  /**\n   * The path to a tiling image texture used to fill the drawing geometry\n   */\n  texture?: string | null;\n\n  /**\n   * Optional text which is displayed overtop of the drawing\n   */\n  text?: string;\n\n  /**\n   * The font family used to display text within this drawing\n   * @defaultValue `'Signika'`\n   */\n  fontFamily: string;\n\n  /**\n   * The font size used to display text within this drawing\n   * @defaultValue `48`\n   */\n  fontSize: number;\n\n  /**\n   * The color of text displayed within this drawing\n   * @defaultValue `'#FFFFFF'`\n   */\n  textColor: string | null;\n\n  /**\n   * The opacity of text displayed within this drawing\n   * @defaultValue `1`\n   */\n  textAlpha: number;\n\n  /**\n   * Is the drawing currently hidden?\n   * @defaultValue `false`\n   */\n  hidden: boolean;\n\n  /**\n   * Is the drawing currently locked?\n   * @defaultValue `false`\n   */\n  locked: boolean;\n\n  /**\n   * An object of optional key/value flags\n   * @defaultValue `{}`\n   */\n  flags: Record<string, unknown>;\n}\n\ninterface DrawingDataConstructorData {\n  /**\n   * The _id which uniquely identifies this BaseDrawing embedded document\n   * @defaultValue `null`\n   */\n  _id?: string | null;\n\n  /**\n   * The _id of the user who created the drawing\n   * @defaultValue `null`\n   */\n  author?: InstanceType<ConfiguredDocumentClass<typeof BaseUser>> | string | null;\n\n  /**\n   * The value in CONST.DRAWING_TYPES which defines the geometry type of this drawing\n   * @defaultValue `CONST.DRAWING_TYPES.POLYGON`\n   */\n  type?: foundry.CONST.DrawingType | null;\n\n  /**\n   * The x-coordinate position of the top-left corner of the drawn shape\n   * @defaultValue `0`\n   */\n  x?: number | null;\n\n  /**\n   * The y-coordinate position of the top-left corner of the drawn shape\n   * @defaultValue `0`\n   */\n  y?: number | null;\n\n  /**\n   * The pixel width of the drawing figure\n   * @defaultValue `0`\n   */\n  width?: number | null;\n\n  /**\n   * The pixel height of the drawing figure\n   * @defaultValue `0`\n   */\n  height?: number | null;\n\n  /**\n   * The angle of rotation for the drawing figure\n   * @defaultValue `0`\n   */\n  rotation?: number | null;\n\n  /**\n   * The z-index of this drawing relative to other siblings\n   * @defaultValue `0`\n   */\n  z?: number | null;\n\n  /**\n   * An array of points [x,y] which define polygon vertices\n   * @defaultValue `[]`\n   */\n  points?: Array<[x: number, y: number]> | null;\n\n  /**\n   * An amount of bezier smoothing applied, between 0 and 1\n   * @defaultValue `0`\n   */\n  bezierFactor?: number | null;\n\n  /**\n   * The fill type of the drawing shape, a value from CONST.DRAWING_FILL_TYPES\n   * @defaultValue `CONST.DRAWING_FILL_TYPES.NONE`\n   */\n  fillType?: foundry.CONST.DrawingFillType | null;\n\n  /**\n   * An optional color string with which to fill the drawing geometry\n   */\n  fillColor?: string | null;\n\n  /**\n   * The opacity of the fill applied to the drawing geometry\n   * @defaultValue `0.5`\n   */\n  fillAlpha?: number | null;\n\n  /**\n   * The width in pixels of the boundary lines of the drawing geometry\n   * @defaultValue `8`\n   */\n  strokeWidth?: number | null;\n\n  /**\n   * The color of the boundary lines of the drawing geometry\n   */\n  strokeColor?: string | null;\n\n  /**\n   * The opacity of the boundary lines of the drawing geometry\n   * @defaultValue `1`\n   */\n  strokeAlpha?: number | null;\n\n  /**\n   * The path to a tiling image texture used to fill the drawing geometry\n   */\n  texture?: string | null;\n\n  /**\n   * Optional text which is displayed overtop of the drawing\n   */\n  text?: string | null;\n\n  /**\n   * The font family used to display text within this drawing\n   * @defaultValue `'Signika'`\n   */\n  fontFamily?: string | null;\n\n  /**\n   * The font size used to display text within this drawing\n   * @defaultValue `48`\n   */\n  fontSize?: number | null;\n\n  /**\n   * The color of text displayed within this drawing\n   * @defaultValue `'#FFFFFF'`\n   */\n  textColor?: string | null;\n\n  /**\n   * The opacity of text displayed within this drawing\n   * @defaultValue `1`\n   */\n  textAlpha?: number | null;\n\n  /**\n   * Is the drawing currently hidden?\n   * @defaultValue `false`\n   */\n  hidden?: boolean | null;\n\n  /**\n   * Is the drawing currently locked?\n   * @defaultValue `false`\n   */\n  locked?: boolean | null;\n\n  /**\n   * An object of optional key/value flags\n   * @defaultValue `{}`\n   */\n  flags?: Record<string, unknown> | null;\n}\n\n/**\n * The data schema for a Drawing embedded document.\n * @see BaseDrawing\n *\n * @param data     - Initial data used to construct the data object\n * @param document - The embedded document to which this data object belongs\n */\nexport declare class DrawingData extends DocumentData<\n  DrawingDataSchema,\n  DrawingDataProperties,\n  PropertiesToSource<DrawingDataProperties>,\n  DrawingDataConstructorData,\n  documents.BaseFolder\n> {\n  static defineSchema(): DrawingDataSchema;\n\n  /** @override */\n  protected _initialize(): void;\n\n  /** @override */\n  protected _validateDocument(): void;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport declare interface DrawingData extends DrawingDataProperties {}\n\n/**\n * Validate the array of points which comprises a polygon drawing\n * @param points - The candidate points\n * @returns Is the array valid?\n */\ndeclare function _validateDrawingPoints(points: number[][]): boolean;\n"
    ]
  