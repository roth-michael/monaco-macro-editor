
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/foundry.js/applications/formApplications/documentSheets/permissionControl.d.ts",
      "/**\n * A generic application for configuring permissions for various Entity types\n * @typeParam P - the type of the options object\n * @typeParam E - the type of the entity\n */\ndeclare class PermissionControl<\n  P extends DocumentSheet.Options = DocumentSheet.Options,\n  E extends foundry.abstract.Document<any, any> = foundry.abstract.Document<any, any>\n> extends DocumentSheet<P, PermissionControl.Data<E>, E> {\n  /**\n   * @param entity  - The Entity instance for which permissions are being configured.\n   * @param options - Application options.\n   */\n  constructor(entity: E, options?: Partial<P>);\n\n  /**\n   * @override\n   * @defaultValue\n   * ```typescript\n   * mergeObject(super.defaultOptions, {\n   *   id: \"permission\",\n   *   template: \"templates/apps/permission.html\",\n   *   width: 400\n   * });\n   * ```\n   */\n  static get defaultOptions(): typeof DocumentSheet['defaultOptions'];\n\n  /** @override */\n  get title(): string;\n\n  /**\n   * @param options - (unused)\n   * @override\n   */\n  getData(options?: Partial<P>): PermissionControl.Data<E>;\n\n  /** @override */\n  protected _updateObject(event: Event, formData: PermissionControl.FormData): Promise<E>;\n}\n\ndeclare namespace PermissionControl {\n  interface Data<E extends foundry.abstract.Document<any, any>> extends DocumentSheet.Data {\n    entity: E;\n    currentDefault: number | '-1';\n    instructions: string;\n    defaultLevels: E extends Folder ? Data.FolderDefaultLevels : Data.EntityDefaultLevels;\n    playerLevels: E extends Folder ? Data.FolderPlayerLevels : Data.EntityPlayerLevels;\n    isFolder: E extends Folder ? true : false;\n    users: { user: User; level: number | '-1' }[];\n  }\n\n  namespace Data {\n    type EntityDefaultLevels = Omit<EntityPlayerLevels, '-1'>;\n\n    type EntityPlayerLevels = Record<foundry.CONST.EntityPermission, string> & { '-1': string };\n\n    type FolderDefaultLevels = Omit<FolderPlayerLevels, '-2'>;\n\n    type FolderPlayerLevels = Record<foundry.CONST.EntityPermission, string> & { '-2': string; '-1': string };\n  }\n\n  interface FormData {\n    [userId: string]: FormData.InputPermissionLevel;\n    default: FormData.InputPermissionLevel;\n  }\n\n  namespace FormData {\n    // TODO: find a way to get this dynamically from ENTITY_PERMISSIONS\n    type InputPermissionLevel = '-1' | '0' | '1' | '2' | '3';\n  }\n}\n"
    ]
  