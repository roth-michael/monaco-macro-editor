
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/common/data/data.mjs/wallData.d.ts",
      "import { ConfiguredFlags, FieldReturnType, PropertiesToSource } from '../../../../types/helperTypes';\nimport DocumentData from '../../abstract/data.mjs';\nimport * as documents from '../../documents.mjs';\nimport * as fields from '../fields.mjs';\n\ninterface WallDataSchema extends DocumentSchema {\n  _id: typeof fields.DOCUMENT_ID;\n  c: DocumentField<[x0: number, y0: number, x1: number, y1: number]> & {\n    type: [typeof Number];\n    required: true;\n    validate: (c: unknown) => c is [x0: number, y0: number, x1: number, y1: number];\n    validationError: 'Invalid {name} coordinates provided which must be a length-4 array of finite numbers';\n  };\n  move: FieldReturnType<\n    typeof fields.REQUIRED_NUMBER,\n    {\n      default: typeof CONST.WALL_MOVEMENT_TYPES.NORMAL;\n      validate: (v: unknown) => v is foundry.CONST.WallMovementType;\n      validationError: 'Invalid {name} {field} which must be a value in CONST.WALL_MOVEMENT_TYPES';\n    }\n  >;\n  sense: FieldReturnType<\n    typeof fields.REQUIRED_NUMBER,\n    {\n      default: typeof CONST.WALL_SENSE_TYPES.NORMAL;\n      validate: (v: unknown) => v is foundry.CONST.WallSenseType;\n      validationError: 'Invalid {name} {field} which must be a value in CONST.WALL_SENSE_TYPES';\n    }\n  >;\n  sound: FieldReturnType<\n    typeof fields.REQUIRED_NUMBER,\n    {\n      default: typeof CONST.WALL_SENSE_TYPES.NORMAL;\n      validate: (v: unknown) => v is foundry.CONST.WallSenseType;\n      validationError: 'Invalid {name} {field} which must be a value in CONST.WALL_SENSE_TYPES';\n    }\n  >;\n  dir: FieldReturnType<\n    typeof fields.REQUIRED_NUMBER,\n    {\n      default: typeof CONST.WALL_DIRECTIONS.BOTH;\n      validate: (v: unknown) => v is foundry.CONST.WallDirection;\n      validationError: 'Invalid {name} {field} which must be a value in CONST.WALL_DIRECTIONS';\n    }\n  >;\n  door: FieldReturnType<\n    typeof fields.REQUIRED_NUMBER,\n    {\n      default: typeof CONST.WALL_DOOR_TYPES.NONE;\n      validate: (v: unknown) => v is foundry.CONST.WallDoorType;\n      validationError: 'Invalid {name} {field} which must be a value in CONST.WALL_DOOR_TYPES';\n    }\n  >;\n  ds: FieldReturnType<\n    typeof fields.REQUIRED_NUMBER,\n    {\n      default: typeof CONST.WALL_DOOR_STATES.CLOSED;\n      validate: (v: unknown) => v is foundry.CONST.WallDoorState;\n      validationError: 'Invalid {name} {field} which must be a value in CONST.WALL_DOOR_STATES';\n    }\n  >;\n  flags: typeof fields.OBJECT_FIELD;\n}\n\ninterface WallDataProperties {\n  /**\n   * The _id which uniquely identifies the embedded Wall document\n   */\n  _id: string | null;\n\n  /**\n   * The wall coordinates, a length-4 array of finite numbers [x0,y0,x1,y1]\n   */\n  c: [x0: number, y0: number, x1: number, y1: number];\n\n  /**\n   * The movement restriction type of this wall\n   * @defaultValue `CONST.WALL_MOVEMENT_TYPES.NORMAL`\n   */\n  move: foundry.CONST.WallMovementType;\n\n  /**\n   * The sensory restriction type of this wall\n   * @defaultValue `CONST.WALL_SENSE_TYPES.NORMAL`\n   */\n  sense: foundry.CONST.WallSenseType;\n\n  /**\n   * @defaultValue `CONST.WALL_SENSE_TYPES.NORMAL`\n   */\n  sound: foundry.CONST.WallSenseType;\n\n  /**\n   * The direction of effect imposed by this wall\n   * @defaultValue `CONST.WALL_DIRECTIONS.BOTH`\n   */\n  dir: foundry.CONST.WallDirection;\n\n  /**\n   * The type of door which this wall contains, if any\n   * @defaultValue `CONST.WALL_DOOR_TYPES.NONE`\n   */\n  door: foundry.CONST.WallDoorType;\n\n  /**\n   * The state of the door this wall contains, if any\n   * @defaultValue `CONST.WALL_DOOR_STATES.CLOSED`\n   */\n  ds: foundry.CONST.WallDoorState;\n\n  /**\n   * An object of optional key/value flags\n   * @defaultValue `{}`\n   */\n  flags: ConfiguredFlags<'Wall'>;\n}\n\ninterface WallDataConstructorData {\n  /**\n   * The _id which uniquely identifies the embedded Wall document\n   */\n  _id?: string | null;\n\n  /**\n   * The wall coordinates, a length-4 array of finite numbers [x0,y0,x1,y1]\n   */\n  c: [x0: number, y0: number, x1: number, y1: number];\n\n  /**\n   * The movement restriction type of this wall\n   * @defaultValue `CONST.WALL_MOVEMENT_TYPES.NORMAL`\n   */\n  move?: foundry.CONST.WallMovementType | null;\n\n  /**\n   * The sensory restriction type of this wall\n   * @defaultValue `CONST.WALL_SENSE_TYPES.NORMAL`\n   */\n  sense?: foundry.CONST.WallSenseType | null;\n\n  /**\n   * @defaultValue `CONST.WALL_SENSE_TYPES.NORMAL`\n   */\n  sound?: foundry.CONST.WallSenseType | null;\n\n  /**\n   * The direction of effect imposed by this wall\n   * @defaultValue `CONST.WALL_DIRECTIONS.BOTH`\n   */\n  dir?: foundry.CONST.WallDirection | null;\n\n  /**\n   * The type of door which this wall contains, if any\n   * @defaultValue `CONST.WALL_DOOR_TYPES.NONE`\n   */\n  door?: foundry.CONST.WallDoorType | null;\n\n  /**\n   * The state of the door this wall contains, if any\n   * @defaultValue `CONST.WALL_DOOR_STATES.CLOSED`\n   */\n  ds?: foundry.CONST.WallDoorState | null;\n\n  /**\n   * An object of optional key/value flags\n   * @defaultValue `{}`\n   */\n  flags?: ConfiguredFlags<'Wall'> | null;\n}\n\n/**\n * The data schema for a Wall document.\n * @see BaseWall\n */\nexport declare class WallData extends DocumentData<\n  WallDataSchema,\n  WallDataProperties,\n  PropertiesToSource<WallDataProperties>,\n  WallDataConstructorData,\n  documents.BaseWall\n> {\n  /**\n   * The data schema for a WallData object\n   */\n  static defineSchema(): WallDataSchema;\n\n  /**\n   * @remarks This override does not exist in foundry but is added here to prepend runtime errors.\n   */\n  constructor(data: WallDataConstructorData, document?: documents.BaseWall | null);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport declare interface WallData extends WallDataProperties {}\n"
    ]
  