
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/foundry.js/applications/formApplications/gridConfig.d.ts",
      "import type { ConfiguredDocumentClass } from '../../../../types/helperTypes';\n\ndeclare global {\n  /**\n   * A tool for fine tuning the grid in a Scene\n   * @typeParam Options - the type of the options object\n   */\n  class GridConfig<Options extends FormApplication.Options = FormApplication.Options> extends FormApplication<\n    Options,\n    GridConfig.Data,\n    InstanceType<ConfiguredDocumentClass<typeof Scene>>\n  > {\n    constructor(\n      scene: InstanceType<ConfiguredDocumentClass<typeof Scene>>,\n      sheet: GridConfig['sheet'],\n      options?: Partial<Options>\n    );\n\n    /**\n     * Track the Scene Configuration sheet reference\n     */\n    sheet: SceneConfig;\n\n    /**\n     * The counter-factual dimensions being evaluated\n     * @defaultValue `{}`\n     * @internal\n     */\n    protected _dimensions: Canvas.Dimensions | {};\n\n    /**\n     * A reference to the bound key handler function so it can be removed\n     * @defaultValue `null`\n     * @internal\n     */\n    protected _keyHandler: ((event: KeyboardEvent) => void) | null;\n\n    /**\n     * A reference to the bound mousewheel handler function so it can be removed\n     * @defaultValue `null`\n     * @internal\n     */\n    protected _wheelHandler: ((event: WheelEvent) => void) | null;\n\n    /**\n     * @override\n     * @defaultValue\n     * ```typescript\n     * foundry.utils.mergeObject(super.defaultOptions, {\n     *   id: \"grid-config\",\n     *   template: \"templates/scene/grid-config.html\",\n     *   title: game.i18n.localize(\"SCENES.GridConfigTool\"),\n     *   width: 480,\n     *   height: \"auto\",\n     *   closeOnSubmit: true,\n     *   submitOnChange: true\n     * })\n     * ```\n     */\n    static get defaultOptions(): typeof FormApplication['defaultOptions'];\n\n    /** @override */\n    getData(options?: Partial<Options>): GridConfig.Data;\n\n    /**\n     * @override\n     * @internal\n     */\n    protected _render(force?: boolean, options?: Application.RenderOptions<Options>): Promise<void>;\n\n    /** @override */\n    activateListeners(html: JQuery): void;\n\n    /** @override */\n    close(options?: FormApplication.CloseOptions): ReturnType<FormApplication['close']>;\n\n    /**\n     * Handle resetting the form and re-drawing back to the original dimensions\n     * @param event - The original keydown event\n     * @internal\n     */\n    protected _onKeyDown(event: KeyboardEvent): void;\n\n    /**\n     * Handle resetting the form and re-drawing back to the original dimensions\n     * @param event - The original wheel event\n     * @internal\n     */\n    protected _onWheel(event: WheelEvent): void;\n\n    /**\n     * Handle resetting the form and re-drawing back to the original dimensions\n     * @param event - The original click event\n     * @internal\n     */\n    protected _onReset(event: JQuery.ClickEvent): void;\n\n    /**\n     * Scale the background size relative to the grid size\n     * @param delta - The directional change in background size\n     * @internal\n     */\n    protected _scaleBackgroundSize(delta: number): void;\n\n    /**\n     * Scale the grid size relative to the background image.\n     * When scaling the grid size in this way, constrain the allowed values between 50px and 300px.\n     * @param delta - The grid size in pixels\n     * @internal\n     */\n    protected _scaleGridSize(delta: number): void;\n\n    /**\n     * Shift the background image relative to the grid layer\n     * @param deltaX - The number of pixels to shift in the x-direction\n     *                 (default: `0`)\n     * @param deltaY - The number of pixels to shift in the y-direction\n     *                 (default: `0`)\n     * @internal\n     */\n    protected _shiftBackground({\n      deltaX,\n      deltaY\n    }?: {\n      deltaX?: number;\n      deltaY?: number;\n    }): ReturnType<GridConfig['_refresh']>;\n\n    /**\n     * Temporarily refresh the display of the BackgroundLayer and GridLayer for the new pending dimensions\n     * @param background - Refresh the background display?\n     *                     (default: `false`)\n     * @param grid       - Refresh the grid display?\n     *                     (default: `false`)\n     * @internal\n     */\n    protected _refresh({ background, grid }?: { background?: boolean; grid?: boolean }): void;\n\n    /**\n     * @override\n     */\n    protected _onChangeInput(event: JQuery.ChangeEvent): void;\n\n    /**\n     * @param event - (unused)\n     * @override\n     */\n    protected _updateObject(event: Event, formData: GridConfig.FormData): ReturnType<Scene['update']>;\n  }\n\n  namespace GridConfig {\n    interface Data {\n      gridTypes: ReturnType<typeof SceneConfig['_getGridTypes']>;\n      scale: number;\n      scene: foundry.data.SceneData;\n    }\n\n    type FormData = {\n      gridType: foundry.CONST.GridType;\n      grid: number | null;\n      scale: number | null;\n      shiftX: number | null;\n      shiftY: number | null;\n    };\n  }\n}\n"
    ]
  