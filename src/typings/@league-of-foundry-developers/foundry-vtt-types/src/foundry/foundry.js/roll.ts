
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/foundry.js/roll.d.ts",
      "import { ConfiguredDocumentClass } from '../../types/helperTypes';\n\ndeclare global {\n  /**\n   * An interface and API for constructing and evaluating dice rolls.\n   * The basic structure for a dice roll is a string formula and an object of data against which to parse it.\n   *\n   * @typeParam D - the type of data object against which to parse attributes within the formula\n   *\n   * @example\n   * ```typescript\n   * // Attack with advantage!\n   * let r = new Roll(\"2d20kh + @prof + @strMod\", {prof: 2, strMod: 4});\n   *\n   * // The parsed terms of the roll formula\n   * console.log(r.terms);    // [Die, OperatorTerm, NumericTerm, OperatorTerm, NumericTerm]\n   *\n   * // Execute the roll\n   * r.evaluate();\n   *\n   * // The resulting equation after it was rolled\n   * console.log(r.result);   // 16 + 2 + 4\n   *\n   * // The total resulting from the roll\n   * console.log(r.total);    // 22\n   * ```\n   */\n  class Roll<D extends object = {}> {\n    /**\n     * @param formula - The string formula to parse\n     * @param data    - The data object against which to parse attributes within the formula\n     *                  (default: `{}`)\n     * @param options - (default: `{}`)\n     */\n    constructor(formula: string, data?: D, options?: Roll['options']);\n\n    /**\n     * The original provided data object which substitutes into attributes of the roll formula\n     */\n    data: D;\n\n    /**\n     * Options which modify or describe the Roll\n     */\n    options: Partial<Options>;\n\n    /**\n     * The identified terms of the Roll\n     */\n    terms: RollTerm[];\n\n    /**\n     * An array of inner DiceTerms which were evaluated as part of the Roll evaluation\n     * @defaultValue `[]`\n     */\n    protected _dice: DiceTerm[];\n\n    /**\n     * Store the original cleaned formula for the Roll, prior to any internal evaluation or simplification\n     */\n    protected _formula: string;\n\n    /**\n     * Track whether this Roll instance has been evaluated or not. Once evaluated the Roll is immutable.\n     * @defaultValue `false`\n     */\n    protected _evaluated: boolean;\n\n    /**\n     * Cache the numeric total generated through evaluation of the Roll.\n     * @defaultValue `undefined`\n     */\n    protected _total: number | undefined;\n\n    /**\n     * A Proxy environment for safely evaluating a string using only available Math functions\n     */\n    static MATH_PROXY: MathProxy;\n\n    /**\n     * The HTML template path used to render a complete Roll object to the chat log\n     * @defaultValue `'templates/dice/roll.html'`\n     */\n    static CHAT_TEMPLATE: string;\n\n    /**\n     * The HTML template used to render an expanded Roll tooltip to the chat log\n     * @defaultValue `'templates/dice/tooltip.html'`\n     */\n    static TOOLTIP_TEMPLATE: string;\n\n    /**\n     * Prepare the data structure used for the Roll.\n     * This is factored out to allow for custom Roll classes to do special data preparation using provided input.\n     * @param data - Provided roll data\n     * @returns The prepared data object\n     */\n    protected _prepareData(data: D): D;\n\n    /**\n     * Return an Array of the individual DiceTerm instances contained within this Roll.\n     */\n    get dice(): DiceTerm[];\n\n    /**\n     * Return a standardized representation for the displayed formula associated with this Roll.\n     */\n    get formula(): string;\n\n    /**\n     * The resulting arithmetic expression after rolls have been evaluated\n     */\n    get result(): string;\n\n    /**\n     * Return the total result of the Roll expression if it has been evaluated.\n     */\n    get total(): number | undefined;\n\n    /**\n     * Alter the Roll expression by adding or multiplying the number of dice which are rolled\n     * @param multiply        - A factor to multiply. Dice are multiplied before any additions.\n     * @param add             - A number of dice to add. Dice are added after multiplication.\n     * @param multiplyNumeric - Apply multiplication factor to numeric scalar terms\n     *                          (default: `false`)\n     * @returns The altered Roll expression\n     */\n    alter(multiply: number, add: number, { multiplyNumeric }?: { multiplyNumeric: boolean }): this;\n\n    /**\n     * Clone the Roll instance, returning a new Roll instance that has not yet been evaluated.\n     */\n    clone(): this;\n\n    /**\n     * Execute the Roll, replacing dice and evaluating the total result\n     * @param options - Options which inform how the Roll is evaluated\n     *                  (default: `{}`)\n     * @returns The evaluated Roll instance\n     *\n     * @example\n     * ```typescript\n     * let r = new Roll(\"2d6 + 4 + 1d4\");\n     * r.evaluate();\n     * console.log(r.result); // 5 + 4 + 2\n     * console.log(r.total);  // 11\n     * ```\n     */\n    evaluate(options?: Partial<Options & { async: false }>): this;\n    evaluate(options: Partial<Options> & { async: true }): Promise<this>;\n    evaluate(options?: Partial<Options>): this | Promise<this>;\n\n    /**\n     * Evaluate the roll asynchronously.\n     * A temporary helper method used to migrate behavior from 0.7.x (sync by default) to 0.9.x (async by default).\n     */\n    protected _evaluate(options?: Partial<Omit<Options, 'async'>>): Promise<this>;\n\n    /**\n     * Evaluate the roll synchronously.\n     * A temporary helper method used to migrate behavior from 0.7.x (sync by default) to 0.9.x (async by default).\n     */\n    protected _evaluateSync(options?: Partial<Omit<Options, 'async'>>): this;\n\n    /**\n     * Safely evaluate the final total result for the Roll using its component terms.\n     * @returns The evaluated total\n     */\n    protected _evaluateTotal(): number;\n\n    /**\n     * Alias for evaluate.\n     * @see Roll#evaluate\n     */\n    roll(options?: Partial<Options & { async: false }>): this;\n    roll(options: Partial<Options> & { async: true }): Promise<this>;\n    roll(options?: Partial<Options>): this | Promise<this>;\n\n    /**\n     * Create a new Roll object using the original provided formula and data.\n     * Each roll is immutable, so this method returns a new Roll instance using the same data.\n     * @param options - Evaluation options passed to Roll#evaluate\n     * @returns A new Roll object, rolled using the same formula and data\n     */\n    reroll(options?: Partial<Options & { async: false }>): this;\n    reroll(options: Partial<Options> & { async: true }): Promise<this>;\n    reroll(options?: Partial<Options>): this | Promise<this>;\n\n    /**\n     * A factory method which constructs a Roll instance using the default configured Roll class.\n     * @typeParam D - the type of data object against which to parse attributes within the formula\n     * @param formula - The formula used to create the Roll instance\n     * @param data    - The data object which provides component data for the formula\n     * @param options - Additional options which modify or describe this Roll\n     * @returns The constructed Roll instance\n     */\n    static create<D extends Record<string, unknown> = {}>(\n      formula: string,\n      data?: D,\n      options?: Partial<Options>\n    ): typeof CONFIG.Dice.rolls extends [infer T] ? T : Roll<D>;\n\n    /**\n     * Transform an array of RollTerm objects into a cleaned string formula representation.\n     * @param terms - An array of terms to represent as a formula\n     * @returns The string representation of the formula\n     */\n    static getFormula(terms: RollTerm[]): string;\n\n    /**\n     * A sandbox-safe evaluation function to execute user-input code with access to scoped Math methods.\n     * @param expression - The input string expression\n     * @returns The numeric evaluated result\n     */\n    static safeEval(expression: string): number;\n\n    /**\n     * After parenthetical and arithmetic terms have been resolved, we need to simplify the remaining expression.\n     * Any remaining string terms need to be combined with adjacent non-operators in order to construct parsable terms.\n     * @param terms - An array of terms which is eligible for simplification\n     * @returns An array of simplified terms\n     */\n    static simplifyTerms(terms: RollTerm[]): RollTerm[];\n\n    /**\n     * Simulate a roll and evaluate the distribution of returned results\n     * @param formula - The Roll expression to simulate\n     * @param n       - The number of simulations\n     *                  (default: `10000`)\n     * @returns The rolled totals\n     */\n    static simulate(formula: string, n?: number): number[];\n\n    /**\n     * Parse a formula by following an order of operations:\n     *\n     * Step 1: Replace formula data\n     * Step 2: Split outer-most parenthetical groups\n     * Step 3: Further split outer-most dice pool groups\n     * Step 4: Further split string terms on arithmetic operators\n     * Step 5: Classify all remaining strings\n     *\n     * @param formula - The original string expression to parse\n     * @param data    - A data object used to substitute for attributes in the formula\n     * @returns A parsed array of RollTerm instances\n     */\n    static parse(formula: string, data: object): RollTerm[];\n\n    /**\n     * Replace referenced data attributes in the roll formula with values from the provided data.\n     * Data references in the formula use the \\@attr syntax and would reference the corresponding attr key.\n     *\n     * @param formula - The original formula within which to replace\n     * @param data    - The data object which provides replacements\n     * @param missing - The value that should be assigned to any unmatched keys.\n     *                  If null, the unmatched key is left as-is.\n     * @param warn    - Display a warning notification when encountering an un-matched key.\n     *                  (default: `false`)\n     */\n    static replaceFormulaData<D>(\n      formula: string,\n      data: D,\n      {\n        missing,\n        warn\n      }?: {\n        missing?: string;\n        warn?: boolean;\n      }\n    ): string;\n\n    /**\n     * Validate that a provided roll formula can represent a valid\n     * @param formula - A candidate formula to validate\n     * @returns Is the provided input a valid dice formula?\n     */\n    static validate(formula: string): boolean;\n\n    /**\n     * Split a formula by identifying its outer-most parenthetical and math terms\n     * @param _formula - The raw formula to split\n     * @returns An array of terms, split on parenthetical terms\n     */\n    protected static _splitParentheses(_formula: string): string[];\n\n    /**\n     * Handle closing of a parenthetical term to create a MathTerm expression with a function and arguments\n     */\n    protected static _splitMathArgs(expression: string): MathTerm[];\n\n    /**\n     * Split a formula by identifying its outer-most dice pool terms\n     * @param _formula - The raw formula to split\n     * @returns An array of terms, split on parenthetical terms\n     */\n    protected _splitPools(_formula: string): string[];\n\n    /**\n     * Split a formula by identifying its outer-most groups using a certain group symbol like parentheses or brackets.\n     * @param _formula - The raw formula to split\n     * @param options  - Options that configure how groups are split\n     *                   (default: `{}`)\n     * @returns An array of terms, split on dice pool terms\n     */\n    protected _splitGroup(_formula: string, options?: Partial<SplitGroupOptions>): string[];\n\n    /**\n     * Split a formula by identifying arithmetic terms\n     * @param _formula - The raw formula to split\n     * @returns An array of terms, split on arithmetic operators\n     */\n    protected _splitOperators(_formula: string): (string | OperatorTerm)[];\n\n    /**\n     * Temporarily remove flavor text from a string formula allowing it to be accurately parsed.\n     * @param formula - The formula to extract\n     * @returns The cleaned formula and extracted flavor mapping\n     */\n    protected static _extractFlavors(formula: string): { formula: string; flavors: Flavor };\n\n    /**\n     * Restore flavor text to a string term\n     * @param term    - The string term possibly containing flavor symbols\n     * @param flavors - The extracted flavors object\n     * @returns The restored term containing flavor text\n     */\n    protected static _restoreFlavor(term: string, flavors: Flavor): string;\n\n    /**\n     * Classify a remaining string term into a recognized RollTerm class\n     * @param term         - A remaining un-classified string\n     * @param options      - Options which customize classification\n     *                       (default: `{}`)\n     * @param intermediate - Allow intermediate terms\n     *                       (default: `true`)\n     * @param prior        - The prior classified term\n     * @param next         - The next term to classify\n     * @returns A classified RollTerm instance\n     */\n    protected static _classifyStringTerm(\n      term: string,\n      { intermediate, prior, next }?: { intermediate?: boolean; prior?: RollTerm | string; next?: RollTerm | string }\n    ): RollTerm;\n\n    /**\n     * Render the tooltip HTML for a Roll instance\n     * @returns The rendered HTML tooltip as a string\n     */\n    getTooltip(): Promise<string>;\n\n    /**\n     * Render a Roll instance to HTML\n     * @param chatOptions - An object configuring the behavior of the resulting chat message.\n     *                      (default: `{}`)\n     * @returns The rendered HTML template as a string\n     */\n    render(chatOptions?: ChatOptions): Promise<string>;\n\n    /**\n     * Transform a Roll instance into a ChatMessage, displaying the roll result.\n     * This function can either create the ChatMessage directly, or return the data object that will be used to create.\n     *\n     * @param messageData - The data object to use when creating the message\n     *                      (default: `{}`)\n     * @param options     - Additional options which modify the created message.\n     *                      (default: `{}`)\n     * @param rollMode    - The template roll mode to use for the message from CONFIG.Dice.rollModes\n     * @param create      - Whether to automatically create the chat message, or only return the\n     *                      prepared chatData object.\n     *                      (default: `true`)\n     * @returns A promise which resolves to the created ChatMessage entity, if create is true\n     *          or the Object of prepared chatData otherwise.\n     */\n    toMessage<T extends DeepPartial<ConstructorParameters<ConfiguredDocumentClass<typeof ChatMessage>>[0]> = {}>(\n      messageData?: T,\n      { rollMode, create }?: { rollMode?: foundry.CONST.DiceRollMode; create?: true }\n    ): Promise<InstanceType<ConfiguredDocumentClass<typeof ChatMessage>> | undefined>;\n    toMessage<T extends DeepPartial<ConstructorParameters<ConfiguredDocumentClass<typeof ChatMessage>>[0]> = {}>(\n      messageData: T,\n      { rollMode, create }: { rollMode?: foundry.CONST.DiceRollMode; create: false }\n    ): MessageData<T>;\n    toMessage<T extends DeepPartial<ConstructorParameters<ConfiguredDocumentClass<typeof ChatMessage>>[0]> = {}>(\n      messageData: T,\n      { rollMode, create }: { rollMode?: foundry.CONST.DiceRollMode; create: boolean }\n    ): Promise<InstanceType<ConfiguredDocumentClass<typeof ChatMessage>> | undefined> | MessageData<T>;\n\n    /**\n     * Expand an inline roll element to display it's contained dice result as a tooltip\n     * @param a - The inline-roll button\n     */\n    static expandInlineResult(a: HTMLAnchorElement): Promise<void>;\n\n    /**\n     * Collapse an expanded inline roll to conceal it's tooltip\n     * @param a - The inline-roll button\n     */\n    static collapseInlineResult(a: HTMLAnchorElement): void;\n\n    /**\n     * Represent the data of the Roll as an object suitable for JSON serialization.\n     * @returns Structured data which can be serialized into JSON\n     */\n    toJSON(): {\n      class: string;\n      options: Options;\n      dice: DiceTerm[];\n      formula: string;\n      terms: RollTerm[];\n      total: number | undefined;\n      evaluated: boolean;\n    };\n\n    /**\n     * Recreate a Roll instance using a provided data object\n     * @param data - Unpacked data representing the Roll\n     * @returns A reconstructed Roll instance\n     */\n    static fromData<T extends Roll>(this: ConstructorOf<T>, data: Data): T;\n\n    /**\n     * Recreate a Roll instance using a provided JSON string\n     * @param json - Serialized JSON data representing the Roll\n     * @returns A reconstructed Roll instance\n     */\n    static fromJSON(json: string): Roll;\n\n    /**\n     * Manually construct a Roll object by providing an explicit set of input terms\n     * @param terms -The array of terms to use as the basis for the Roll\n     * @param options - Additional options passed to the Roll constructor\n     * @returns The constructed Roll instance\n     *\n     * @example\n     * ```typescript\n     * const t1 = new Die({number: 4, faces: 8};\n     * const plus = new OperatorTerm({operator: \"+\"});\n     * const t2 = new NumericTerm({number: 8});\n     * const roll = Roll.fromTerms([t1, plus, t2]);\n     * roll.formula; // 4d8 + 8\n     * ```\n     */\n    static fromTerms(\n      terms: RollTerm[],\n      options?: Partial<Options>\n    ): typeof CONFIG.Dice.rolls extends [infer T] ? T : Roll<{}>;\n\n    /**\n     * @deprecated since 0.8.1\n     */\n    get _rolled(): boolean;\n  }\n}\n\ninterface ChatOptions {\n  /**\n   * @defaultValue `false`\n   */\n  blind?: boolean;\n\n  /**\n   * @defaultValue `null`\n   */\n  flavor?: any;\n\n  /**\n   * @defaultValue `false`\n   */\n  isPrivate?: boolean;\n\n  template?: string;\n\n  /**\n   * @defaultValue The id of the current user\n   */\n  user?: string;\n}\n\ntype Options = RollTerm.EvaluationOptions;\n\ninterface SplitGroupOptions {\n  openRegexp: RegExp | string;\n  closeRegexp: RegExp | string;\n  openSymbol: string;\n  closeSymbol: string;\n  onClose: (group: { open: string; terms: string[]; close: string }) => string[];\n}\n\ninterface Data {\n  formula: string;\n  results: Array<number | string>;\n  terms: Array<(PoolTerm.TermData & { class: 'DicePool' }) | DiceTerm.Data>;\n  total: number | null;\n}\n\ntype Flavor = Record<`%F${number}%`, string>;\n\n/**\n * @deprecated since 0.8.1\n */\ninterface MathProxy extends Math {\n  safeEval: (arg: Parameters<typeof Roll['safeEval']>) => ReturnType<typeof Roll['safeEval']>;\n}\n\ntype MessageData<T extends DeepPartial<ConstructorParameters<typeof ChatMessage>[0]>> = {\n  user: string;\n  type: typeof foundry.CONST.CHAT_MESSAGE_TYPES['ROLL'];\n  content: number;\n  sound: typeof CONFIG.sounds.dice;\n} & T;\n"
    ]
  