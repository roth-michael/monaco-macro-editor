
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/foundry.js/pixi/containers/canvasLayers/placeablesLayers/lightingLayer.d.ts",
      "/**\n * The Lighting Layer which displays darkness and light within the rendered Scene.\n * Lighting Layer (Container)\n *   Illumination Container [MULTIPLY]\n *     Background (Graphics)\n *     Light (Container) [LOS Mask]\n *       Source 1, ..., Source N (Container)\n *     Darkness (Container)\n *       Source 1, ..., Source N (Container)\n *   Coloration Container [ADD_NPM]\n *\n * @example <caption>The lightingRefresh hook</caption>\n * ```typescript\n * Hooks.on(\"lightingRefresh\", layer => {});\n * ```\n */\ndeclare class LightingLayer extends PlaceablesLayer<'AmbientLight', LightingLayer.LayerOptions> {\n  constructor();\n\n  /**\n   * A mapping of light sources which are active within the rendered Scene\n   */\n  sources: foundry.utils.Collection<PointSource>;\n\n  /**\n   * Increment this whenever lighting channels are re-configured.\n   * This informs lighting and vision sources whether they need to re-render.\n   * @defaultValue `0`\n   */\n  version: number;\n\n  /**\n   * The currently displayed darkness level, which may override the saved Scene value\n   * @defaultValue `0`\n   */\n  protected darknessLevel: number;\n\n  /**\n   * The current client setting for whether global illumination is used or not\n   * @defaultValue `false`\n   */\n  globalLight: boolean;\n\n  /**\n   * The coloration container which visualizes the effect of light sources\n   * @defaultValue `null`\n   */\n  coloration: PIXI.Container | null;\n\n  /**\n   * The illumination container which visualizes darkness and light\n   * @defaultValue `null`\n   */\n  illumination: PIXI.Container | null;\n\n  /**\n   * A flag for whether the darkness level is currently animating\n   * @defaultValue `false`\n   */\n  protected _animating: boolean;\n\n  /**\n   * An array of light sources which are currently animated\n   */\n  protected _animatedSources: PointSource[];\n\n  /**\n   * A mapping of different light level channels\n   * @defaultValue `undefined`\n   */\n  channels: Record<'background' | 'black' | 'bright' | 'canvas' | 'dark' | 'dim', LightChannel> | undefined;\n\n  /** @override */\n  static documentName: 'AmbientLight';\n\n  /**\n   * @remarks This is not overridden in foundry but reflects the real behavior.\n   */\n  static get instance(): Canvas['lighting'];\n\n  /**\n   * @override\n   * @defaultValue\n   * ```\n   * foundry.utils.mergeObject(super.layerOptions, {\n   *  name: \"lighting\",\n   *  rotatableObjects: true,\n   *  quadtree: true,\n   *  zIndex: 300\n   * })\n   * ```\n   */\n  static get layerOptions(): LightingLayer.LayerOptions;\n\n  /**\n   * Configure the lighting channels which are inputs to the ShadowMap\n   */\n  protected _configureChannels(\n    darkness?: number | null\n  ): Record<'background' | 'black' | 'bright' | 'canvas' | 'dark' | 'dim', LightChannel>;\n\n  /**\n   * @override\n   */\n  draw(): Promise<this>;\n\n  /**\n   * Draw the coloration container which is responsible for rendering the visible hue of a light source.\n   * Apply an additive blend to the entire container after each individual light source is blended via screen.\n   */\n  protected _drawColorationContainer(): PIXI.Container;\n\n  /**\n   * Draw the illumination container which is responsible for displaying darkness and light.\n   */\n  protected _drawIlluminationContainer(): PIXI.Container;\n\n  /**\n   * Does this scene currently benefit from global illumination?\n   */\n  hasGlobalIllumination(): boolean;\n\n  /**\n   * Initialize all AmbientLight sources which are present on this layer\n   */\n  initializeSources(): void;\n\n  /**\n   * Refresh the active display of the LightingLayer.\n   * Update the scene background color, light sources, and darkness sources\n   */\n  refresh(darkness?: number | undefined): void;\n\n  /** @override */\n  tearDown(): Promise<this>;\n\n  /**\n   * Activate light source animation for AmbientLight objects within this layer\n   */\n  activateAnimation(): void;\n\n  /**\n   * Deactivate light source animation for AmbientLight objects within this layer\n   */\n  deactivateAnimation(): void;\n\n  /**\n   * The ticker handler which manages animation delegation\n   * @param dt - Delta time\n   */\n  protected _animateSource(dt: number): void;\n\n  /**\n   * Animate a smooth transition of the darkness overlay to a target value.\n   * Only begin animating if another animation is not already in progress.\n   * @param target   - The target darkness level between 0 and 1\n   *                   (default: `1.0`)\n   * @param duration - The desired animation time in milliseconds. Default is 10 seconds\n   *                   (default: `10000`)\n   * @returns A Promise which resolves once the animation is complete\n   */\n  animateDarkness(target?: number, { duration }?: { duration?: number }): Promise<void>;\n\n  /**\n   * Actions to take when the darkness level of the Scene is changed\n   * @param darkness - The new darkness level\n   * @param prior    - The prior darkness level\n   */\n  protected _onDarknessChange(darkness: number, prior: number): void;\n\n  /** @override */\n  protected _onDragLeftStart(event: PIXI.InteractionEvent): Promise<AmbientLight>;\n\n  /** @override */\n  protected _onDragLeftMove(event: PIXI.InteractionEvent): void;\n\n  /** @override */\n  protected _onDragLeftCancel(event: PointerEvent): void;\n\n  /** @override */\n  protected _onMouseWheel(event: WheelEvent): void | ReturnType<AmbientLight['rotate']>;\n}\n\ndeclare namespace LightingLayer {\n  interface LayerOptions extends PlaceablesLayer.LayerOptions<'AmbientLight'> {\n    name: 'lighting';\n    rotatableObjects: true;\n    quadtree: true;\n    zIndex: 300;\n  }\n}\n\ndeclare interface LightChannel {\n  hex: number;\n  rgb: [number, number, number];\n}\n"
    ]
  