
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/foundry.js/pixi/containers/canvasLayers/placeablesLayers/mapLayers/foregroundLayer.d.ts",
      "import { ConfiguredObjectClassForName } from '../../../../../../../types/helperTypes';\n\ndeclare global {\n  /**\n   * An extension of the MapLayer that displays overhead in the foreground of the Scene.\n   */\n  class ForegroundLayer extends MapLayer<MapLayer.LayerOptions<'foreground'>> {\n    /**\n     * @defaultValue\n     * ```typescript\n     * foundry.utils.mergeObject(super.layerOptions, {\n     *   name: \"foreground\"\n     * })\n     * ```\n     */\n    static get layerOptions(): MapLayer.LayerOptions<'foreground'>;\n\n    /**\n     * @remarks This is not overridden in foundry but reflects the real behavior.\n     */\n    static get instance(): Canvas['foreground'];\n\n    /**\n     * Get an array of overhead Tile objects which are roofs\n     */\n    get roofs(): InstanceType<ConfiguredObjectClassForName<'Tile'>>[];\n\n    /**\n     * Determine whether to display roofs\n     */\n    get displayRoofs(): boolean;\n\n    draw(): Promise<undefined>;\n\n    /**\n     * Draw the container used to cache the position of Token occlusion shapes to a RenderTexture\n     */\n    protected _drawOcclusionMask(): CachedContainer;\n\n    deactivate(): this;\n\n    tearDown(): Promise<this>;\n\n    getZIndex(): number;\n\n    getDocuments(): Exclude<this['documentCollection'], null>;\n\n    /**\n     * Refresh the display of tiles on the Foreground Layer depending on Token occlusion.\n     */\n    refresh(): void;\n\n    /**\n     * Update occlusion for all tiles on the foreground layer\n     */\n    updateOcclusion(): void;\n\n    /**\n     * Draw the container which caches token-based occlusion shapes\n     * @param tokens - The set of currently observed tokens\n     */\n    protected _drawOcclusionShapes(tokens: ConfiguredObjectClassForName<'Token'>[]): void;\n\n    protected _getDropData(\n      event: DragEvent,\n      data:\n        | { type: 'Tile'; img: string; tileSize?: number; x: number; y: number }\n        | ({ type: string } & Partial<Record<string, unknown>>)\n    ): Promise<ConstructorParameters<typeof foundry.documents.BaseTile>[0]>;\n  }\n}\n"
    ]
  