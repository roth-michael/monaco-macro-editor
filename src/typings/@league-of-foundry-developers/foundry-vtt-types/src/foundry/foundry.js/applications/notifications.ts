
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/foundry.js/applications/notifications.d.ts",
      "/**\n * A common framework for displaying notifications to the client.\n * Submitted notifications are added to a queue, and up to 3 notifications are displayed at once.\n * Each notification is displayed for 5 seconds at which point further notifications are pulled from the queue.\n *\n * @example\n * ```typescript\n * ui.notifications.info(\"This is an info message\");\n * ui.notifications.warn(\"This is a warning message\");\n * ui.notifications.error(\"This is an error message\");\n * ui.notifications.info(\"This is a 4th message which will not be shown until the first info message is done\");\n * ```\n *\n * @typeParam Options - the type of the options object\n */\ndeclare class Notifications<Options extends Application.Options = Application.Options> extends Application<Options> {\n  constructor(options?: Partial<Options>);\n\n  /**\n   * Submitted notifications which are queued for display\n   * @defaultValue `[]`\n   */\n  queue: Notifications.Notification[];\n\n  /**\n   * Notifications which are currently displayed\n   * @defaultValue `[]`\n   */\n  active: JQuery[];\n\n  /**\n   * @override\n   * @defaultValue\n   * ```typescript\n   * mergeObject(super.defaultOptions, {\n   *   popOut: false,\n   *   id: \"notifications\",\n   *   template: \"templates/hud/notifications.html\"\n   * });\n   * ```\n   */\n  static get defaultOptions(): Application.Options;\n\n  /**\n   * Initialize the Notifications system by displaying any system-generated messages which were passed from the server.\n   */\n  initialize(): void;\n\n  /** @override */\n  protected _renderInner(data: object): JQuery;\n\n  /** @override */\n  protected _render(force?: boolean, options?: Application.RenderOptions<Options>): Promise<void>;\n\n  /**\n   * Push a new notification into the queue\n   * @param message   - The content of the notification message\n   * @param type      - The type of notification, currently \"info\", \"warning\", and \"error\" are supported\n   *                    (default: `'info'`)\n   * @param options   - Additional options which affect the notification\n   *                    (default: `{}`)\n   */\n  notify(message: string, type?: 'info' | 'warning' | 'error', options?: Notifications.Options): void;\n\n  /**\n   * Display a notification with the \"info\" type\n   * @param message - The content of the notification message\n   * @param options - Notification options passed to the notify function\n   */\n  info(message: string, options?: Notifications.Options): void;\n\n  /**\n   * Display a notification with the \"warning\" type\n   * @param message - The content of the notification message\n   * @param options - Notification options passed to the notify function\n   */\n  warn(message: string, options?: Notifications.Options): void;\n\n  /**\n   * Display a notification with the \"error\" type\n   * @param message - The content of the notification message\n   * @param options - Notification options passed to the notify function\n   */\n  error(message: string, options?: Notifications.Options): void;\n\n  /**\n   * Retrieve a pending notification from the queue and display it\n   */\n  protected fetch(): void;\n}\n\ndeclare namespace Notifications {\n  interface Options {\n    /**\n     * Whether the notification should be permanently displayed unless otherwise dismissed\n     * @defaultValue `false`\n     */\n    permanent?: boolean;\n\n    /**\n     * Whether to localize the message content before displaying it\n     * @defaultValue `false`\n     */\n    localize?: boolean;\n  }\n\n  interface Notification {\n    message: string;\n    type: 'info' | 'warning' | 'error';\n    timestamp: number;\n    permanent: boolean;\n  }\n}\n"
    ]
  