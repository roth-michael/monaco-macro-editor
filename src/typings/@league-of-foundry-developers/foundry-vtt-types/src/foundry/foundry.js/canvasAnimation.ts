
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/foundry.js/canvasAnimation.d.ts",
      "/**\n * A helper class providing utility methods for PIXI Canvas animation\n */\ndeclare class CanvasAnimation {\n  static get ticker(): PIXI.Ticker;\n\n  /**\n   * Track an object of active animations by name, context, and function\n   * This allows a currently playing animation to be referenced and terminated\n   */\n  static animations: Partial<\n    Record<string, { fn: (dt: number) => void; context: PIXI.Container; resolve: (value: boolean) => void }>\n  >;\n\n  /**\n   * Apply a linear animation from the current value of some attribute to a new value\n   * Resolve a Promise once the animation has concluded and the attributes have reached their new target\n   * @param attributes - An array of attributes to animate. Structure of the Array is shown in the example\n   * @param options    - Additional options which customize the animation\n   *                     (default: `{}`)\n   * @returns A Promise which resolves once the linear animation has concluded\n   *\n   * @example\n   * ```typescript\n   * let animation = [\n   *   {\n   *     parent: token,\n   *     attribute: x,\n   *     to: 1000\n   *   },\n   *   {\n   *     parent: token,\n   *     attribute: y,\n   *     to: 2000\n   *   }\n   * ];\n   * CanvasAnimation.animateLinear(attributes, {duration:500, ontick: console.log(\"ticking\")});\n   * ```\n   */\n  static animateLinear(\n    attributes: CanvasAnimation.Attribute[],\n    options?: Partial<LinearAnimationOptions>\n  ): Promise<boolean>;\n\n  /**\n   * If an animation using a certain name already exists, terminate it\n   * @param name - The animation name to terminate\n   */\n  static terminateAnimation(name: string): void;\n\n  /**\n   * Asynchronously animate a transition function and resolve a Promise once the animation has completed\n   * @param fn         - A suitable transition function. See PIXI.Ticker for details\n   * @param context    - The Canvas container providing scope for the transition\n   * @param name       -  Provide a unique animation name which may be referenced later\n   * @param attributes - The attributes being animated by the function\n   * @param duration   - The duration in milliseconds over which the animation should occur\n   * @param ontick     - A function which defines additional behaviors to apply every animation frame\n   * @returns A Promise which resolves once the animation has completed\n   */\n  protected static _animatePromise(\n    fn: TransitionFunction,\n    context: PIXI.Container,\n    name: string,\n    attributes: CanvasAnimation.Attribute[],\n    duration: number,\n    ontick: TickFunction | undefined\n  ): Promise<boolean>;\n\n  /**\n   * Generic ticker function to implement the animation.\n   * This animation wrapper executes once per frame for the duration of the animation event.\n   * Once the animated attributes have converged to their targets, it resolves the original Promise.\n   * The user-provided ontick function runs each frame update to apply additional behaviors.\n   */\n  protected static _animateFrame(\n    deltaTime: number,\n    resolve: (value: boolean) => void,\n    reject: (reason?: any) => void,\n    attributes: CanvasAnimation.Attribute[],\n    duration: number,\n    ontick: TickFunction | undefined\n  ): void;\n}\n\ndeclare namespace CanvasAnimation {\n  interface Attribute {\n    parent: any;\n    attribute: string;\n    to: number;\n  }\n}\n\ninterface LinearAnimationOptions {\n  /**\n   * An animation context to use which defines scope\n   */\n  context: PIXI.Container;\n\n  /**\n   * Provide a unique animation name which may be referenced later\n   */\n  name: string;\n\n  /**\n   * The duration in milliseconds over which the animation should occur\n   * @defaultValue `1000`\n   */\n  duration: number;\n\n  /**\n   * A function which defines additional behaviors to apply every animation frame\n   */\n  ontick: TickFunction;\n}\n\ntype TickFunction = (dt: number, attributes: CanvasAnimation.Attribute[]) => void;\ntype TransitionFunction = (\n  dt: number,\n  resolve: (value: boolean) => void,\n  reject: (reason?: any) => void,\n  attributes: CanvasAnimation.Attribute[],\n  duration: number,\n  ontick?: TickFunction\n) => void;\n"
    ]
  