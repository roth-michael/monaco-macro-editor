
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/foundry.js/clientDocuments/activeEffect.d.ts",
      "import { DocumentModificationOptions } from '../../common/abstract/document.mjs';\nimport { ConfiguredDocumentClass, ConstructorDataType } from '../../../types/helperTypes';\nimport { EffectChangeData } from '../../common/data/data.mjs/effectChangeData';\n\ndeclare global {\n  /**\n   * The client-side ActiveEffect document which extends the common BaseActiveEffect model.\n   * Each ActiveEffect belongs to the effects collection of its parent Document.\n   * Each ActiveEffect contains a ActiveEffectData object which provides its source data.\n   *\n   * @see {@link data.ActiveEffectData}               The ActiveEffect data schema\n   * @see {@link documents.Actor}                     The Actor document which contains ActiveEffect embedded documents\n   * @see {@link documents.Item}                      The Item document which contains ActiveEffect embedded documents\n   */\n  class ActiveEffect extends ClientDocumentMixin(foundry.documents.BaseActiveEffect) {\n    /**\n     * @param data   - Initial data provided to construct the ActiveEffect document\n     * @param parent - The parent document to which this ActiveEffect belongs\n     */\n    constructor(...args: ConstructorParameters<typeof foundry.documents.BaseActiveEffect>);\n\n    /**\n     * A cached reference to the source name to avoid recurring database lookups\n     * @defaultValue `null`\n     */\n    protected _sourceName: string | null;\n\n    /**\n     * A cached reference to the ActiveEffectConfig instance which configures this effect\n     */\n    protected _sheet: FormApplication | null; // TODO: Actually an ActiveEffectConfig according to foundry but this is a problem with ClientDocumentMixins _sheet, this should actually be inferred from the CONFIG\n\n    /**\n     * Summarize the active effect duration\n     */\n    get duration(): DurationSummary;\n\n    /**\n     * Format a round+turn combination as a decimal\n     * @param round  - The round number\n     * @param turn   - The turn number\n     * @param nTurns - The maximum number of turns in the encounter\n     * @returns The decimal representation\n     */\n    protected _getCombatTime(round: number, turn: number, nTurns: number): number;\n\n    /**\n     * Format a number of rounds and turns into a human-readable duration label\n     * @param rounds - The number of rounds\n     * @param turns  - The number of turns\n     * @returns The formatted label\n     */\n    protected _getDurationLabel(rounds: number, turns: number): string;\n\n    /**\n     * Describe whether the ActiveEffect has a temporary duration based on combat turns or rounds.\n     */\n    get isTemporary(): boolean;\n\n    /**\n     * A cached property for obtaining the source name\n     */\n    get sourceName(): string;\n\n    /**\n     * An instance of the ActiveEffectConfig sheet to use for this ActiveEffect instance.\n     * The reference to the sheet is cached so the same sheet instance is reused.\n     */\n    get sheet(): FormApplication; // TODO: Actually an ActiveEffectConfig according to foundry but this is a problem with ClientDocumentMixin's sheet, this should actually be inferred from the CONFIG\n\n    /**\n     * Apply this ActiveEffect to a provided Actor.\n     * @param actor  - The Actor to whom this effect should be applied\n     * @param change - The change data being applied\n     * @returns The resulting applied value\n     */\n    apply(actor: ConfiguredActor, change: EffectChangeData): unknown;\n\n    /**\n     * Apply an ActiveEffect that uses an ADD application mode.\n     * The way that effects are added depends on the data type of the current value.\n     *\n     * If the current value is null, the change value is assigned directly.\n     * If the current type is a string, the change value is concatenated.\n     * If the current type is a number, the change value is cast to numeric and added.\n     * If the current type is an array, the change value is appended to the existing array if it matches in type.\n     *\n     * @param actor  - The Actor to whom this effect should be applied\n     * @param change - The change data being applied\n     * @returns The resulting applied value\n     */\n    protected _applyAdd(actor: ConfiguredActor, change: EffectChangeData): unknown;\n\n    /**\n     * Apply an ActiveEffect that uses a MULTIPLY application mode.\n     * Changes which MULTIPLY must be numeric to allow for multiplication.\n     * @param actor  - The Actor to whom this effect should be applied\n     * @param change - The change data being applied\n     * @returns The resulting applied value\n     */\n    protected _applyMultiply(actor: ConfiguredActor, change: EffectChangeData): unknown;\n\n    /**\n     * Apply an ActiveEffect that uses an OVERRIDE application mode.\n     * Numeric data is overridden by numbers, while other data types are overridden by any value\n     * @param actor  - The Actor to whom this effect should be applied\n     * @param change - The change data being applied\n     * @returns The resulting applied value\n     */\n    protected _applyOverride(actor: ConfiguredActor, change: EffectChangeData): unknown;\n\n    /**\n     * Apply an ActiveEffect that uses an UPGRADE, or DOWNGRADE application mode.\n     * Changes which UPGRADE or DOWNGRADE must be numeric to allow for comparison.\n     * @param actor  - The Actor to whom this effect should be applied\n     * @param change - The change data being applied\n     * @returns The resulting applied value\n     */\n    protected _applyUpgrade(actor: ConfiguredActor, change: EffectChangeData): unknown;\n\n    /**\n     * Apply an ActiveEffect that uses a CUSTOM application mode.\n     * Changes which UPGRADE or DOWNGRADE must be numeric to allow for comparison.\n     * @param actor  - The Actor to whom this effect should be applied\n     * @param change - The change data being applied\n     * @returns The resulting applied value\n     */\n    protected _applyCustom(actor: ConfiguredActor, change: EffectChangeData): unknown;\n\n    /**\n     * Get the name of the source of the Active Effect\n     */\n    protected _getSourceName(): Promise<string>;\n\n    protected _preCreate(\n      data: ConstructorDataType<foundry.data.ActiveEffectData>,\n      options: DocumentModificationOptions,\n      user: foundry.documents.BaseUser\n    ): Promise<void>;\n  }\n}\n\ninterface DurationSummary {\n  type: 'seconds' | 'turns' | 'none';\n  duration: number | null;\n  remaining: number | null;\n  label: string;\n}\n\ntype ConfiguredActor = InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BaseActor>>;\n\nexport {};\n"
    ]
  