
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/foundry.js/applications/formApplications/settingsConfig.d.ts",
      "/**\n * A game settings configuration application\n * This form renders the settings defined via the game.settings.register API which have config = true\n */\ndeclare class SettingsConfig extends FormApplication<FormApplication.Options, SettingsConfig.Data> {\n  /**\n   * @override\n   * @defaultValue\n   * ```typescript\n   * mergeObject(super.defaultOptions, {\n   *   title: game.i18n.localize(\"SETTINGS.Title\"),\n   *   id: \"client-settings\",\n   *   template: \"templates/sidebar/apps/settings-config.html\",\n   *   width: 600,\n   *   height: \"auto\",\n   *   tabs: [\n   *     {navSelector: \".tabs\", contentSelector: \".content\", initial: \"core\"}\n   *   ]\n   * })\n   * ```\n   */\n  static get defaultOptions(): typeof FormApplication['defaultOptions'];\n\n  /**\n   * @param options - (unused)\n   * @override\n   */\n  getData(options?: Partial<FormApplication.Options>): SettingsConfig.Data;\n\n  /** @override */\n  activateListeners(html: JQuery): void;\n\n  /**\n   * Handle activating the button to configure User Role permissions\n   * @param event - The initial button click event\n   */\n  protected _onClickSubmenu(event: JQuery.ClickEvent): void;\n\n  /**\n   * Handle button click to reset default settings\n   * @param event - The initial button click event\n   */\n  protected _onResetDefaults(event: JQuery.ClickEvent): void;\n\n  /**\n   * @param event - (unused)\n   * @override\n   */\n  protected _updateObject(event: Event, formData: SettingsConfig.FormData): Promise<void>;\n}\n\ndeclare namespace SettingsConfig {\n  interface Data {\n    user: User;\n    canConfigure: boolean;\n    systemTitle: Game['system']['data']['title'];\n    data: Data.Data;\n  }\n\n  namespace Data {\n    interface Data {\n      core: {\n        version: Game['data']['version'];\n        menus: ClientSettings.CompleteMenuSetting[];\n        settings: Setting[];\n        none: boolean;\n      };\n      system: {\n        title: Game['system']['data']['title'];\n        menus: ClientSettings.CompleteMenuSetting[];\n        settings: Setting[];\n        none: boolean;\n      };\n      modules: Record<string, { title: string; menus: ClientSettings.CompleteMenuSetting[]; settings: Setting[] }>;\n    }\n\n    interface Setting extends foundry.utils.Duplicated<ClientSettings.CompleteSetting> {\n      name: string;\n      hint: string;\n      value: ReturnType<ClientSettings['get']>;\n      type: string;\n      isCheckbox: boolean;\n      isSelect: boolean;\n      isRange: boolean;\n    }\n  }\n\n  interface FormData {\n    'core.animateRollTable': boolean;\n    'core.chatBubbles': boolean;\n    'core.chatBubblesPan': boolean;\n    'core.coneTemplateType': 'round' | 'flat';\n    'core.language': string;\n    'core.leftClickRelease': boolean;\n    'core.lightAnimation': boolean;\n    'core.maxFPS': number;\n    'core.mipmap': boolean;\n    'core.softShadows': boolean;\n    'core.tokenDragPreview': boolean;\n    'core.visionAnimation': boolean;\n    [key: string]: unknown;\n  }\n}\n"
    ]
  