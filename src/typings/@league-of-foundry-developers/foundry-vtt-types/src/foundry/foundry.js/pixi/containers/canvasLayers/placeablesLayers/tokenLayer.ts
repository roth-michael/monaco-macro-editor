
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/foundry.js/pixi/containers/canvasLayers/placeablesLayers/tokenLayer.d.ts",
      "import { ConfiguredDocumentClass, ConfiguredObjectClassForName } from '../../../../../../types/helperTypes';\nimport { SelectOptions } from '../placeablesLayer';\n\ndeclare global {\n  /**\n   * The Tokens Container\n   */\n  class TokenLayer extends PlaceablesLayer<'Token', TokenLayer.LayerOptions> {\n    constructor();\n\n    /**\n     * The current index position in the tab cycle\n     * @defaultValue `null`\n     */\n    protected _tabIndex: number | null;\n\n    /**\n     * Remember the last drawn wildcard token image to avoid repetitions\n     * @defaultValue `null`\n     */\n    protected _lastWildcard: string | null;\n\n    /**\n     * @remarks This is not overridden in foundry but reflects the real behavior.\n     */\n    static get instance(): Canvas['tokens'];\n\n    /**\n     * @override\n     * @defaultValue\n     * ```typescript\n     * foundry.utils.mergeObject(super.layerOptions, {\n     *  name: \"tokens\",\n     *  canDragCreate: false,\n     *  controllableObjects: true,\n     *  rotatableObjects: true,\n     *  zIndex: 100\n     * })\n     * ```\n     */\n    static get layerOptions(): TokenLayer.LayerOptions;\n\n    /**\n     * @override\n     */\n    static documentName: 'Token';\n\n    /** @override */\n    get gridPrecision(): 1;\n\n    /**\n     * Token objects on this layer utilize the TokenHUD\n     */\n    get hud(): TokenHUD;\n\n    /**\n     * An Array of tokens which belong to actors which are owned\n     */\n    get ownedTokens(): ReturnType<this['placeables']['filter']>;\n\n    /** @override */\n    tearDown(): Promise<this>;\n\n    /** @override */\n    activate(): this;\n\n    /** @override */\n    deactivate(): this;\n\n    /**\n     * @override\n     * @param options - (default: `{}`)\n     */\n    selectObjects(options?: SelectOptions): boolean;\n\n    /**\n     * Target all Token instances which fall within a coordinate rectangle.\n     *\n     * @param x             - The top-left x-coordinate of the selection rectangle\n     * @param y             - The top-left y-coordinate of the selection rectangle\n     * @param width         - The width of the selection rectangle\n     * @param height        - The height of the selection rectangle\n     * @param releaseOthers - Whether or not to release other targeted tokens\n     *                        (default: `true`)\n     * @returns The number of Token instances which were targeted.\n     */\n    targetObjects(\n      { x, y, width, height }: { x: number; y: number; width: number; height: number },\n      { releaseOthers }?: { releaseOthers?: boolean }\n    ): number;\n\n    /**\n     * Cycle the controlled token by rotating through the list of Owned Tokens that are available within the Scene\n     * Tokens are currently sorted in order of their TokenID\n     *\n     * @param forwards - Which direction to cycle. A truthy value cycles forward, while a false value cycles backwards.\n     * @param reset    - Restart the cycle order back at the beginning?\n     * @returns The Token object which was cycled to, or null\n     */\n    cycleTokens(forwards: boolean, reset: boolean): InstanceType<ConfiguredObjectClassForName<'Token'>> | null;\n\n    /**\n     * Add or remove the set of currently controlled Tokens from the active combat encounter\n     * @param  state  - The desired combat state which determines if each Token is added (true) or removed (false)\n     *                  (default: `true`)\n     * @param  combat - A Combat encounter from which to add or remove the Token\n     *                  (default: `null`)\n     * @param  token  - A specific Token which is the origin of the group toggle request\n     *                  (default: `null`)\n     * @returns The updated Combat encounter\n     * @remarks Returns the created Combatants or undefined if there is no combat and one can't be created\n     *          or the combat if the user is no GM and wants to remove combatants.\n     */\n    toggleCombat(\n      state?: boolean,\n      combat?: InstanceType<ConfiguredDocumentClass<typeof Combat>> | null,\n      { token }?: { token?: InstanceType<ConfiguredObjectClassForName<'Token'>> | null }\n    ): Promise<\n      | InstanceType<ConfiguredDocumentClass<typeof Combat>>\n      | InstanceType<ConfiguredDocumentClass<typeof Combatant>>[]\n      | void\n    >;\n\n    /**\n     * Get the tab cycle order for tokens by sorting observable tokens based on their distance from top-left.\n     */\n    protected _getCycleOrder(): InstanceType<ConfiguredObjectClassForName<'Token'>>[];\n\n    /**\n     * Immediately conclude the animation of any/all tokens\n     */\n    concludeAnimation(): void;\n\n    /**\n     * Handle dropping of Actor data onto the Scene canvas\n     */\n    protected _onDropActorData(\n      event: DragEvent,\n      data: TokenLayer.DropData\n    ): Promise<void | false | InstanceType<ConfiguredObjectClassForName<'Token'>>>;\n  }\n\n  namespace TokenLayer {\n    interface LayerOptions extends PlaceablesLayer.LayerOptions<'Token'> {\n      name: 'tokens';\n      canDragCreate: false;\n      controllableObjects: true;\n      rotatableObjects: true;\n      zIndex: 100;\n    }\n\n    interface DropData extends Canvas.DropPosition {\n      id?: string;\n      type?: 'Actor';\n      pack?: string;\n    }\n  }\n}\n"
    ]
  