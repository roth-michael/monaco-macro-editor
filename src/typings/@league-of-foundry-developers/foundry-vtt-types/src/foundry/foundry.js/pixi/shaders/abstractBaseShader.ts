
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/foundry.js/pixi/shaders/abstractBaseShader.d.ts",
      "/**\n * This class defines an interface which all shaders utilize\n */\ndeclare abstract class AbstractBaseShader extends PIXI.Shader {\n  constructor(program: PIXI.Program, uniforms: AbstractBaseShader.Uniforms);\n\n  /**\n   * The initial default values of shader uniforms\n   */\n  protected _defaults: AbstractBaseShader.Uniforms;\n\n  /**\n   * The default vertex shader used by all instances of AbstractBaseShader\n   */\n  static vertexShader: string;\n\n  /**\n   * The fragment shader which renders this source.\n   * A subclass of AbstractBaseShader must implement the fragmentShader static field.\n   * @defaultValue `\"\"`\n   *\n   * @remarks This is abstract, subclasses must implement it.\n   */\n  static fragmentShader: string;\n\n  /**\n   * The default uniform values for the shader.\n   * A subclass of AbstractBaseShader must implement the defaultUniforms static field.\n   * @defaultValue `{}`\n   *\n   * @remarks This is abstract, subclasses must implement it.\n   */\n  static defaultUniforms: AbstractBaseShader.Uniforms;\n\n  /**\n   * A factory method for creating the shader using its defined default values\n   */\n  static create<T extends AbstractBaseShader>(this: ConstructorOf<T>, defaultUniforms?: AbstractBaseShader.Uniforms): T;\n\n  /**\n   * Reset the shader uniforms back to their provided default values\n   */\n  protected reset(): void;\n\n  /**\n   * A Vec3 pseudo-random generator, based on uv position\n   */\n  static PRNG3D: string;\n\n  /**\n   * A conventional pseudo-random number generator with the \"golden\" numbers, based on uv position\n   */\n  static PRNG: string;\n\n  /**\n   * A conventional noise generator\n   */\n  static NOISE: string;\n\n  /**\n   * Fractional Brownian Motion for a given number of octaves\n   * @param octaves - (default: `4`)\n   * @param amp     - (default: `1.0`)\n   */\n  static FBM(octaves?: number, amp?: number): string;\n\n  /**\n   * Fade easing to use with distance in interval [0,1]\n   * @param amp  - (default: `3`)\n   * @param coef - (default: `0.80`)\n   */\n  static FADE(amp?: number, coef?: number): string;\n\n  /**\n   * Convert a Hue-Saturation-Brightness color to RGB - useful to convert polar coordinates to RGB\n   */\n  static HSB2RGB: string;\n}\n\ndeclare namespace AbstractBaseShader {\n  type UniformValue =\n    | boolean\n    | number\n    | Int32List\n    | Float32List\n    | { x: number; y: number }\n    | { x: number; y: number; z: number }\n    | { x: number; y: number; z: number; w: number }\n    | { x: number; y: number }[]\n    | { x: number; y: number; z: number }[]\n    | { x: number; y: number; z: number; w: number }[]\n    | PIXI.Texture;\n\n  type Uniforms = Partial<Record<string, AbstractBaseShader.UniformValue>>;\n}\n"
    ]
  