
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/common/documents.mjs/baseCombat.d.ts",
      "import { ConstructorDataType } from '../../../types/helperTypes';\nimport { DocumentMetadata } from '../abstract/document.mjs';\nimport { Document } from '../abstract/module.mjs';\nimport { data } from '../module.mjs';\nimport { BaseCombatant } from './baseCombatant';\nimport { BaseUser } from './baseUser';\n\n/**\n * The base Combat model definition which defines common behavior of an Combat document between both client and server.\n */\nexport declare class BaseCombat extends Document<data.CombatData> {\n  static get schema(): typeof data.CombatData;\n\n  static get metadata(): Merge<\n    DocumentMetadata,\n    {\n      name: 'Combat';\n      collection: 'combats';\n      label: 'DOCUMENT.Combat';\n      embedded: {\n        Combatant: typeof BaseCombatant;\n      };\n      isPrimary: true;\n      permissions: {\n        update: typeof BaseCombat._canUpdate;\n      };\n    }\n  >;\n\n  /** A reference to the Collection of Combatant instances in the Combat document, indexed by id. */\n  get combatants(): this['data']['combatants'];\n\n  /**\n   * Is a user able to update an existing Combat?\n   * @param doc - (unused)\n   */\n  protected static _canUpdate(user: BaseUser, doc: unknown, data?: ConstructorDataType<data.CombatData>): boolean;\n}\n"
    ]
  