
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/foundry.js/applications/sidebarTabs/sidebarDirectory.d.ts",
      "import { ConfiguredDocumentClass, ConfiguredDocumentClassForName } from '../../../../types/helperTypes';\nimport { DropData } from '../../clientDocumentMixin';\n\ndeclare global {\n  /**\n   * A shared pattern for the sidebar directory which Actors, Items, and Scenes all use\n   * @typeParam Name    - The the type of document being handled by this {@link SidebarDirectory}.\n   * @typeParam Options - The type of the options object\n   */\n  abstract class SidebarDirectory<\n    Name extends foundry.CONST.EntityType | 'FogExploration',\n    Options extends SidebarDirectory.Options = SidebarDirectory.Options\n  > extends SidebarTab<Options> {\n    constructor(options?: Partial<SidebarDirectory.Options>);\n\n    /**\n     * References to the set of Documents which are displayed in the Sidebar\n     */\n    documents: InstanceType<ConfiguredDocumentClassForName<Name>>[];\n\n    /**\n     * Reference the set of Folders which exist in this Sidebar\n     */\n    folders: InstanceType<ConfiguredDocumentClass<typeof Folder>>[];\n\n    /**\n     * A reference to the named Document type that this Sidebar Directory instance displays\n     * @defaultValue `'Document'`\n     */\n    static documentName: string;\n\n    /**\n     * @override\n     * @defaultValue\n     * ```typescript\n     * const cls = getDocumentClass(this.documentName);\n     * const collection = cls.metadata.collection;\n     * foundry.utils.mergeObject(super.defaultOptions, {\n     *   id: collection,\n     *   template: `templates/sidebar/${collection}-directory.html`,\n     *   title: `${game.i18n.localize(cls.metadata.label)} Directory`,\n     *   renderUpdateKeys: [\"name\", \"img\", \"thumb\", \"permission\", \"sort\", \"sorting\", \"folder\"],\n     *   height: \"auto\",\n     *   scrollY: [\"ol.directory-list\"],\n     *   dragDrop: [{ dragSelector: \".directory-item\",  dropSelector: \".directory-list\"}],\n     *   filters: [{inputSelector: 'input[name=\"search\"]', contentSelector: \".directory-list\"}],\n     *   contextMenuSelector: \".entity\"\n     * });\n     * ```\n     */\n    static get defaultOptions(): SidebarDirectory.Options;\n\n    /**\n     * The WorldCollection instance which this Sidebar Directory displays.\n     */\n    static get collection(): WorldCollection<\n      ConfiguredDocumentClassForName<foundry.CONST.EntityType | 'FogExploration'>,\n      string\n    >;\n\n    /**\n     * Initialize the content of the directory by categorizing folders and entities into a hierarchical tree structure.\n     */\n    initialize(): void;\n\n    tree: SidebarDirectory.Tree<this['documents'][number]>;\n\n    /**\n     * Given an entity type and a list of entities, set up the folder tree for that entity\n     * @param folders  - The Array of Folder objects to organize\n     * @param entities - The Array of Entity objects to organize\n     * @returns A tree structure containing the folders and entities\n     */\n    static setupFolders<T extends SidebarDirectory<any, any>>(\n      this: ConstructorOf<T>,\n      folders: T['folders'],\n      entities: T['documents']\n    ): SidebarDirectory.Tree<T['documents'][number]>;\n\n    /**\n     * Populate a single folder with child folders and content\n     * This method is called recursively when building the folder tree\n     * @param allowChildren - (default: `true`)\n     */\n    protected static _populate<T extends SidebarDirectory<any, any>>(\n      this: ConstructorOf<T>,\n      folder: T['folders'][number],\n      folders: T['folders'],\n      entities: T['documents'],\n      {\n        allowChildren\n      }?: {\n        allowChildren: boolean;\n      }\n    ): [T['folders'], T['documents']];\n\n    /**\n     * @override\n     */\n    render(force?: boolean, context?: SidebarDirectory.RenderContext<Options>): this | void;\n\n    /**\n     * @param options - (unused)\n     * @override\n     * @remarks\n     * This implementation doesn't actually return `PlaylistDirectory.Data`, it's only to allow {@link PlaylistDirectory}\n     * to override accordingly.\n     */\n    getData(options?: Partial<Options>): SidebarDirectory.Data<this['tree']> | PlaylistDirectory.Data;\n\n    /**\n     * @param event - (unused)\n     * @override\n     */\n    protected _onSearchFilter(event: KeyboardEvent, query: string, rgx: RegExp, html: HTMLElement): void;\n\n    /**\n     * Collapse all subfolders in this directory\n     */\n    collapseAll(): void;\n\n    /**\n     * Activate event listeners triggered within the Actor Directory HTML\n     */\n    activateListeners(html: JQuery): void;\n\n    /**\n     * Handle clicking on an Entity name in the Sidebar directory\n     * @param event - The originating click event\n     */\n    protected _onClickEntityName(event: JQuery.ClickEvent): void | Promise<void>;\n\n    /**\n     * Handle new creation request\n     * @param event - The originating button click event\n     */\n    protected _onCreateDocument(\n      event: JQuery.ClickEvent\n    ): Promise<InstanceType<ConfiguredDocumentClassForName<Name>> | undefined>;\n\n    /**\n     * Create a new Folder in this SidebarDirectory\n     * @param event - The originating button click event\n     */\n    protected _onCreateFolder(event: JQuery.ClickEvent): void;\n\n    /**\n     * Handle toggling the collapsed or expanded state of a folder within the directory tab\n     * @param event - The originating click event\n     */\n    protected _toggleFolder(event: JQuery.ClickEvent): void;\n\n    /**\n     * @override\n     */\n    protected _onDragStart(event: DragEvent): void;\n\n    protected _dragType: string;\n\n    /** @override */\n    protected _canDragStart(selector: string): boolean;\n\n    /**\n     * Highlight folders as drop targets when a drag event enters or exits their area\n     * @param event - The DragEvent which is in progress\n     */\n    protected _onDragHighlight(event: JQuery.DragEnterEvent | JQuery.DragLeaveEvent): void;\n\n    /**\n     * @override\n     * @remarks\n     * The return type could be specified in more detail but it is not supposed to be used and this allows more\n     * flexibility for deriving classes.\n     */\n    protected _onDrop(event: DragEvent): unknown;\n\n    /**\n     * Handle Document data being dropped into the directory.\n     * @param target - The target element\n     * @param data   - The data being dropped\n     */\n    protected _handleDroppedDocument(\n      target: HTMLElement,\n      data: DropData<InstanceType<ConfiguredDocumentClassForName<Name>>>\n    ): Promise<InstanceType<ConfiguredDocumentClassForName<Name>> | undefined>;\n\n    /**\n     * Handle Folder data being dropped into the directory.\n     * @param target - The target element\n     * @param data   - The data being dropped\n     */\n    protected _handleDroppedFolder(\n      target: HTMLElement,\n      data: DropData<InstanceType<ConfiguredDocumentClass<typeof Folder>>>\n    ): Promise<InstanceType<ConfiguredDocumentClass<typeof Folder>> | undefined>;\n\n    /**\n     * Default folder context actions\n     * @param html - The context menu HTML being rendered for the directory\n     */\n    protected _contextMenu(html: JQuery): void;\n\n    /**\n     * Get the set of ContextMenu options which should be used for Folders in a SidebarDirectory\n     * @returns The Array of context options passed to the ContextMenu instance\n     */\n    protected _getFolderContextOptions(): ContextMenuEntry[];\n\n    /**\n     * Get the set of ContextMenu options which should be used for Entities in a SidebarDirectory\n     * @returns The Array of context options passed to the ContextMenu instance\n     */\n    protected _getEntryContextOptions(): ContextMenuEntry[];\n\n    /**\n     * @deprecated since 0.8.0\n     */\n    get entities(): this['documents'];\n  }\n\n  namespace SidebarDirectory {\n    interface Data<ConcreteTree extends Tree<foundry.abstract.Document<any, any>>> {\n      user: InstanceType<ConfiguredDocumentClass<typeof User>>;\n      tree: ConcreteTree;\n      canCreate: boolean;\n      sidebarIcon: string;\n    }\n\n    interface Options extends Application.Options {\n      renderUpdateKeys: string[];\n      contextMenuSelector: string;\n    }\n\n    type RenderContext<Options extends SidebarDirectory.Options = SidebarDirectory.Options> =\n      Application.RenderOptions<Options> & {\n        action?: string;\n        data?: string;\n        entityType?: string;\n      };\n\n    interface Tree<ConcreteDocument extends foundry.abstract.Document<any, any>> {\n      root?: boolean;\n      content: ConcreteDocument[];\n      children: (Folder & Tree<ConcreteDocument>)[];\n    }\n  }\n}\n"
    ]
  