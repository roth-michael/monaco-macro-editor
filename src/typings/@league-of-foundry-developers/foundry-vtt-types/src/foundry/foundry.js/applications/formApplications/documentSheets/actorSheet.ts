
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/foundry.js/applications/formApplications/documentSheets/actorSheet.d.ts",
      "import { ConfiguredDocumentClass, ToObjectFalseType } from '../../../../../types/helperTypes';\nimport { DropData as ClientDocumentMixinDropData } from '../../../clientDocumentMixin';\n\ndeclare global {\n  /**\n   * The Application responsible for displaying and editing a single Actor document.\n   * This Application is responsible for rendering an actor's attributes and allowing the actor to be edited.\n   * @param actor   - The Actor instance being displayed within the sheet.\n   * @param options - Additional application configuration options.\n   *\n   * @typeParam Options - the type of the options object\n   * @typeParam Data    - The data structure used to render the handlebars template.\n   */\n  class ActorSheet<\n    Options extends ActorSheet.Options = ActorSheet.Options,\n    Data extends object = ActorSheet.Data<Options>\n  > extends DocumentSheet<Options, Data, InstanceType<ConfiguredDocumentClass<typeof Actor>>> {\n    /**\n     * @defaultValue\n     * ```typescript\n     * foundry.utils.mergeObject(super.defaultOptions, {\n     *   height: 720,\n     *   width: 800,\n     *   template: 'templates/sheets/actor-sheet.html',\n     *   closeOnSubmit: false,\n     *   submitOnClose: true,\n     *   submitOnChange: true,\n     *   resizable: true,\n     *   baseApplication: 'ActorSheet',\n     *   dragDrop: [{ dragSelector: '.item-list .item', dropSelector: null }],\n     *   token: null,\n     * });\n     * ```\n     */\n    static get defaultOptions(): ActorSheet.Options;\n\n    /** @override */\n    get id(): string;\n\n    /** @override */\n    get title(): string;\n\n    /**\n     * A convenience reference to the Actor entity\n     */\n    get actor(): this['object'];\n\n    /**\n     * If this Actor Sheet represents a synthetic Token actor, reference the active Token\n     */\n    get token(): Exclude<this['object']['token'] | this['options']['token'], undefined> | null;\n\n    /** @override */\n    close(options?: FormApplication.CloseOptions): Promise<void>;\n\n    /**\n     * @override\n     */\n    getData(options?: Partial<Options>): Data | Promise<Data>;\n\n    /** @override */\n    protected _getHeaderButtons(): Application.HeaderButton[];\n\n    /** @override */\n    protected _getSubmitData(updateData?: object | null): Partial<Record<string, unknown>>;\n\n    /** @override */\n    activateListeners(html: JQuery): void;\n\n    /**\n     * Handle requests to configure the Token for the Actor\n     */\n    protected _onConfigureToken(event: JQuery.ClickEvent): void;\n\n    /**\n     * Handle requests to configure the default sheet used by this Actor\n     */\n    protected _onConfigureSheet(event: JQuery.ClickEvent): void;\n\n    /**\n     * Handle changing the actor profile image by opening a FilePicker\n     */\n    protected _onEditImage(event: JQuery.ClickEvent): ReturnType<FilePicker['browse']>;\n\n    /** @override */\n    protected _canDragStart(selector: string): boolean;\n\n    /** @override */\n    protected _canDragDrop(selector: string): boolean;\n\n    /** @override */\n    protected _onDragStart(event: DragEvent): void;\n\n    /** @override */\n    protected _onDrop(event: DragEvent): Promise<boolean | undefined> | unknown;\n\n    /**\n     * Handle the dropping of ActiveEffect data onto an Actor Sheet\n     * @param event - The concluding DragEvent which contains drop data\n     * @param data  - The data transfer extracted from the event\n     * @returns A data object which describes the result of the drop\n     * @remarks This is intentionally typed to return `Promise<unknown>` to\n     * allow overriding methods to return whatever they want. The return type is\n     * not meant to be used aside from being awaited.\n     */\n    protected _onDropActiveEffect(event: DragEvent, data: ActorSheet.DropData.ActiveEffect): Promise<unknown>;\n\n    /**\n     * Handle dropping of an item reference or item data onto an Actor Sheet\n     * @param event - The concluding DragEvent which contains drop data\n     * @param data  - The data transfer extracted from the event\n     * @returns A data object which describes the result of the drop\n     * @remarks This is intentionally typed to return `Promise<unknown>` to\n     * allow overriding methods to return whatever they want. The return type is\n     * not meant to be used aside from being awaited.\n     */\n    protected _onDropActor(event: DragEvent, data: ActorSheet.DropData.Actor): Promise<unknown>;\n\n    /**\n     * Handle dropping of an item reference or item data onto an Actor Sheet\n     * @param event - The concluding DragEvent which contains drop data\n     * @param data  - The data transfer extracted from the event\n     * @remarks This is intentionally typed to return `Promise<unknown>` to\n     * allow overriding methods to return whatever they want. The return type is\n     * not meant to be used aside from being awaited.\n     */\n    protected _onDropItem(event: DragEvent, data: ActorSheet.DropData.Item): Promise<unknown>;\n\n    /**\n     * Handle dropping of a Folder on an Actor Sheet.\n     * Currently supports dropping a Folder of Items to create all items as owned items.\n     * @param event - The concluding DragEvent which contains drop data\n     * @param data  - The data transfer extracted from the event\n     * @remarks This is intentionally typed to return `Promise<unknown>` to\n     * allow overriding methods to return whatever they want. The return type is\n     * not meant to be used aside from being awaited.\n     */\n    protected _onDropFolder(event: DragEvent, data: ActorSheet.DropData.Folder): Promise<unknown>;\n\n    /**\n     * Handle the final creation of dropped Item data on the Actor.\n     * This method is factored out to allow downstream classes the opportunity to override item creation behavior.\n     * @param itemData - The item data requested for creation\n     */\n    protected _onDropItemCreate(\n      itemData: foundry.data.ItemData['_source'][] | foundry.data.ItemData['_source']\n    ): Promise<InstanceType<ConfiguredDocumentClass<typeof Item>>[]>;\n\n    /**\n     * Handle a drop event for an existing embedded Item to sort that Item relative to its siblings\n     */\n    protected _onSortItem(\n      event: DragEvent,\n      itemData: foundry.data.ItemData['_source']\n    ): undefined | Promise<InstanceType<ConfiguredDocumentClass<typeof Item>>[]>;\n  }\n\n  namespace ActorSheet {\n    /**\n     * @typeParam Options - the type of the options object\n     */\n    interface Data<Options extends ActorSheet.Options = ActorSheet.Options>\n      extends DocumentSheet.Data<InstanceType<ConfiguredDocumentClass<typeof Actor>>, Options> {\n      actor: this['document'];\n      items: ToObjectFalseType<foundry.data.ActorData>['items'];\n      effects: ToObjectFalseType<foundry.data.ActorData>['effects'];\n    }\n\n    type DropData =\n      | DropData.ActiveEffect\n      | DropData.Actor\n      | DropData.Item\n      | DropData.Folder\n      | (Partial<Record<string, unknown>> & { type: string });\n\n    namespace DropData {\n      interface ActiveEffect {\n        type: 'ActiveEffect';\n        tokenId?: string;\n        actorId?: string;\n        data: foundry.data.ActiveEffectData['_source'];\n      }\n\n      interface Actor {\n        type: 'Actor';\n      }\n\n      type Item = ClientDocumentMixinDropData<InstanceType<ConfiguredDocumentClass<typeof Item>>> & {\n        type: 'Item';\n      };\n\n      interface Folder {\n        type: 'Folder';\n        documentName: foundry.CONST.FolderEntityTypes;\n        id: string;\n      }\n    }\n\n    interface Options extends DocumentSheet.Options {\n      token?: InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BaseToken>> | null;\n    }\n  }\n}\n"
    ]
  