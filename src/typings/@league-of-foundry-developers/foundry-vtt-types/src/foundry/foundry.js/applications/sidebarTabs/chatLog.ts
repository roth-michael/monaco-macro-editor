
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/foundry.js/applications/sidebarTabs/chatLog.d.ts",
      "import { ConfiguredDocumentClass, ConstructorDataType } from '../../../../types/helperTypes';\n\ndeclare global {\n  /**\n   * The sidebar directory which organizes and displays world-level ChatMessage documents.\n   * @see {@link Sidebar}\n   */\n  class ChatLog extends SidebarTab<ChatLog.Options> {\n    constructor(options?: Partial<ChatLog.Options>);\n\n    /**\n     * Track any pending text which the user has submitted in the chat log textarea\n     * @internal\n     */\n    protected _pendingText: string;\n\n    /**\n     * Track the history of the past 5 sent messages which can be accessed using the arrow keys\n     * @defaultValue `[]`\n     * @internal\n     */\n    protected _sentMessages: string[];\n\n    /**\n     * Track which remembered message is being currently displayed to cycle properly\n     * @defaultValue `-1`\n     * @internal\n     */\n    protected _sentMessageIndex: number;\n\n    /**\n     * Track the time when the last message was sent to avoid flooding notifications\n     * @defaultValue `0`\n     * @internal\n     */\n    protected _lastMessageTime: number;\n\n    /**\n     * Track the id of the last message displayed in the log\n     * @defaultValue `null`\n     * @internal\n     */\n    protected _lastId: string | null;\n\n    /**\n     * Track the last received message which included the user as a whisper recipient.\n     * @defaultValue `null`\n     * @internal\n     */\n    protected _lastWhisper: InstanceType<ConfiguredDocumentClass<typeof ChatMessage>> | null;\n\n    /**\n     * A reference to the chat text entry bound key method\n     * @defaultValue `null`\n     * @internal\n     */\n    _onChatKeyDownBinding: ((event: JQuery.KeyDownEvent) => void) | null;\n\n    /** @override */\n    static get defaultOptions(): ChatLog.Options;\n\n    /**\n     * A reference to the Messages collection that the chat log displays\n     */\n    get collection(): Messages;\n\n    /** @override */\n    getData(options?: Partial<ChatLog.Options>): ChatLog.Data;\n\n    /** @override */\n    protected _render(force?: boolean, options?: Application.RenderOptions<ChatLog.Options>): Promise<void>;\n\n    /**\n     * @override\n     * @internal\n     */\n    protected _renderInner(data: ChatLog.Data): Promise<JQuery>;\n\n    /**\n     * Render a batch of additional messages, prepending them to the top of the log\n     * @param html - The rendered jQuery HTML object\n     * @param size - The batch size to include\n     *\n     * @internal\n     */\n    protected _renderBatch(html: JQuery, size: number): Promise<void>;\n\n    /**\n     * Delete a single message from the chat log\n     * @param messageId - The ChatMessage entity to remove from the log\n     * @param deleteAll - Is this part of a flush operation to delete all messages?\n     *                    (default: `false`)\n     */\n    deleteMessage(messageId: string, { deleteAll }?: { deleteAll?: boolean }): void;\n\n    /**\n     * Trigger a notification that alerts the user visually and audibly that a new chat log message has been posted\n     */\n    notify(message: InstanceType<ConfiguredDocumentClass<typeof ChatMessage>>): void;\n\n    /**\n     * Parse a chat string to identify the chat command (if any) which was used\n     * @param message - The message to match\n     * @returns The identified command and regex match\n     * @remarks The returned RegExpMatchArray or string Array has the entire match as its first value, then the match for\n     *          the slash command (or an empty string) and as last element the flavor or message text. The whisper match\n     *          is an exception: Its third value is the target user name (optionally in brackets) and the fourth value is\n     *          the message text.\n     */\n    static parse<S extends string>(message: S): [ChatLog.Command, RegExpMatchArray] | ['none', [S, '', S]];\n\n    /**\n     * Post a single chat message to the log\n     * @param message - A ChatMessage entity instance to post to the log\n     * @param notify  - Trigger a notification which shows the log as having a new unread message\n     *                  (default: `false`)\n     * @returns A Promise which resolves once the message is posted\n     */\n    postOne(message: InstanceType<ConfiguredDocumentClass<typeof ChatMessage>>, notify?: boolean): Promise<void>;\n\n    /**\n     * Scroll the chat log to the bottom\n     * @param options - (default: `{}`)\n     */\n    protected scrollBottom(options?: ChatLog.ScrollBottomOptions): void;\n\n    /**\n     * Update the content of a previously posted message after its data has been replaced\n     * @param message - The ChatMessage instance to update\n     * @param notify  - Trigger a notification which shows the log as having a new unread message\n     *                  (default: `false`)\n     */\n    updateMessage(message: InstanceType<ConfiguredDocumentClass<typeof ChatMessage>>, notify?: boolean): void;\n\n    /**\n     * Update the displayed timestamps for every displayed message in the chat log.\n     * Timestamps are displayed in a humanized \"timesince\" format.\n     */\n    updateTimestamps(): void;\n\n    /** @override */\n    activateListeners(html: JQuery): void;\n\n    /**\n     * Prepare the data object of chat message data depending on the type of message being posted\n     * @param message - The original string of the message content\n     * @returns A Promise resolving to the prepared chat data object\n     */\n    protected processMessage(\n      message: string\n    ): Promise<InstanceType<ConfiguredDocumentClass<typeof ChatMessage>> | undefined | void>;\n\n    /**\n     * Process messages which are posted using a dice-roll command\n     * @param command       - The chat command type\n     * @param match         - The matched RegExp expressions\n     * @param chatData      - The initial chat data\n     * @param createOptions - Options used to create the message\n     *                        (unused)\n     * @internal\n     */\n    protected _processDiceCommand(\n      command: string,\n      match: RegExpMatchArray,\n      chatData: ConstructorDataType<foundry.data.ChatMessageData>,\n      createOptions: DocumentModificationContext\n    ): void;\n\n    /**\n     * Process messages which are posted using a chat whisper command\n     * @param command       - The chat command type\n     * @param match         - The matched RegExp expressions\n     * @param chatData      - The initial chat data\n     * @param createOptions - Options used to create the message\n     * @throws If the user does not have the permission to whisper to other players\n     * @internal\n     */\n    protected _processWhisperCommand(\n      command: string,\n      match: RegExpMatchArray,\n      chatData: ConstructorDataType<foundry.data.ChatMessageData>,\n      createOptions: DocumentModificationContext\n    ): void;\n\n    /**\n     * Process messages which are posted using a chat whisper command\n     * @param command       - The chat command type\n     * @param match         - The matched RegExp expressions\n     * @param chatData      - The initial chat data\n     * @param createOptions - Options used to create the message\n     * @internal\n     */\n    protected _processChatCommand(\n      command: string,\n      match: RegExpMatchArray,\n      chatData: ConstructorDataType<foundry.data.ChatMessageData>,\n      createOptions: DocumentModificationContext\n    ): void;\n\n    /**\n     * Add a sent message to an array of remembered messages to be re-sent if the user pages up with the up arrow key\n     * @param message - The message text being remembered\n     * @internal\n     */\n    protected _remember(message: string): void;\n\n    /**\n     * Recall a previously sent message by incrementing up (1) or down (-1) through the sent messages array\n     * @param direction - The direction to recall, positive for older, negative for more recent\n     * @returns The recalled message, or an empty string\n     * @internal\n     */\n    protected _recall(direction: number): string;\n\n    /**\n     * Attach context menu options to messages in the chat log.\n     * @param html - The HTML element to which context options are attached\n     */\n    protected _contextMenu(html: JQuery): void;\n\n    /**\n     * Get the ChatLog entry context options\n     * @returns The sidebar entry context options\n     * @internal\n     */\n    protected _getEntryContextOptions(): ContextMenuEntry[];\n\n    /**\n     * Handle keydown events in the chat entry textarea\n     * @internal\n     */\n    protected _onChatKeyDown(event: JQuery.KeyDownEvent): void;\n\n    /**\n     * Handle setting the preferred roll mode\n     * @internal\n     */\n    protected _onChangeRollMode(event: JQuery.ChangeEvent): void;\n\n    /**\n     * Handle single message deletion workflow\n     * @internal\n     */\n    protected _onDeleteMessage(\n      event: JQuery.ClickEvent\n    ): Promise<InstanceType<ConfiguredDocumentClass<typeof ChatMessage>> | undefined>;\n\n    /**\n     * Handle clicking of dice tooltip buttons\n     * @internal\n     */\n    protected _onDiceRollClick(event: JQuery.ClickEvent): void;\n\n    /**\n     * Handle click events to export the chat log\n     * @internal\n     */\n    protected _onExportLog(event: JQuery.ClickEvent): void;\n\n    /**\n     * Handle click events to flush the chat log\n     * @internal\n     */\n    protected _onFlushLog(event: JQuery.ClickEvent): void;\n\n    /**\n     * Handle scroll events within the chat log container\n     * @param event - The initial scroll event\n     * @internal\n     */\n    protected _onScrollLog(event: JQuery.ScrollEvent): void;\n\n    /**\n     * Update roll mode select dropdowns when the setting is changed\n     * @param mode - The new roll mode setting\n     * @internal\n     */\n    protected static _setRollMode(mode: foundry.CONST.DiceRollMode): void;\n  }\n\n  namespace ChatLog {\n    type Command =\n      | 'roll'\n      | 'gmroll'\n      | 'blindroll'\n      | 'selfroll'\n      | 'whisper'\n      | 'reply'\n      | 'gm'\n      | 'players'\n      | 'ic'\n      | 'emote'\n      | 'ooc'\n      | 'invalid'\n      | 'none';\n\n    interface Data {\n      user: InstanceType<ConfiguredDocumentClass<typeof User>>;\n      rollMode: foundry.CONST.DiceRollMode;\n      rollModes: typeof CONFIG['Dice']['rollModes'];\n      isStream: boolean;\n    }\n\n    interface Options extends Application.Options {\n      /**\n       * @defaultValue `'chat'`\n       */\n      id: string;\n\n      /**\n       * @defaultValue `'templates/sidebar/chat-log.html'`\n       */\n      template: string;\n\n      title: string;\n\n      scrollContainer: null;\n\n      /**\n       * @defaultValue `false`\n       */\n      stream: boolean;\n    }\n\n    interface ScrollBottomOptions {\n      /**\n       * If a popout exists, scroll it too\n       * @defaultValue `undefined`\n       */\n      popout?: boolean;\n    }\n  }\n}\n"
    ]
  