
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/foundry.js/applications/formApplications/tileConfig.d.ts",
      "/**\n * Tile Config Sheet\n * @typeParam P - the type of the options object\n */\ndeclare class TileConfig<P extends TileConfig.Options = TileConfig.Options> extends FormApplication<\n  P,\n  TileConfig.Data,\n  Tile\n> {\n  /**\n   * @param tile    - The Tile object being configured\n   * @param options - Additional application rendering options\n   */\n  constructor(tile: Tile, options?: Partial<P>);\n\n  /**\n   * @override\n   * @defaultValue\n   * ```typescript\n   * mergeObject(super.defaultOptions, {\n   *   id: \"tile-config\",\n   *   classes: [\"sheet\", \"tile-sheet\"],\n   *   title: \"Tile Configuration\",\n   *   template: \"templates/scene/tile-config.html\",\n   *   width: 400,\n   *   submitOnChange: true\n   * });\n   * ```\n   */\n  static get defaultOptions(): TileConfig.Options;\n\n  /**\n   * @param options - (unused)\n   * @override\n   */\n  getData(options?: Partial<P>): TileConfig.Data;\n\n  /** @override */\n  protected _onChangeInput(event: JQuery.ChangeEvent): void;\n\n  /**\n   * @param event - (unused)\n   * @override\n   */\n  protected _updateObject(event: Event, formData: TileConfig.FormData): Promise<Tile>;\n\n  /** @override */\n  close(options: Application.CloseOptions): Promise<void>;\n}\n\ndeclare namespace TileConfig {\n  interface Data {\n    object: foundry.utils.Duplicated<TileConfig['object']['data']>;\n    options: TileConfig['options'];\n    submitText: 'Create' | 'Update';\n  }\n\n  interface FormData {\n    height: Tile.Data['height'] | null;\n    img: Tile.Data['img'];\n    rotation: Tile.Data['rotation'] | null;\n    width: Tile.Data['width'] | null;\n    x: Tile.Data['x'] | null;\n    y: Tile.Data['y'] | null;\n  }\n\n  interface Options extends FormApplication.Options {\n    /**\n     * Configure a preview version of a tile which is not yet saved\n     */\n    preview?: boolean;\n  }\n}\n"
    ]
  