
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/common/documents.mjs/baseItem.d.ts",
      "import * as data from '../data/data.mjs';\nimport { Document } from '../abstract/module.mjs';\nimport { DocumentMetadata } from '../abstract/document.mjs';\nimport { BaseActor } from './baseActor';\nimport { BaseActiveEffect } from './baseActiveEffect';\nimport { BaseUser } from './baseUser';\nimport { ConfiguredDocumentClass } from '../../../types/helperTypes';\n\n/**\n * The base Item model definition which defines common behavior of an Item document between both client and server.\n */\nexport declare class BaseItem extends Document<data.ItemData, InstanceType<ConfiguredDocumentClass<typeof BaseActor>>> {\n  static get schema(): typeof data.ItemData;\n\n  static get metadata(): Merge<\n    DocumentMetadata,\n    {\n      name: 'Item';\n      collection: 'items';\n      label: 'DOCUMENT.Item';\n      embedded: {\n        ActiveEffect: typeof BaseActiveEffect;\n      };\n      isPrimary: true;\n      hasSystemData: true;\n      types: string[];\n      permissions: {\n        create: 'ITEM_CREATE';\n      };\n    }\n  >;\n\n  /**\n   * A reference to the Collection of ActiveEffect instances in the Item document, indexed by _id.\n   */\n  get effects(): this['data']['effects'];\n\n  canUserModify(user: BaseUser, action: 'create' | 'update' | 'delete', data?: object): boolean;\n\n  testUserPermission(\n    user: BaseUser,\n    permission: keyof typeof foundry.CONST.ENTITY_PERMISSIONS | foundry.CONST.EntityPermission,\n    { exact }: { exact?: boolean }\n  ): boolean;\n\n  /**\n   * Migrate the system data object to conform to data model defined by the current system version.\n   * @see mergeObject\n   * @param options - Options which customize how the system data is migrated.\n   * @returns The migrated system data object, not yet saved to the database\n   */\n  migrateSystemData(options?: MigrateSystemDataOptions): object;\n}\n\ninterface MigrateSystemDataOptions {\n  /**\n   * Retain keys which exist in the current data, but not the model\n   * @defaultValue `false`\n   */\n  insertKeys?: boolean;\n\n  /**\n   * Retain inner-object values which exist in the current data, but not the model\n   * @defaultValue `true`\n   */\n  insertValues?: boolean;\n\n  /**\n   * Require that data types match the model exactly to be retained\n   * @defaultValue `false`\n   */\n  enforceTypes?: boolean;\n}\n"
    ]
  