
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/foundry.js/avClient.d.ts",
      "/**\n * An interface for an Audio/Video client which is extended to provide broadcasting functionality.\n */\ndeclare abstract class AVClient {\n  /**\n   * @param master   - The master orchestration instance\n   * @param settings - The audio/video settings being used\n   */\n  constructor(master: AVMaster, settings: AVSettings);\n\n  /**\n   * The master orchestration instance\n   */\n  master: AVMaster;\n\n  /**\n   * The active audio/video settings being used\n   */\n  settings: AVSettings;\n\n  /**\n   * Is audio broadcasting push-to-talk enabled?\n   */\n  get isVoicePTT(): boolean;\n\n  /**\n   * Is audio broadcasting always enabled?\n   */\n  get isVoiceAlways(): boolean;\n\n  /**\n   * Is audio broadcasting voice-activation enabled?\n   */\n  get isVoiceActivated(): boolean;\n\n  /**\n   * Is the current user muted?\n   */\n  get isMuted(): boolean;\n\n  /**\n   * One-time initialization actions that should be performed for this client implementation.\n   * This will be called only once when the Game object is first set-up.\n   */\n  abstract initialize(): Promise<void>;\n\n  /**\n   * Connect to any servers or services needed in order to provide audio/video functionality.\n   * Any parameters needed in order to establish the connection should be drawn from the settings object.\n   * This function should return a boolean for whether the connection attempt was successful.\n   * @returns Was the connection attempt successful?\n   */\n  abstract connect(): Promise<boolean>;\n\n  /**\n   * Disconnect from any servers or services which are used to provide audio/video functionality.\n   * This function should return a boolean for whether a valid disconnection occurred.\n   * @returns Did a disconnection occur?\n   */\n  abstract disconnect(): Promise<boolean>;\n\n  /**\n   * Provide an Object of available audio sources which can be used by this implementation.\n   * Each object key should be a device id and the key should be a human-readable label.\n   */\n  getAudioSinks(): Promise<Record<string, string>>;\n\n  /**\n   * Provide an Object of available audio sources which can be used by this implementation.\n   * Each object key should be a device id and the key should be a human-readable label.\n   */\n  getAudioSources(): Promise<Record<string, string>>;\n\n  /**\n   * Provide an Object of available video sources which can be used by this implementation.\n   * Each object key should be a device id and the key should be a human-readable label.\n   */\n  getVideoSources(): Promise<Record<string, string>>;\n\n  /**\n   * Obtain a mapping of available device sources for a given type.\n   * @param kind - The type of device source being requested\n   * @internal\n   */\n  _getSourcesOfType(kind: MediaDeviceKind): Promise<Record<string, string>>;\n\n  /**\n   * Return an array of Foundry User IDs which are currently connected to A/V.\n   * The current user should also be included as a connected user in addition to all peers.\n   * @returns The connected User IDs\n   */\n  abstract getConnectedUsers(): string[];\n\n  /**\n   * Provide a MediaStream instance for a given user ID\n   * @param userId - The User id\n   * @returns The MediaStream for the user, or null if the user does not have one\n   */\n  abstract getMediaStreamForUser(userId: string): MediaStream | null | undefined;\n\n  /**\n   * Is outbound audio enabled for the current user?\n   */\n  abstract isAudioEnabled(): boolean;\n\n  /**\n   * Is outbound video enabled for the current user?\n   */\n  abstract isVideoEnabled(): boolean;\n\n  /**\n   * Set whether the outbound audio feed for the current game user is enabled.\n   * This method should be used when the user marks themselves as muted or if the gamemaster globally mutes them.\n   * @param enable - Whether the outbound audio track should be enabled (true) or disabled (false)\n   */\n  abstract toggleAudio(enable: boolean): void;\n\n  /**\n   * Set whether the outbound audio feed for the current game user is actively broadcasting.\n   * This can only be true if audio is enabled, but may be false if using push-to-talk or voice activation modes.\n   * @param broadcast - Whether outbound audio should be sent to connected peers or not?\n   */\n  abstract toggleBroadcast(broadcast: boolean): void;\n\n  /**\n   * Set whether the outbound video feed for the current game user is enabled.\n   * This method should be used when the user marks themselves as hidden or if the gamemaster globally hides them.\n   * @param enable - Whether the outbound audio track should be enabled (true) or disabled (false)\n   */\n  abstract toggleVideo(enable: boolean): void;\n\n  /**\n   * Set the Video Track for a given User ID to a provided VideoElement\n   * @param userId       - The User ID to set to the element\n   * @param videoElement - The HTMLVideoElement to which the video should be set\n   */\n  abstract setUserVideo(userId: string, videoElement: HTMLVideoElement): Promise<void>;\n\n  /**\n   * Handle changes to A/V configuration settings.\n   * @param changed - The settings which have changed\n   */\n  onSettingsChanged(changed: DeepPartial<AVSettings.Settings>): void;\n}\n"
    ]
  