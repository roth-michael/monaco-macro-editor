
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/foundry.js/applications/formApplications/documentSheet.d.ts",
      "import { ToObjectFalseType } from '../../../../types/helperTypes';\n\ndeclare global {\n  /**\n   * Extend the FormApplication pattern to incorporate specific logic for viewing or editing Document instances.\n   * See the FormApplication documentation for more complete description of this interface.\n   * @param object  - A Document instance which should be managed by this form.\n   * @param options - Optional configuration parameters for how the form behaves.\n   *                  (default: `{}`)\n   *\n   * @typeParam Options          - the type of the options object\n   * @typeParam Data             - The data structure used to render the handlebars template.\n   * @typeParam ConcreteDocument - the type of the Document which should be managed by this form sheet\n   */\n  abstract class DocumentSheet<\n    Options extends DocumentSheet.Options = DocumentSheet.Options,\n    Data extends object = DocumentSheet.Data,\n    ConcreteDocument extends foundry.abstract.Document<any, any> = Data extends DocumentSheet.Data<infer T>\n      ? T\n      : foundry.abstract.Document<any, any>\n  > extends FormApplication<Options, Data, ConcreteDocument> {\n    /**\n     * @defaultValue\n     * ```typescript\n     * foundry.utils.mergeObject(super.defaultOptions, {\n     *   classes: ['sheet'],\n     *   template: `templates/sheets/${this.name.toLowerCase()}.html`,\n     *   viewPermission: CONST.ENTITY_PERMISSIONS.LIMITED\n     * });\n     * ```\n     */\n    static get defaultOptions(): DocumentSheet.Options;\n\n    /**\n     * A semantic convenience reference to the Document instance which is the target object for this form.\n     */\n    get document(): ConcreteDocument;\n\n    /**\n     * @override\n     */\n    get id(): string;\n\n    /**\n     * @override\n     */\n    get isEditable(): boolean;\n\n    /**\n     * @override\n     */\n    get title(): string;\n\n    /**\n     * @override\n     */\n    close(options?: FormApplication.CloseOptions): Promise<void>;\n\n    /**\n     * @override\n     */\n    getData(options?: Partial<Options>): Data | Promise<Data>;\n\n    /**\n     * @override\n     */\n    render(force?: boolean, options?: Application.RenderOptions<Options>): this;\n\n    /**\n     * @override\n     */\n    protected _getHeaderButtons(): Application.HeaderButton[];\n\n    /**\n     * @param event - (unused)\n     * @override\n     */\n    protected _updateObject(event: Event, formData: object): Promise<ConcreteDocument | undefined>;\n\n    /**\n     * @deprecated since 0.8.0\n     */\n    get entity(): ConcreteDocument;\n  }\n\n  namespace DocumentSheet {\n    /**\n     * @typeParam ConcreteDocument - the type of the {@link foundry.abstract.Document} which should be managed by this form sheet\n     * @typeParam Options          - the type of the options object\n     */\n    interface Data<\n      ConcreteDocument extends foundry.abstract.Document<any, any> = foundry.abstract.Document<any, any>,\n      Options extends DocumentSheet.Options = DocumentSheet.Options\n    > {\n      cssClass: string;\n      editable: boolean;\n      document: ConcreteDocument;\n      data: ToObjectFalseType<ConcreteDocument>;\n      limited: boolean;\n      options: Options;\n      owner: boolean;\n      title: string;\n      readonly entity: this['data'];\n    }\n\n    interface Options extends FormApplication.Options {\n      /**\n       * @defaultValue `['sheet']`\n       */\n      classes: string[];\n\n      /**\n       * @defaultValue\n       * ```javascript\n       * `templates/sheets/${this.name.toLowerCase()}.html`\n       * ```\n       */\n      template: string;\n\n      /**\n       * @defaultValue {@link ENTITY_PERMISSIONS.LIMITED}\n       */\n      viewPermission: foundry.CONST.EntityPermission;\n    }\n  }\n}\n"
    ]
  