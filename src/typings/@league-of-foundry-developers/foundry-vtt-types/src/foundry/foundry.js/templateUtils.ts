
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/foundry.js/templateUtils.d.ts",
      "/**\n * Global template cache\n */\ndeclare let _templateCache: Record<string, Handlebars.TemplateDelegate>;\n\n/* -------------------------------------------- */\n/*  HTML Template Loading                       */\n/* -------------------------------------------- */\n\n/**\n * Get a template from the server by fetch request and caching the retrieved result\n * @param path - The web-accessible HTML template URL\n * @returns A Promise which resolves to the compiled Handlebars template\n */\ndeclare function getTemplate(path: string): Promise<Handlebars.TemplateDelegate>;\n\n/* -------------------------------------------- */\n\n/**\n * Load and cache a set of templates by providing an Array of paths\n * @param paths - An array of template file paths to load\n */\ndeclare function loadTemplates(paths: string[]): Promise<Handlebars.TemplateDelegate[]>;\n\n/* -------------------------------------------- */\n\n/**\n * Get and render a template using provided data and handle the returned HTML\n * Support asynchronous file template file loading with a client-side caching layer\n *\n * Allow resolution of prototype methods and properties since this all occurs within the safety of the client.\n * @see {@link https://handlebarsjs.com/api-reference/runtime-options.html#options-to-control-prototype-access}\n *\n * @param path - The file path to the target HTML template\n * @param data - A data object against which to compile the template\n *\n * @returns Returns the rendered HTML\n */\ndeclare function renderTemplate(path: string, data: object): Promise<string>;\n"
    ]
  