
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/foundry.js/applications/formApplications/documentSheets/sceneConfig.d.ts",
      "// TODO: Remove when updating this class!!!\n// eslint-disable-next-line\n// @ts-nocheck\n\n/**\n * A Scene configuration sheet\n * @see {@link Scene} The Scene Entity which is being configured\n */\ndeclare class SceneConfig extends DocumentSheet<DocumentSheet.Options, SceneConfig.Data, Scene> {\n  /**\n   * @override\n   * @defaultValue\n   * ```typescript\n   * mergeObject(super.defaultOptions, {\n   *   classes: [\"sheet\", \"scene-sheet\"],\n   *   template: \"templates/scene/config.html\",\n   *   width: 680,\n   *   height: \"auto\"\n   * });\n   * ```\n   */\n  static get defaultOptions(): typeof DocumentSheet['defaultOptions'];\n\n  /**\n   * @override\n   */\n  get id(): string;\n\n  /**\n   * @override\n   */\n  get title(): string;\n\n  /**\n   * @param options - (unused)\n   * @override\n   */\n  getData(options?: Partial<DocumentSheet.Options>): SceneConfig.Data;\n\n  /**\n   * Get an enumeration of the available grid types which can be applied to this Scene\n   */\n  protected static _getGridTypes(): Record<foundry.CONST.GridType, string>;\n\n  /**\n   * Get the available weather effect types which can be applied to this Scene\n   */\n  protected _getWeatherTypes(): Record<string, string>;\n\n  /**\n   * Get the alphabetized entities which can be chosen as a configuration for the scene\n   */\n  protected _getEntities(collection: EntityCollection): { _id: string; name: string }[];\n\n  /**\n   * @override\n   */\n  activateListeners(html: JQuery): void;\n\n  /**\n   * Capture the current Scene position and zoom level as the initial view in the Scene config\n   * @param event - The originating click event\n   */\n  protected _onCapturePosition(event: JQuery.ClickEvent): void;\n\n  /**\n   * @override\n   */\n  protected _onChangeRange(event: JQuery.ChangeEvent): void;\n\n  /**\n   * Handle click events to open the grid configuration application\n   * @param event - The originating click event\n   */\n  protected _onGridConfig(event: JQuery.ClickEvent): SceneConfig['minimize'];\n\n  /**\n   * @override\n   */\n  protected _updateObject(event: Event, formData: SceneConfig.FormData): Promise<Scene>;\n}\n\ndeclare namespace SceneConfig {\n  interface Data extends DocumentSheet.Data {\n    gridTypes: ReturnType<typeof SceneConfig['_getGridTypes']>;\n    weatherTypes: ReturnType<SceneConfig['_getWeatherTypes']>;\n    playlists: ReturnType<SceneConfig['_getEntities']>;\n    journals: ReturnType<SceneConfig['_getEntities']>;\n    hasGlobalThreshold: boolean;\n    document: DocumentSheet.Data['document'] & {\n      /**\n       * @defaultValue `0`\n       */\n      globalLightThreshold: number;\n    };\n  }\n\n  type FormData = {\n    backgroundColor: Scene.Data['backgroundColor'];\n    darkness: Scene.Data['darkness'];\n    fogExploration: Scene.Data['fogExploration'];\n    globalLight: Scene.Data['globalLight'];\n    globalLightThreshold: Scene.Data['globalLightThreshold'];\n    grid: GridConfig.FormData['grid'];\n    gridAlpha: Scene.Data['gridAlpha'];\n    gridColor: Scene.Data['gridColor'];\n    gridDistance: Scene.Data['gridDistance'] | null;\n    gridType: foundry.CONST.GridType;\n    gridUnits: Scene.Data['gridUnits'];\n    hasGlobalThreshold: boolean;\n    height: Scene.Data['height'] | null;\n    img: Scene.Data['img'];\n    'initial.scale': number | null;\n    'initial.x': number | null;\n    'initial.y': number | null;\n    journal: Scene.Data['journal'];\n    name: string;\n    navName: Scene.Data['navName'];\n    navigation: Scene.Data['navigation'];\n    padding: Scene.Data['padding'];\n    'permission.default': Scene.Data['permission'];\n    playlist: Scene.Data['playlist'];\n    shiftX: GridConfig.FormData['shiftX'];\n    shiftY: GridConfig.FormData['shiftY'];\n    tokenVision: Scene.Data['tokenVision'];\n    weather: Scene.Data['weather'];\n    width: Scene.Data['width'] | null;\n  };\n}\n"
    ]
  