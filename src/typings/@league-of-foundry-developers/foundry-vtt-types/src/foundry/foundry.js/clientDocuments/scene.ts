
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/foundry.js/clientDocuments/scene.d.ts",
      "import { ConfiguredDocumentClass, ConstructorDataType, PropertiesToSource } from '../../../types/helperTypes';\nimport { DocumentModificationOptions } from '../../common/abstract/document.mjs';\nimport { AmbientLightDataProperties } from '../../common/data/data.mjs/ambientLightData';\nimport { AmbientSoundDataProperties } from '../../common/data/data.mjs/ambientSoundData';\nimport { DrawingDataProperties } from '../../common/data/data.mjs/drawingData';\nimport { MeasuredTemplateDataProperties } from '../../common/data/data.mjs/measuredTemplateData';\nimport { NoteDataProperties } from '../../common/data/data.mjs/noteData';\nimport { TileDataProperties } from '../../common/data/data.mjs/tileData';\nimport { TokenDataProperties } from '../../common/data/data.mjs/tokenData';\nimport { WallDataProperties } from '../../common/data/data.mjs/wallData';\n\ndeclare global {\n  /**\n   * The client-side Scene document which extends the common BaseScene abstraction.\n   * Each Scene document contains SceneData which defines its data schema.\n   *\n   * @see {@link data.SceneData}              The Scene data schema\n   * @see {@link documents.Scenes}            The world-level collection of Scene documents\n   * @see {@link applications.SceneConfig}    The Scene configuration application\n   *\n   */\n  class Scene extends ClientDocumentMixin(foundry.documents.BaseScene) {\n    /**\n     * @param data - Initial data provided to construct the Scene document\n     */\n    constructor(\n      data: ConstructorParameters<typeof foundry.documents.BaseScene>[0],\n      context?: ConstructorParameters<typeof foundry.documents.BaseScene>[1]\n    );\n\n    /**\n     * Determine the canvas dimensions this Scene would occupy, if rendered\n     * @defaultValue `{}`\n     */\n    dimensions: ReturnType<typeof Canvas.getDimensions> | {};\n\n    /**\n     * Track whether the scene is the active view\n     */\n    protected _view: this['data']['active'];\n\n    /**\n     * Track the viewed position of each scene (while in memory only, not persisted)\n     * When switching back to a previously viewed scene, we can automatically pan to the previous position.\n     * @defaultValue `{}`\n     * @remarks This is intentionally public because it is used in Canvas._initializeCanvasPosition() and Canvas.pan()\n     */\n    _viewPosition: { x: number; y: number; scale: number } | {};\n\n    /**\n     * A convenience accessor for whether the Scene is currently active\n     */\n    get active(): this['data']['active'];\n\n    /**\n     * A convenience accessor for the background image of the Scene\n     */\n    get img(): this['data']['img'];\n\n    /**\n     * A convenience accessor for whether the Scene is currently viewed\n     */\n    get isView(): boolean;\n\n    /**\n     * A reference to the JournalEntry entity associated with this Scene, or null\n     */\n    get journal(): InstanceType<ConfiguredDocumentClass<typeof JournalEntry>> | null;\n\n    /**\n     * A reference to the Playlist entity for this Scene, or null\n     */\n    get playlist(): InstanceType<ConfiguredDocumentClass<typeof Playlist>> | null;\n\n    /**\n     * A reference to the PlaylistSound document which should automatically play for this Scene, if any\n     */\n    get playlistSound(): InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BasePlaylistSound>> | null;\n\n    /**\n     * Set this scene as currently active\n     * @returns A Promise which resolves to the current scene once it has been successfully activated\n     */\n    activate(): Promise<this | undefined>;\n\n    /**\n     * Set this scene as the current view\n     */\n    view(): Promise<this | undefined>;\n\n    /**\n     * @override\n     * @param createData - (default: `{}`)\n     * @param options    - (default: `{}`)\n     */\n    clone(\n      createData?: DeepPartial<\n        | ConstructorDataType<foundry.data.SceneData>\n        | (ConstructorDataType<foundry.data.SceneData> & Record<string, unknown>)\n      >,\n      options?: { save?: boolean; keepId?: boolean }\n    ): TemporaryDocument<this> | Promise<TemporaryDocument<this | undefined>>;\n\n    /** @override */\n    prepareBaseData(): void;\n\n    /** @override */\n    protected _preCreate(\n      data: ConstructorDataType<foundry.data.SceneData>,\n      options: DocumentModificationOptions,\n      user: foundry.documents.BaseUser\n    ): Promise<void>;\n\n    /** @override */\n    protected _onCreate(\n      data: foundry.data.SceneData['_source'],\n      options: DocumentModificationOptions,\n      userId: string\n    ): void;\n\n    /** @override */\n    protected _preUpdate(\n      changed: DeepPartial<ConstructorDataType<foundry.data.SceneData>>,\n      options: DocumentModificationOptions,\n      user: foundry.documents.BaseUser\n    ): Promise<void>;\n\n    /** @override */\n    protected _onUpdate(\n      changed: DeepPartial<foundry.data.SceneData['_source']> & Record<string, unknown>,\n      options: DocumentModificationOptions,\n      userId: string\n    ): void;\n\n    /** @override */\n    protected _preDelete(options: DocumentModificationOptions, user: foundry.documents.BaseUser): Promise<void>;\n\n    /** @override */\n    protected _onDelete(options: DocumentModificationOptions, userId: string): void;\n\n    /**\n     * Handle Scene activation workflow if the active state is changed to true\n     * @param active - Is the scene now active?\n     */\n    protected _onActivate(active: boolean): ReturnType<this['view']> | ReturnType<Canvas['draw']> | void;\n\n    /** @override */\n    _preCreateEmbeddedDocuments(\n      embeddedName: string,\n      result: ConstructorDataType<foundry.data.DrawingData>[],\n      options: DocumentModificationOptions,\n      userId: string\n    ): void;\n    _preCreateEmbeddedDocuments(\n      embeddedName: string,\n      result: ConstructorDataType<foundry.data.TokenData>[],\n      options: DocumentModificationOptions,\n      userId: string\n    ): void;\n    _preCreateEmbeddedDocuments(\n      embeddedName: string,\n      result: ConstructorDataType<foundry.data.AmbientLightData>[],\n      options: DocumentModificationOptions,\n      userId: string\n    ): void;\n    _preCreateEmbeddedDocuments(\n      embeddedName: string,\n      result: ConstructorDataType<foundry.data.NoteData>[],\n      options: DocumentModificationOptions,\n      userId: string\n    ): void;\n    _preCreateEmbeddedDocuments(\n      embeddedName: string,\n      result: ConstructorDataType<foundry.data.AmbientSoundData>[],\n      options: DocumentModificationOptions,\n      userId: string\n    ): void;\n    _preCreateEmbeddedDocuments(\n      embeddedName: string,\n      result: ConstructorDataType<foundry.data.MeasuredTemplateData>[],\n      options: DocumentModificationOptions,\n      userId: string\n    ): void;\n    _preCreateEmbeddedDocuments(\n      embeddedName: string,\n      result: ConstructorDataType<foundry.data.TileData>[],\n      options: DocumentModificationOptions,\n      userId: string\n    ): void;\n    _preCreateEmbeddedDocuments(\n      embeddedName: string,\n      result: ConstructorDataType<foundry.data.WallData>[],\n      options: DocumentModificationOptions,\n      userId: string\n    ): void;\n\n    /** @override */\n    _onCreateEmbeddedDocuments(\n      embeddedName: string,\n      documents: InstanceType<ConfiguredDocumentClass<typeof DrawingDocument>>[],\n      result: DeepPartial<PropertiesToSource<DrawingDataProperties>>[],\n      options: DocumentModificationContext,\n      userId: string\n    ): void;\n    _onCreateEmbeddedDocuments(\n      embeddedName: string,\n      documents: InstanceType<ConfiguredDocumentClass<typeof TokenDocument>>[],\n      result: DeepPartial<PropertiesToSource<TokenDataProperties>>[],\n      options: DocumentModificationContext,\n      userId: string\n    ): void;\n    _onCreateEmbeddedDocuments(\n      embeddedName: string,\n      documents: InstanceType<ConfiguredDocumentClass<typeof AmbientLightDocument>>[],\n      result: DeepPartial<PropertiesToSource<AmbientLightDataProperties>>[],\n      options: DocumentModificationContext,\n      userId: string\n    ): void;\n    _onCreateEmbeddedDocuments(\n      embeddedName: string,\n      documents: InstanceType<ConfiguredDocumentClass<typeof NoteDocument>>[],\n      result: DeepPartial<PropertiesToSource<NoteDataProperties>>[],\n      options: DocumentModificationContext,\n      userId: string\n    ): void;\n    _onCreateEmbeddedDocuments(\n      embeddedName: string,\n      documents: InstanceType<ConfiguredDocumentClass<typeof AmbientSoundDocument>>[],\n      result: DeepPartial<PropertiesToSource<AmbientSoundDataProperties>>[],\n      options: DocumentModificationContext,\n      userId: string\n    ): void;\n    _onCreateEmbeddedDocuments(\n      embeddedName: string,\n      documents: InstanceType<ConfiguredDocumentClass<typeof MeasuredTemplateDocument>>[],\n      result: DeepPartial<PropertiesToSource<MeasuredTemplateDataProperties>>[],\n      options: DocumentModificationContext,\n      userId: string\n    ): void;\n    _onCreateEmbeddedDocuments(\n      embeddedName: string,\n      documents: InstanceType<ConfiguredDocumentClass<typeof TileDocument>>[],\n      result: DeepPartial<PropertiesToSource<TileDataProperties>>[],\n      options: DocumentModificationContext,\n      userId: string\n    ): void;\n    _onCreateEmbeddedDocuments(\n      embeddedName: string,\n      documents: InstanceType<ConfiguredDocumentClass<typeof WallDocument>>[],\n      result: DeepPartial<PropertiesToSource<WallDataProperties>>[],\n      options: DocumentModificationContext,\n      userId: string\n    ): void;\n\n    /** @override */\n    _preUpdateEmbeddedDocuments(\n      embeddedName: string,\n      result: DeepPartial<PropertiesToSource<DrawingDataProperties>>[],\n      options: DocumentModificationContext,\n      userId: string\n    ): void;\n    _preUpdateEmbeddedDocuments(\n      embeddedName: string,\n      result: DeepPartial<PropertiesToSource<TokenDataProperties>>[],\n      options: DocumentModificationContext,\n      userId: string\n    ): void;\n    _preUpdateEmbeddedDocuments(\n      embeddedName: string,\n      result: DeepPartial<PropertiesToSource<AmbientLightDataProperties>>[],\n      options: DocumentModificationContext,\n      userId: string\n    ): void;\n    _preUpdateEmbeddedDocuments(\n      embeddedName: string,\n      result: DeepPartial<PropertiesToSource<NoteDataProperties>>[],\n      options: DocumentModificationContext,\n      userId: string\n    ): void;\n    _preUpdateEmbeddedDocuments(\n      embeddedName: string,\n      result: DeepPartial<PropertiesToSource<AmbientSoundDataProperties>>[],\n      options: DocumentModificationContext,\n      userId: string\n    ): void;\n    _preUpdateEmbeddedDocuments(\n      embeddedName: string,\n      result: DeepPartial<PropertiesToSource<MeasuredTemplateDataProperties>>[],\n      options: DocumentModificationContext,\n      userId: string\n    ): void;\n    _preUpdateEmbeddedDocuments(\n      embeddedName: string,\n      result: DeepPartial<PropertiesToSource<TileDataProperties>>[],\n      options: DocumentModificationContext,\n      userId: string\n    ): void;\n    _preUpdateEmbeddedDocuments(\n      embeddedName: string,\n      result: DeepPartial<PropertiesToSource<WallDataProperties>>[],\n      options: DocumentModificationContext,\n      userId: string\n    ): void;\n\n    /** @override */\n    _onUpdateEmbeddedDocuments(\n      embeddedName: string,\n      documents: InstanceType<ConfiguredDocumentClass<typeof DrawingDocument>>[],\n      result: DeepPartial<PropertiesToSource<DrawingDataProperties>>[],\n      options: DocumentModificationContext,\n      userId: string\n    ): void;\n    _onUpdateEmbeddedDocuments(\n      embeddedName: string,\n      documents: InstanceType<ConfiguredDocumentClass<typeof TokenDocument>>[],\n      result: DeepPartial<PropertiesToSource<TokenDataProperties>>[],\n      options: DocumentModificationContext,\n      userId: string\n    ): void;\n    _onUpdateEmbeddedDocuments(\n      embeddedName: string,\n      documents: InstanceType<ConfiguredDocumentClass<typeof AmbientLightDocument>>[],\n      result: DeepPartial<PropertiesToSource<AmbientLightDataProperties>>[],\n      options: DocumentModificationContext,\n      userId: string\n    ): void;\n    _onUpdateEmbeddedDocuments(\n      embeddedName: string,\n      documents: InstanceType<ConfiguredDocumentClass<typeof NoteDocument>>[],\n      result: DeepPartial<PropertiesToSource<NoteDataProperties>>[],\n      options: DocumentModificationContext,\n      userId: string\n    ): void;\n    _onUpdateEmbeddedDocuments(\n      embeddedName: string,\n      documents: InstanceType<ConfiguredDocumentClass<typeof AmbientSoundDocument>>[],\n      result: DeepPartial<PropertiesToSource<AmbientSoundDataProperties>>[],\n      options: DocumentModificationContext,\n      userId: string\n    ): void;\n    _onUpdateEmbeddedDocuments(\n      embeddedName: string,\n      documents: InstanceType<ConfiguredDocumentClass<typeof MeasuredTemplateDocument>>[],\n      result: DeepPartial<PropertiesToSource<MeasuredTemplateDataProperties>>[],\n      options: DocumentModificationContext,\n      userId: string\n    ): void;\n    _onUpdateEmbeddedDocuments(\n      embeddedName: string,\n      documents: InstanceType<ConfiguredDocumentClass<typeof TileDocument>>[],\n      result: DeepPartial<PropertiesToSource<TileDataProperties>>[],\n      options: DocumentModificationContext,\n      userId: string\n    ): void;\n    _onUpdateEmbeddedDocuments(\n      embeddedName: string,\n      documents: InstanceType<ConfiguredDocumentClass<typeof WallDocument>>[],\n      result: DeepPartial<PropertiesToSource<WallDataProperties>>[],\n      options: DocumentModificationContext,\n      userId: string\n    ): void;\n\n    /** @override */\n    _preDeleteEmbeddedDocuments(\n      embeddedName: string,\n      result: string[],\n      options: DocumentModificationContext,\n      userId: string\n    ): void;\n\n    /** @override */\n    _onDeleteEmbeddedDocuments(\n      embeddedName: string,\n      documents: InstanceType<ConfiguredDocumentClass<typeof DrawingDocument>>[],\n      result: string[],\n      options: DocumentModificationContext,\n      userId: string\n    ): void;\n    _onDeleteEmbeddedDocuments(\n      embeddedName: string,\n      documents: InstanceType<ConfiguredDocumentClass<typeof TokenDocument>>[],\n      result: string[],\n      options: DocumentModificationContext,\n      userId: string\n    ): void;\n    _onDeleteEmbeddedDocuments(\n      embeddedName: string,\n      documents: InstanceType<ConfiguredDocumentClass<typeof AmbientLightDocument>>[],\n      result: string[],\n      options: DocumentModificationContext,\n      userId: string\n    ): void;\n    _onDeleteEmbeddedDocuments(\n      embeddedName: string,\n      documents: InstanceType<ConfiguredDocumentClass<typeof NoteDocument>>[],\n      result: string[],\n      options: DocumentModificationContext,\n      userId: string\n    ): void;\n    _onDeleteEmbeddedDocuments(\n      embeddedName: string,\n      documents: InstanceType<ConfiguredDocumentClass<typeof AmbientSoundDocument>>[],\n      result: string[],\n      options: DocumentModificationContext,\n      userId: string\n    ): void;\n    _onDeleteEmbeddedDocuments(\n      embeddedName: string,\n      documents: InstanceType<ConfiguredDocumentClass<typeof MeasuredTemplateDocument>>[],\n      result: string[],\n      options: DocumentModificationContext,\n      userId: string\n    ): void;\n    _onDeleteEmbeddedDocuments(\n      embeddedName: string,\n      documents: InstanceType<ConfiguredDocumentClass<typeof TileDocument>>[],\n      result: string[],\n      options: DocumentModificationContext,\n      userId: string\n    ): void;\n    _onDeleteEmbeddedDocuments(\n      embeddedName: string,\n      documents: InstanceType<ConfiguredDocumentClass<typeof WallDocument>>[],\n      result: string[],\n      options: DocumentModificationContext,\n      userId: string\n    ): void;\n\n    /** @override */\n    toCompendium(pack?: CompendiumCollection<CompendiumCollection.Metadata>): Omit<\n      foundry.data.SceneData['_source'],\n      '_id' | 'folder' | 'permission'\n    > & {\n      permission?: foundry.data.SceneData extends { toObject(): infer U } ? U : never;\n    };\n\n    /**\n     * Create a 300px by 100px thumbnail image for this scene background\n     * @param data - (default: `{}`)\n     * @returns The created thumbnail data.\n     */\n    createThumbnail(data?: Partial<ThumbnailCreationData>): ReturnType<typeof ImageHelper['createThumbnail']>;\n  }\n}\n\ninterface ThumbnailCreationData {\n  /**\n   * A background image to use for thumbnail creation, otherwise the current scene\n   * background is used.\n   */\n  img: string;\n\n  /**\n   * The desired thumbnail width. Default is 300px\n   * @defaultValue `300`\n   */\n  width: number;\n\n  /**\n   * The desired thumbnail height. Default is 100px;\n   * @defaultValue `100`\n   */\n  height: number;\n}\n"
    ]
  