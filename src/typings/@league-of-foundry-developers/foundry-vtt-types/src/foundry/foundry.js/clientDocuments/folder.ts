
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/foundry.js/clientDocuments/folder.d.ts",
      "import { DocumentModificationOptions } from '../../common/abstract/document.mjs';\nimport { ConfiguredDocumentClass, ConstructorDataType } from '../../../types/helperTypes';\n\ndeclare global {\n  /**\n   * The client-side Folder document which extends the common BaseFolder model.\n   * Each Folder document contains FolderData which defines its data schema.\n   *\n   * @see {@link data.FolderData}              The Folder data schema\n   * @see {@link documents.Folders}            The world-level collection of Folder documents\n   * @see {@link embedded.FolderSound}         The FolderSound embedded document within a parent Folder\n   * @see {@link applications.FolderConfig}    The Folder configuration application\n   *\n   * @param data - Initial data provided to construct the Folder document\n   */\n  class Folder extends ClientDocumentMixin(foundry.documents.BaseFolder) {\n    /**\n     * The depth of this folder in its sidebar tree\n     *\n     * @remarks For folders that have been populated by the {@link SidebarDirectory}, this is always be defined\n     */\n    depth?: number;\n\n    /**\n     * Return an array of the Document instances which are contained within this Folder.\n     */\n    get contents(): InstanceType<typeof CONFIG[this['data']['type']]['documentClass']>[];\n\n    /**\n     * Return whether the folder is displayed in the sidebar to the current user\n     */\n    get displayed(): boolean;\n\n    /**\n     * Return a reference to the Document type which is contained within this Folder.\n     */\n    get documentClass(): typeof CONFIG[this['data']['type']]['documentClass'];\n\n    /**\n     * Return a reference to the WorldCollection instance which provides Documents to this Folder.\n     */\n    get documentCollection(): Collection<InstanceType<typeof CONFIG[this['data']['type']]['documentClass']>>; // TODO: WorldCollection or ReturnType<Game['collections]['get]>\n\n    /**\n     * Return whether the folder is currently expanded within the sidebar interface.\n     */\n    get expanded(): boolean;\n\n    /**\n     * A reference to the parent Folder if one is set, otherwise null.\n     */\n    get parentFolder(): Folder | null;\n\n    /**\n     * Return the named Entity type for elements in this folder.\n     */\n    get type(): this['data']['type'];\n\n    /**\n     * Create a new Folder by rendering a dialog window to provide basic creation details\n     * @param data    - Initial data with which to populate the creation form\n     * @param options - Initial positioning and sizing options for the dialog form\n     *                  (default: `{}`)\n     * @returns An active FolderConfig instance for creating the new Folder entity\n     *\n     * @remarks\n     * This actually returns a FolderConfig but that is incorrectly overriding\n     * ClientDocumentMixin.createDialog, for which a Promise of the created\n     * Document is returned.\n     */\n    static createDialog(\n      data?: DeepPartial<\n        | ConstructorDataType<foundry.data.FolderData>\n        | (ConstructorDataType<foundry.data.FolderData> & Record<string, unknown>)\n      >,\n      options?: Dialog.Options\n    ): any;\n\n    /**\n     * Export all Documents contained in this Folder to a given Compendium pack.\n     * Optionally update existing Documents within the Pack by name, otherwise append all new entries.\n     * @param  pack         - A Compendium pack to which the entities will be exported\n     * @param  updateByName - Update existing entries in the Compendium pack, matching by name\n     *                        (default: `false`)\n     * @returns The updated Compendium Collection instance\n     */\n    exportToCompendium(pack: any, { updateByName }?: { updateByName?: boolean }): Promise<any>; // TODO: CompendiumCollection\n\n    /**\n     * Provide a dialog form that allows for exporting the contents of a Folder into an eligible Compendium pack.\n     * @param pack    - A pack ID to set as the default choice in the select input\n     * @param options - Additional options passed to the Dialog.prompt method\n     *                  (default: `{}`)\n     * @returns A Promise which resolves or rejects once the dialog has been submitted or closed\n     */\n    exportDialog(pack: string, options?: Dialog.Options): Promise<void>;\n\n    /**\n     * Get the Folder documents which are sub-folders of the current folder, either direct children or recursively.\n     * @param recursive - Identify child folders recursively, if false only direct children are returned\n     *                    (default: `false`)\n     * @returns An array of Folder documents which are subfolders of this one\n     */\n    getSubfolders(recursive?: boolean): InstanceType<ConfiguredDocumentClass<typeof Folder>>[];\n\n    protected _onDelete(options: DocumentModificationOptions, userId: string): void;\n\n    /**\n     * @deprecated since 0.8.0\n     */\n    get entities(): this['contents'];\n  }\n}\n"
    ]
  