
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/foundry.js/applications/filePicker.d.ts",
      "/**\n * The FilePicker application renders contents of the server-side public directory\n * This app allows for navigating and uploading files to the public path\n * @typeParam P - the type of the options object\n */\ndeclare class FilePicker<P extends FilePicker.Options = FilePicker.Options> extends Application<P> {\n  /**\n   * @param options - Options that configure the behavior of the FilePicker\n   */\n  constructor(options?: Partial<P>);\n\n  /**\n   * The full requested path given by the user\n   */\n  request: string | undefined;\n\n  /**\n   * The file sources which are available for browsing\n   */\n  sources: Partial<FilePicker.Sources>;\n\n  /**\n   * Track the active source tab which is being browsed\n   * @defaultValue `'data'`\n   */\n  activeSource: FilePicker.DataSource;\n\n  /**\n   * A callback function to trigger once a file has been selected\n   */\n  callback: FilePicker.Callback | undefined;\n\n  /**\n   * The latest set of results browsed from the server\n   * @remarks This is never set.\n   */\n  results: {};\n\n  /**\n   * The general file type which controls the set of extensions which will be accepted\n   */\n  type: FilePicker.Type | undefined;\n\n  /**\n   * The target HTML element this file picker is bound to\n   */\n  field: HTMLElement | undefined;\n\n  /**\n   * A button which controls the display of the picker UI\n   */\n  button: HTMLElement | undefined;\n\n  /**\n   * The display mode of the FilePicker UI\n   * @defaultValue `FilePicker.LAST_DISPLAY_MODE`\n   */\n  displayMode: FilePicker.DisplayMode;\n\n  /**\n   * The current set of file extensions which are being filtered upon\n   */\n  extensions: string[] | undefined;\n\n  protected _loaded: boolean;\n\n  /**\n   * Record the last-browsed directory path so that re-opening a different FilePicker instance uses the same target\n   * @defaultValue `''`\n   */\n  static LAST_BROWSED_DIRECTORY: string;\n\n  /**\n   * Record the last-configured tile size which can automatically be applied to new FilePicker instances\n   * @defaultValue `null`\n   */\n  static LAST_TILE_SIZE: number | null;\n\n  /**\n   * Record the last-configured display mode so that re-opening a different FilePicker instance uses the same mode.\n   * @defaultValue `'list'`\n   */\n  static LAST_DISPLAY_MODE: FilePicker.DisplayMode;\n\n  /**\n   * Enumerate the allowed FilePicker display modes\n   */\n  static DISPLAY_MODES: ['list', 'thumbs', 'tiles', 'images'];\n\n  /**\n   * Cache the names of S3 buckets which can be used\n   * @defaultValue `null`\n   */\n  static S3_BUCKETS: string[] | null;\n\n  /**\n   * @override\n   */\n  static get defaultOptions(): FilePicker.Options;\n\n  /**\n   * Given a current file path, determine the directory it belongs to\n   * @param target - The currently requested target path\n   * @returns An array of the inferred source and target directory path\n   */\n  protected _inferCurrentDirectory(target: string | undefined): [string, string];\n\n  /**\n   * Get the valid file extensions for a given named file picker type\n   * @param type - The general type of file\n   * @returns A list of file extensions\n   */\n  protected _getExtensions(type: FilePicker.Type): string[] | undefined;\n\n  /**\n   * Test a URL to see if it matches a well known s3 key pattern\n   * @param url - An input URL to test\n   * @returns A regular expression match\n   */\n  static matchS3URL(url: string): RegExpMatchArray | null;\n\n  /**\n   * Parse a s3 key to learn the bucket and the key prefix used for the request\n   * @param key - A fully qualified key name or prefix path\n   */\n  static parseS3URL(key: string): { bucket: string | null; keyPrefix: string };\n\n  /**\n   * @override\n   */\n  get title(): string;\n\n  /**\n   * Return the source object for the currently active source\n   */\n  get source(): FilePicker.Source;\n\n  /**\n   * Return the target directory for the currently active source\n   */\n  get target(): string;\n\n  /**\n   * Return a flag for whether the current user is able to upload file content\n   */\n  get canUpload(): boolean;\n\n  /**\n   * Return the upload URL to which the FilePicker should post uploaded files\n   */\n  static get uploadURL(): string;\n\n  /**\n   * @param options - (unused)\n   * @override\n   */\n  getData(options?: Partial<P>): Promise<FilePicker.Data>;\n\n  /**\n   * Browse to a specific location for this FilePicker instance\n   * @param target - The target within the currently active source location.\n   * @param options - Browsing options (default: `{}`)\n   */\n  browse(target?: string, options?: FilePicker.BrowsingOptions): Promise<FilePicker.BrowseResult>;\n\n  /**\n   * Browse files for a certain directory location\n   * @param source  - The source location in which to browse. See FilePicker#sources for details\n   * @param target  - The target within the source location (default: `\"\"`)\n   * @param options - Optional arguments (default: `{}`)\n   *\n   * @returns A Promise which resolves to the directories and files contained in the location\n   */\n  static browse(\n    source: FilePicker.DataSource,\n    target?: string,\n    options?: FilePicker.BrowsingOptions\n  ): Promise<FilePicker.BrowseResult>;\n\n  /**\n   * Configure metadata settings regarding a certain file system path\n   * @param source  - The source location in which to browse. See FilePicker#sources for details\n   * @param target  - The target within the source location\n   * @param options - Optional arguments which modify the request (default: `{}`)\n   */\n  static configurePath(\n    source: FilePicker.DataSource,\n    target: string,\n    options?: FilePicker.ConfigurePathOptions\n  ): Promise<FilePicker.ConfigurePathResult>;\n\n  /**\n   * Create a subdirectory within a given source. The requested subdirectory path must not already exist.\n   * @param source  - The source location in which to browse. See FilePicker#sources for details\n   * @param target  - The target within the source location\n   * @param options - Optional arguments which modify the request (default: `{}`)\n   */\n  static createDirectory(\n    source: FilePicker.DataSource,\n    target: string,\n    options?: FilePicker.CreateDirectoryOptions\n  ): Promise<string>;\n\n  /**\n   * General dispatcher method to submit file management commands to the server\n   */\n  protected static _manageFiles(\n    data: FilePicker.ManageData,\n    options?: Record<string, unknown>\n  ): Promise<Record<string, unknown>>;\n\n  /**\n   * Dispatch a POST request to the server containing a directory path and a file to upload\n   * @param source  - The data source to which the file should be uploaded\n   * @param path    - The destination path\n   * @param file    - The File object to upload\n   * @param options - Additional file upload options passed as form data (default `{}`)\n   * @returns The response object\n   */\n  static upload(\n    source: FilePicker.DataSource,\n    path: string,\n    file: File,\n    options?: FilePicker.UploadOptions\n  ): Promise<(Response & { path: string; message?: string }) | false | void>;\n\n  /**\n   * Additional actions performed when the file-picker UI is rendered\n   */\n  render(force?: boolean, options?: Application.RenderOptions<P>): ReturnType<this['browse']> | void;\n\n  /** @override */\n  activateListeners(html: JQuery): void;\n\n  /**\n   * Handle a click event to change the display mode of the File Picker\n   * @param event - The triggering click event\n   */\n  protected _onChangeDisplayMode(event: JQuery.ClickEvent): void;\n\n  /**\n   * @param event - (unused)\n   * @param event - (unused)\n   * @override\n   */\n  protected _onChangeTab(event: MouseEvent | null, tabs: Tabs, active: this['activeSource']): void;\n\n  /**\n   * @param selector - (unused)\n   * @override\n   */\n  protected _canDragStart(selector: string | null): boolean;\n\n  /**\n   * @param selector - (unused)\n   * @override\n   */\n  protected _canDragDrop(selector: string | null): this['canUpload'];\n\n  /**\n   * @override\n   */\n  protected _onDragStart(event: DragEvent): void;\n\n  /**\n   * @override\n   */\n  protected _onDrop(event: DragEvent): Promise<PromisedType<ReturnType<this['browse']>> | void>;\n\n  /**\n   * Handle user submission of the address bar to request an explicit target\n   * @param event - The originating keydown event\n   */\n  protected _onRequestTarget(event: KeyboardEvent): ReturnType<this['browse']> | void;\n\n  /**\n   * Handle requests from the IntersectionObserver to lazily load an image file\n   * @param entries  - The entries which are now observed\n   * @param observer - The intersection observer instance\n   */\n  protected _onLazyLoadImages(entries: IntersectionObserverEntry[], observer: IntersectionObserver): void;\n\n  /**\n   * Handle file or folder selection within the file picker\n   * @param event - The originating click event\n   */\n  protected _onPick(event: JQuery.ClickEvent): ReturnType<this['browse']> | void;\n\n  /**\n   * Handle backwards navigation of the fol6der structure\n   */\n  protected _onClickDirectoryControl(\n    event: JQuery.ClickEvent\n  ):\n    | ReturnType<this['browse']>\n    | Promise<ReturnType<this['browse']> | void | null>\n    | ReturnType<typeof FilePicker['configurePath']>;\n\n  /**\n   * Present the user with a dialog to create a subdirectory within their currently browsed file storate location.\n   */\n  protected _createDirectoryDialog(source: FilePicker.Source): Promise<ReturnType<this['browse']> | void | null>;\n\n  /**\n   * Handle changes to the bucket selector\n   */\n  protected _onChangeBucket(event: JQuery.ChangeEvent): ReturnType<this['browse']>;\n\n  /**\n   * @param event - (unused)\n   * @override\n   */\n  protected _onSearchFilter(event: KeyboardEvent, query: string, rgx: RegExp, html: HTMLElement): void;\n\n  /**\n   * Handle file picker form submission\n   */\n  protected _onSubmit(ev: Event): void;\n\n  /**\n   * Handle file upload\n   */\n  protected _onUpload(ev: Event): Promise<void>;\n\n  /**\n   * Bind the file picker to a new target field.\n   * Assumes the user will provide a <button> HTMLElement which has the data-target and data-type attributes\n   * The data-target attribute should provide the name of the input field which should receive the selected file\n   * The data-type attribute is a string in [\"image\", \"audio\"] which sets the file extensions which will be accepted\n   *\n   * @param button  - The button element\n   */\n  static fromButton(button: HTMLButtonElement): FilePicker;\n}\n\ndeclare namespace FilePicker {\n  interface BrowseResult {\n    target: string;\n    private: boolean;\n    dirs: string[];\n    privateDirs: string[];\n    files: string[];\n    gridSize?: number;\n    extensions: [];\n  }\n\n  interface BrowsingOptions {\n    /**\n     * A bucket within which to search, if using the S3 source\n     * @defaultValue `\"\"`\n     */\n    bucket?: string;\n\n    /**\n     * An Array of file extensions to filter on\n     * @defaultValue `[]` (do not filter on extension)\n     */\n    extensions?: string[];\n\n    /**\n     * The requested dir represents a wildcard path\n     * @defaultValue false\n     */\n    wildcard?: boolean;\n  }\n\n  /**\n   * A callback function to trigger once a file has been selected\n   * @param path - The path that was chosen\n   */\n  type Callback = (path: string) => void;\n\n  interface ConfigurePathOptions {\n    /**\n     * A bucket to use, if using the S3 source\n     * @defaultValue `\"\"`\n     */\n    bucket?: string;\n\n    /**\n     * Set the privacy mode on this path\n     * @defaultValue true\n     */\n    private?: boolean;\n\n    /**\n     * Set the grid size\n     * @defaultValue `undefined`\n     */\n    gridSize?: number;\n  }\n\n  interface ConfigurePathResult {\n    private: boolean;\n    gridSize?: number;\n  }\n\n  interface CreateDirectoryOptions {\n    /**\n     * A bucket to use, if using the S3 source\n     * @defaultValue `\"\"`\n     */\n    bucket?: string;\n  }\n\n  interface Data {\n    bucket: string | null;\n    canGoBack: boolean;\n    canUpload: boolean;\n    canSelect: boolean;\n    cssClass: string;\n    dirs: Dir[];\n    displayMode: FilePicker.DisplayMode;\n    extensions: string[] | undefined;\n    files: File[];\n    isS3: boolean;\n    noResults: boolean;\n    request: string;\n    selected: string | undefined;\n    source: Source;\n    sources: Sources;\n    target: string;\n    tileSize: number | null;\n    user: Game['user'];\n    submitText: 'FILES.SelectFolder' | 'FILES.SelectFile';\n  }\n\n  type DataSource = 'data' | 'public' | 's3';\n\n  interface Dir {\n    name: string;\n    path: string;\n    private: boolean;\n  }\n\n  type DisplayMode = ValueOf<typeof FilePicker['DISPLAY_MODES']>;\n\n  interface File {\n    name: string;\n    url: string;\n    img: string;\n  }\n\n  interface ManageData {\n    action: 'browseFiles' | 'configurePath' | 'createDirectory' | 'manageFiles';\n    source: string;\n    target: string;\n  }\n\n  /**\n   * Options for configuring FilePicker\n   */\n  interface Options extends Application.Options {\n    /**\n     * The current file path being modified, if any\n     */\n    current?: FilePicker['request'];\n\n    /**\n     * A current file source in \"data\", \"public\", or \"s3\"\n     */\n    activeSource?: DataSource;\n\n    /**\n     * A type of file to target, in \"audio\", \"image\", \"video\", \"imagevideo\" or \"folder\"\n     */\n    type?: FilePicker['type'];\n\n    /**\n     * An HTML form field that the result of this selection is applied to\n     */\n    field?: FilePicker['field'];\n\n    /**\n     * An HTML button element which triggers the display of this picker\n     */\n    button?: FilePicker['button'];\n\n    /**\n     * A callback function to trigger once a file has been selected\n     */\n    callback?: Callback;\n\n    /**\n     * @defaultValue `'templates/apps/filepicker.html'`\n     */\n    template: Application.Options['template'];\n\n    /**\n     * @defaultValue `['filepicker']`\n     */\n    classes: Application.Options['classes'];\n\n    /**\n     * @defaultValue `520`\n     */\n    width: Application.Options['width'];\n\n    /**\n     * @defaultValue `[{navSelector: \".tabs\"}]`\n     */\n    tabs: Application.Options['tabs'];\n\n    /**\n     * @defaultValue `[{dragSelector: '.file', dropSelector: '.filepicker-body'}]`\n     */\n    dragDrop: Application.Options['dragDrop'];\n\n    /**\n     * @defaultValue `false`\n     */\n    tileSize: boolean;\n\n    /**\n     * @defaultValue `[{ inputSelector: 'input[name=\"filter\"]', contentSelector: \".filepicker-body\" }]`\n     */\n    filters: Application.Options['filters'];\n  }\n\n  interface Source {\n    target: string;\n    label: string;\n    icon: string;\n  }\n\n  interface Sources {\n    data: Source;\n    public: Source;\n    s3: Source & {\n      buckets: string[];\n      bucket: string;\n    };\n  }\n\n  type Type = 'audio' | 'image' | 'video' | 'imagevideo' | 'folder';\n\n  /**\n   * Optional arguments for the `upload` method\n   */\n  interface UploadOptions {\n    /**\n     * A bucket to upload to, if using the S3 source\n     * @defaultValue `\"\"`\n     */\n    bucket?: string;\n  }\n}\n"
    ]
  