
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/foundry.js/applications/sidebarTabs/combatTracker.d.ts",
      "import { ConfiguredDocumentClass, ConfiguredObjectClassForName } from '../../../../types/helperTypes';\n\ndeclare global {\n  /**\n   * The sidebar directory which organizes and displays world-level Combat documents.\n   */\n  class CombatTracker<Options extends Application.Options = CombatTracker.Options> extends SidebarTab<Options> {\n    constructor(options?: Partial<Options>);\n\n    /**\n     * Record a reference to the currently highlighted Token\n     * @defaultValue `null`\n     * @internal\n     */\n    protected _highlighted: ConfiguredObjectClassForName<'Token'> | null;\n\n    /**\n     * Record the currently tracked Combat encounter\n     * @defaultValue `null`\n     */\n    viewed: StoredDocument<InstanceType<ConfiguredDocumentClass<typeof Combat>>> | null;\n\n    /** @override */\n    static get defaultOptions(): CombatTracker.Options;\n\n    /**\n     * Return an array of Combat encounters which occur within the current Scene.\n     */\n    get combats(): ReturnType<CombatEncounters['filter']>;\n\n    /** @override */\n    createPopout(): this;\n\n    /**\n     * Initialize the combat tracker to display a specific combat encounter.\n     * If no encounter is provided, the tracker will be initialized with the first encounter in the viewed scene.\n     * @param combat - The combat encounter to initialize\n     *                 (default: `null`)\n     * @param render - Whether to re-render the sidebar after initialization\n     *                 (default: `true`)\n     */\n    initialize({ combat, render }?: { combat?: Combat | null; render?: boolean }): void;\n\n    /**\n     * Scroll the combat log container to ensure the current Combatant turn is centered vertically\n     */\n    scrollToTurn(): void;\n\n    /** @override */\n    getData(options?: Partial<Options>): Promise<CombatTracker.Data>;\n\n    /** @override */\n    activateListeners(html: JQuery): void;\n\n    /**\n     * Handle new Combat creation request\n     * @internal\n     */\n    protected _onCombatCreate(event: JQuery.ClickEvent): Promise<void>;\n\n    /**\n     * Handle a Combat deletion request\n     * @internal\n     * @remarks This is never called\n     */\n    protected _onCombatDelete(event: Event): Promise<void>;\n\n    /**\n     * Handle a Combat cycle request\n     * @internal\n     */\n    protected _onCombatCycle(event: Event): Promise<void>;\n\n    /**\n     * Handle click events on Combat control buttons\n     * @param event - The originating mousedown event\n     * @internal\n     */\n    protected _onCombatControl(event: JQuery.ClickEvent): Promise<void>;\n\n    /**\n     * Handle a Combatant control toggle\n     * @param event - The originating mousedown event\n     * @internal\n     */\n    protected _onCombatantControl(event: JQuery.ClickEvent): Promise<void>;\n\n    /**\n     * Handle toggling the defeated status effect on a combatant Token\n     * @param combatant - The combatant data being modified\n     * @returns A Promise that resolves after all operations are complete\n     * @internal\n     */\n    protected _onToggleDefeatedStatus(\n      combatant: InstanceType<ConfiguredDocumentClass<typeof Combatant>>\n    ): Promise<void>;\n\n    /**\n     * Handle mouse-down event on a combatant name in the tracker\n     * @param event - The originating mousedown event\n     * @returns A Promise that resolves once the pan is complete\n     * @internal\n     */\n    protected _onCombatantMouseDown(event: JQuery.ClickEvent): Promise<boolean | void>;\n\n    /**\n     * Handle mouse-hover events on a combatant in the tracker\n     * @internal\n     */\n    protected _onCombatantHoverIn(event: JQuery.MouseEnterEvent): void;\n\n    /**\n     * Handle mouse-unhover events for a combatant in the tracker\n     * @internal\n     */\n    protected _onCombatantHoverOut(event: JQuery.MouseLeaveEvent): void;\n\n    /**\n     * Attach context menu options to elements in the tracker\n     * @param html - The HTML element to which context options are attached\n     * @internal\n     */\n    protected _contextMenu(html: JQuery): void;\n\n    /**\n     * Get the sidebar directory entry context options\n     * @returns The sidebar entry context options\n     * @internal\n     */\n    protected _getEntryContextOptions(): ContextMenuEntry[];\n\n    /**\n     * Display a dialog which prompts the user to enter a new initiative value for a Combatant\n     * @internal\n     */\n    protected _onConfigureCombatant(li: JQuery): void;\n  }\n\n  namespace CombatTracker {\n    type Data =\n      | {\n          user: Game['user'];\n          combats: CombatTracker['combats'];\n          combatCount: number;\n          started: boolean;\n          settings: ClientSettings.Values[`core.${typeof Combat.CONFIG_SETTING}`];\n          currentIndex: -1;\n          hasCombat: false;\n          combat: null;\n          turns: [];\n          previousId: null;\n          nextId: null;\n          control: false;\n        }\n      | {\n          user: Game['user'];\n          combats: CombatTracker['combats'];\n          combatCount: number;\n          started: boolean;\n          settings: ClientSettings.Values[`core.${typeof Combat.CONFIG_SETTING}`];\n          currentIndex: number;\n          hasCombat: true;\n          combat: StoredDocument<InstanceType<ConfiguredDocumentClass<typeof Combat>>>;\n          turns: Turn[];\n          previousId: string | null;\n          nextId: string | null;\n          control: boolean;\n          round: number;\n          turn: number;\n        };\n\n    type Turn = {\n      id: string;\n      name: string;\n      img: string;\n      active: boolean;\n      owner: boolean;\n      defeated: boolean;\n      hidden: boolean;\n      initiative: number | null;\n      hasRolled: boolean;\n      hasResource: boolean;\n      ressource: `${number}` | number | boolean | null;\n      css: string;\n      effects: Set<string>;\n    };\n\n    interface Options extends Application.Options {\n      /**\n       * @defaultValue `'combat'`\n       */\n      id: string;\n\n      /**\n       * @defaultValue `'templates/sidebar/combat-tracker.html'`\n       */\n      template: string;\n\n      /**\n       * @defaultValue `'Combat Tracker'`\n       */\n      title: string;\n\n      /**\n       * @defaultValue `['.directory-list']`\n       */\n      scrollY: string[];\n    }\n  }\n}\n"
    ]
  