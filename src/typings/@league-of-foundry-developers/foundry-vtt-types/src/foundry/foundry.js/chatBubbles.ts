
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/foundry.js/chatBubbles.d.ts",
      "/**\n * The Chat Bubble Class\n * This application displays a temporary message sent from a particular Token in the active Scene.\n * The message is displayed on the HUD layer just above the Token.\n */\ndeclare class ChatBubbles {\n  constructor();\n\n  /**\n   * @defaultValue `'templates/hud/chat-bubble.html'`\n   */\n  template: string;\n\n  /**\n   * Track active Chat Bubbles\n   * @defaultValue `{}`\n   * @remarks This is never used\n   */\n  bubbles: object;\n\n  /**\n   * Track which Token was most recently panned to highlight\n   * Use this to avoid repeat panning\n   * @defaultValue `null`\n   */\n  protected _panned: Token | null;\n\n  /**\n   * A reference to the chat bubbles HTML container in which rendered bubbles should live\n   */\n  get container(): JQuery;\n\n  /**\n   * Speak a message as a particular Token, displaying it as a chat bubble\n   * @param token   - The speaking Token\n   * @param message - The spoken message text\n   * @param emote   - Whether to style the speech bubble as an emote\n   * @returns A Promise which resolves once the chat bubble has been created\n   */\n  say(token: Token, message: string, { emote }?: { emote?: boolean }): Promise<void>;\n\n  /**\n   * Clear any existing chat bubble for a certain Token\n   */\n  protected _clearBubble(token: Token): Promise<void>;\n\n  /**\n   * Render the HTML template for the chat bubble\n   * @param data - Template data\n   * @returns The rendered HTML\n   */\n  protected _renderHTML(data: { token: Token; message: string; emote: boolean }): Promise<string>;\n\n  /**\n   * Before displaying the chat message, determine it's constrained and unconstrained dimensions\n   * @param message - The message content\n   * @returns The rendered message dimensions\n   */\n  protected _getMessageDimensions(message: string): ChatBubbles.Dimensions;\n\n  /**\n   * Assign styling parameters to the chat bubble, toggling either a left or right display (randomly)\n   */\n  protected _setPosition(token: Token, html: JQuery, dimensions: ChatBubbles.Dimensions): void;\n\n  /**\n   * Determine the length of time for which to display a chat bubble.\n   * Research suggests that average reading speed is 200 words per minute.\n   * Since these are short-form messages, we multiply reading speed by 1.5.\n   * Clamp the result between 1 second (minimum) and 20 seconds (maximum)\n   *\n   * @param html - The HTML message\n   * @returns The number of milliseconds for which to display the message\n   */\n  protected _getDuration(html: JQuery): number;\n}\n\ndeclare namespace ChatBubbles {\n  interface Dimensions {\n    width: number;\n    height: number;\n    unconstrained: number;\n  }\n}\n"
    ]
  