
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/foundry.js/pixi/containers/cachedContainer.d.ts",
      "/**\n * A special type of PIXI.Container which draws its contents to a cached RenderTexture.\n * This is accomplished by overriding the Container#render method to draw to our own special RenderTexture.\n */\ndeclare class CachedContainer extends PIXI.Container {\n  constructor();\n\n  /**\n   * The RenderTexture that is the render destination for the contents of this Container\n   */\n  readonly renderTexture: PIXI.RenderTexture;\n\n  protected _onResize: () => void;\n\n  /**\n   * An object which stores a reference to the normal renderer target and source frame.\n   * We track this so we can restore them after rendering our cached texture.\n   */\n  protected _backup: {\n    renderTexture: PIXI.RenderTexture | undefined;\n    sourceFrame: PIXI.Rectangle;\n  };\n\n  /**\n   * An RGBA array used to define the clear color of the RenderTexture\n   * @defaultValue `[0, 0, 0, 1]`\n   */\n  clearColor: [r: number, g: number, b: number, a: number];\n\n  /**\n   * Should our Container also be displayed on screen, in addition to being drawn to the cached RenderTexture?\n   * @defaultValue `false`\n   */\n  displayed: boolean;\n\n  destroy(options?: Parameters<PIXI.Container['destroy']>[0]): ReturnType<PIXI.Container['destroy']>;\n\n  render(renderer: Parameters<PIXI.Container['render']>[0]): void;\n\n  /**\n   * Bind our cached RenderTexture to the Renderer, replacing the original target.\n   * @param renderer - The active canvas renderer\n   */\n  protected _bind(renderer: PIXI.Renderer): void;\n\n  /**\n   * Remove our cached RenderTexture from the Renderer, re-binding the original target.\n   * @param renderer - The active canvas renderer\n   */\n  protected _unbind(renderer: PIXI.Renderer): void;\n\n  /**\n   * Resize the cached RenderTexture when the dimensions or resolution of the Renderer have changed.\n   */\n  protected _resize(renderer: PIXI.Renderer): void;\n}\n"
    ]
  