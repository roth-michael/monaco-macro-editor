
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/foundry.js/applications/basePlaceableHUDs/tokenHUD.d.ts",
      "import type { ConfiguredObjectClassForName } from '../../../../types/helperTypes';\n\ndeclare global {\n  /**\n   * An implementation of the PlaceableHUD base class which renders a heads-up-display interface for Token objects.\n   * This interface provides controls for visibility, attribute bars, elevation, status effects, and more.\n   * @typeParam Options - the type of the options object\n   */\n  class TokenHUD<Options extends Application.Options = Application.Options> extends BasePlaceableHUD<\n    ConcreteToken,\n    Options\n  > {\n    /**\n     * Track whether the status effects control palette is currently expanded or hidden\n     * @defaultValue `false`\n     * @internal\n     */\n    protected _statusEffects: boolean;\n\n    /**\n     * @override\n     * @defaultValue\n     * ```\n     * foundry.utils.mergeObject(super.defaultOptions, {\n     *   id: \"token-hud\",\n     *   template: \"templates/hud/token-hud.html\"\n     * })\n     * ```\n     */\n    static get defaultOptions(): Application.Options;\n\n    /** @override */\n    bind(object: ConcreteToken): void;\n\n    /**\n     * Refresh the currently active state of all status effect icons in the Token HUD selector.\n     */\n    refreshStatusIcons(): void;\n\n    /**\n     * @override\n     * @param _position - (unused)\n     */\n    setPosition(_position?: Partial<Application.Position>): void;\n\n    /** @override */\n    getData(options?: Partial<Application.Options>): ReturnType<BasePlaceableHUD<ConcreteToken>['getData']> & {\n      canConfigure: boolean;\n      canToggleCombat: boolean;\n      displayBar1: boolean;\n      bar1Data: ReturnType<ConcreteToken['document']['getBarAttribute']>;\n      displayBar2: boolean;\n      bar2Data: ReturnType<ConcreteToken['document']['getBarAttribute']>;\n      visibilityClass: string;\n      effectsClass: string;\n      combatClass: string;\n      targetClass: string;\n      statusEffects: ReturnType<TokenHUD['_getStatusEffectChoices']>;\n    };\n\n    /**\n     * Get an array of icon paths which represent valid status effect choices\n     * @internal\n     */\n    protected _getStatusEffectChoices(): Record<\n      string,\n      {\n        id: string;\n        title: string | null;\n        src: string;\n        isActive: boolean;\n        isOverlay: boolean;\n        cssClass: string;\n      }\n    >;\n\n    /** @override */\n    activateListeners(html: JQuery): void;\n\n    /** @override */\n    protected _onClickControl(event: JQuery.ClickEvent): unknown;\n\n    /**\n     * Handle initial click to focus an attribute update field\n     * @internal\n     */\n    protected _onAttributeClick(event: JQuery.ClickEvent): void;\n\n    /**\n     * Force field handling on an Enter keypress even if the value of the field did not change.\n     * This is important to suppose use cases with negative number values.\n     * @param event - The originating keydown event\n     * @internal\n     */\n    protected _onAttributeKeydown(event: JQuery.KeyDownEvent): void;\n\n    /**\n     * Handle attribute bar update\n     * @internal\n     */\n    protected _onAttributeUpdate(event: JQuery.ChangeEvent): void;\n\n    /**\n     * Toggle Token combat state\n     * @internal\n     */\n    protected _onToggleCombat(event: JQuery.ClickEvent): Promise<void>;\n\n    /**\n     * Handle Token configuration button click\n     * @internal\n     */\n    protected _onTokenConfig(event: JQuery.ClickEvent): void;\n\n    /**\n     * Handle left-click events to toggle the displayed state of the status effect selection palette\n     * @internal\n     */\n    protected _onToggleStatusEffects(event: JQuery.ClickEvent): void;\n\n    /**\n     * Assign css selectors for the active state of the status effects selection palette\n     * @internal\n     */\n    protected _toggleStatusEffects(active: boolean): void;\n\n    /**\n     * Handle toggling a token status effect icon\n     * @param overlay - (default: `false`)\n     * @internal\n     */\n    protected _onToggleEffect(\n      event: JQuery.ClickEvent | JQuery.ContextMenuEvent,\n      { overlay }?: { overlay?: boolean }\n    ): Promise<boolean>;\n\n    /**\n     * Handle toggling the target state for this Token\n     * @internal\n     */\n    protected _onToggleTarget(event: JQuery.ClickEvent): void;\n  }\n}\n\ntype ConcreteToken = InstanceType<ConfiguredObjectClassForName<'Token'>>;\n"
    ]
  