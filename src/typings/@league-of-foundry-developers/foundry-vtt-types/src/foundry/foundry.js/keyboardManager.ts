
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/foundry.js/keyboardManager.d.ts",
      "/**\n * A set of helpers and management functions for dealing with user input from keyboard events.\n * {@link https://keycode.info/}\n */\ndeclare class KeyboardManager {\n  constructor();\n\n  /**\n   * The set of key codes which are currently depressed (down)\n   */\n  protected _downKeys: Set<string>;\n\n  /**\n   * The set of key codes which have been already handled per workflow\n   */\n  protected _handled: Set<string>;\n\n  /**\n   * A mapping of movement keys which are pending\n   */\n  protected _moveKeys: Set<string>;\n\n  /**\n   * @defaultValue `null`\n   */\n  protected _moveTime: number | null;\n\n  /**\n   * @defaultValue `0`\n   */\n  protected _tabState: 0 | 1;\n\n  /**\n   * @defaultValue `0`\n   */\n  protected _wheelTime: number;\n\n  /**\n   * Specify a rate limit for mouse wheel to gate repeated scrolling.\n   * This is especially important for continuous scrolling mice which emit hundreds of events per second.\n   * This designates a minimum number of milliseconds which must pass before another wheel event is handled\n   */\n  static MOUSE_WHEEL_RATE_LIMIT: 50;\n\n  /**\n   * Enumerate the \"digit keys\"\n   */\n  static DIGIT_KEYS: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'];\n\n  /**\n   * Map keys used for movement\n   */\n  static MOVEMENT_KEYS: {\n    w: ['up'];\n    a: ['left'];\n    s: ['down'];\n    d: ['right'];\n    W: ['up'];\n    A: ['left'];\n    S: ['down'];\n    D: ['right'];\n    ArrowUp: ['up'];\n    ArrowRight: ['right'];\n    ArrowDown: ['down'];\n    ArrowLeft: ['left'];\n    Numpad1: ['down', 'left'];\n    Numpad2: ['down'];\n    Numpad3: ['down', 'right'];\n    Numpad4: ['left'];\n    Numpad6: ['right'];\n    Numpad7: ['up', 'left'];\n    Numpad8: ['up'];\n    Numpad9: ['up', 'right'];\n  };\n\n  /**\n   * Map keys used for canvas zooming\n   */\n  static ZOOM_KEYS: {\n    PageUp: 'in';\n    PageDown: 'out';\n    NumpadAdd: 'in';\n    NumpadSubtract: 'out';\n  };\n\n  /**\n   * Reset tracking for which keys are in the down and released states\n   */\n  protected _reset(): void;\n\n  /**\n   * Return whether the key code is currently in the DOWN state\n   * @param code - The key code to test\n   */\n  isDown(code: string): boolean;\n\n  /**\n   * A helper method to test whether, given an Event, the CTRL (or CMD) keys are pressed\n   * @param event - The originating event or canvas interaction\n   */\n  isCtrl(event: Event | PIXI.InteractionEvent): boolean;\n\n  /**\n   * Get a standardized keyboard code for a given event\n   * @param event - The originating keypress event\n   * @returns The standardized string code to use\n   */\n  getKey(event: KeyboardEvent): string;\n\n  /**\n   * The key codes which represent a possible movement key\n   */\n  get moveKeys(): typeof KeyboardManager.MOVEMENT_KEYS;\n\n  /**\n   * The key codes which represent a digit key\n   */\n  get digitKeys(): typeof KeyboardManager.DIGIT_KEYS;\n\n  /**\n   * Return the key codes used for zooming the canvas\n   */\n  get zoomKeys(): typeof KeyboardManager.ZOOM_KEYS;\n\n  /**\n   * Test whether an input currently has focus\n   */\n  get hasFocus(): boolean;\n\n  /**\n   * Handle a key press into the down position\n   * @param event - The originating keyboard event\n   */\n  protected _onKeyDown(event: KeyboardEvent): void;\n\n  /**\n   * Handle a key release into the up position\n   * @param event - The originating keyboard event\n   */\n  protected _onKeyUp(event: KeyboardEvent): void;\n\n  /**\n   * Delegate tracked key codes by dispatching to their various handlers\n   * @param event - The keydown or keyup event\n   * @param key   - The key being depressed\n   * @param up    - A flag for whether the key is down or up\n   */\n  protected _handleKeys(event: KeyboardEvent, key: string, up: boolean): void;\n\n  /**\n   * Input events do not fire with isComposing = false at the end of a composition event in Chrome\n   * See: https://github.com/w3c/uievents/issues/202\n   */\n  protected _onCompositionEnd(event: CompositionEvent): void;\n\n  /**\n   * Master mouse-wheel event keyboard handler\n   */\n  protected _onWheel(event: WheelEvent): void;\n\n  /**\n   * Handle TAB keypress events\n   * @param event     - The originating keyboard event\n   * @param up        - Is the key being released?\n   * @param modifiers - The identified modifiers attached to this keypress\n   */\n  protected _onTab(event: KeyboardEvent, up: boolean, modifiers: KeyboardManager.MetaModifiers): void;\n\n  /**\n   * Handle ESC keypress events\n   * @param event     - The originating keyboard event\n   * @param up        - Is the key being released?\n   * @param modifiers - The identified modifiers attached to this keypress\n   */\n  protected _onEscape(\n    event: KeyboardEvent,\n    up: boolean,\n    modifiers: KeyboardManager.MetaModifiers\n  ): void | Promise<void>;\n\n  /**\n   * Handle SPACE keypress events\n   * @param event     - The originating keyboard event\n   * @param up        - Is the key being released?\n   * @param modifiers - The identified modifiers attached to this keypress\n   */\n  protected _onSpace(\n    event: KeyboardEvent,\n    up: boolean,\n    modifiers: KeyboardManager.MetaModifiers\n  ): void | ReturnType<Set<string>['add']>;\n\n  /**\n   * Handle ALT keypress events\n   * @param event     - The originating keyboard event\n   * @param up        - Is the key being released?\n   * @param modifiers - The identified modifiers attached to this keypress\n   */\n  protected _onAlt(event: KeyboardEvent, up: boolean, modifiers: KeyboardManager.MetaModifiers): void;\n\n  /**\n   * Handle movement keypress events\n   * @param event     - The originating keyboard event\n   * @param up        - Is the key being released?\n   * @param modifiers - The identified modifiers attached to this keypress\n   */\n  protected _onMovement(event: KeyboardEvent, up: boolean, modifiers: KeyboardManager.MetaModifiers): void;\n\n  /**\n   * Handle keyboard movement once a small delay has elapsed to allow for multiple simultaneous key-presses.\n   */\n  protected _handleMovement(event: KeyboardEvent, layer: PlaceablesLayer<any>): void;\n\n  /**\n   * Handle panning the canvas using CTRL + directional keys\n   */\n  protected _handleCanvasPan(): ReturnType<Canvas['animatePan']>;\n\n  /**\n   * Handle number key presses\n   * @param event     - The original digit key press\n   *                    (unused)\n   * @param up        - Is it a keyup?\n   * @param modifiers - What modifiers affect the keypress?\n   */\n  protected _onDigit(event: KeyboardEvent, up: boolean, modifiers: KeyboardManager.MetaModifiers): void;\n\n  /**\n   * Handle \"A\" keypress events (CTRL only) to select all objects\n   * @param event     - The originating keyboard event\n   *                    (unused)\n   * @param up        - Is the key being released?\n   * @param modifiers - The identified modifiers attached to this keypress\n   */\n  protected _onKeyA(event: KeyboardEvent, up: boolean, modifiers: KeyboardManager.MetaModifiers): void;\n\n  /**\n   * Handle \"C\" keypress events to copy data to clipboard\n   * @param event     - The originating keyboard event\n   * @param up        - Is the key being released?\n   * @param modifiers - The identified modifiers attached to this keypress\n   */\n  protected _onKeyC(event: KeyboardEvent, up: boolean, modifiers: KeyboardManager.MetaModifiers): void;\n\n  /**\n   * Handle \"V\" keypress events to paste data from clipboard\n   * @param event     - The originating keyboard event\n   * @param up        - Is the key being released?\n   * @param modifiers - The identified modifiers attached to this keypress\n   */\n  protected _onKeyV(event: KeyboardEvent, up: boolean, modifiers: KeyboardManager.MetaModifiers): void;\n\n  /**\n   * Handle Z Keypress Events to generally undo previous actions\n   * @param event     - The originating keyboard event\n   * @param up        - Is the key being released?\n   * @param modifiers - The identified modifiers attached to this keypress\n   */\n  protected _onKeyZ(event: KeyboardEvent, up: boolean, modifiers: KeyboardManager.MetaModifiers): void;\n\n  /**\n   * Handle presses to keyboard zoom keys\n   * @param event     - The originating keyboard event\n   * @param up        - Is the key being released?\n   * @param modifiers - The identified modifiers attached to this keypress\n   */\n  protected _onKeyZoom(\n    event: KeyboardEvent,\n    up: boolean,\n    modifiers: KeyboardManager.MetaModifiers\n  ): void | ReturnType<Canvas['animatePan']>;\n\n  /**\n   * Handle DELETE Keypress Events\n   * @param event     - The originating keyboard event\n   * @param up        - Is the key being released?\n   * @param modifiers - The identified modifiers attached to this keypress\n   */\n  protected _onDelete(\n    event: KeyboardEvent,\n    up: boolean,\n    modifiers: KeyboardManager.MetaModifiers\n  ): void | Promise<foundry.abstract.Document<any, any>[] | undefined>;\n}\n\ndeclare namespace KeyboardManager {\n  interface MetaModifiers {\n    key: string;\n    isShift: boolean;\n    isCtrl: boolean;\n    isAlt: boolean;\n    hasFocus: boolean;\n    hasModifier: boolean;\n  }\n}\n"
    ]
  