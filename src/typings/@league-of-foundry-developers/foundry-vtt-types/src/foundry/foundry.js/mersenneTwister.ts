
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/foundry.js/mersenneTwister.d.ts",
      "/**\n * A standalone, pure JavaScript implementation of the Mersenne Twister pseudo random number generator.\n *\n * author: Raphael Pigulla \\<pigulla\\@four66.com\\>\n * version: 0.2.3\n * license:\n * Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1. Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright\n * notice, this list of conditions and the following disclaimer in the\n * documentation and/or other materials provided with the distribution.\n *\n * 3. The names of its contributors may not be used to endorse or promote\n * products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\ndeclare class MersenneTwister {\n  /**\n   * Instantiates a new Mersenne Twister.\n   * @param seed - The initial seed value, if not provided the current timestamp will be used.\n   */\n  constructor(seed?: number);\n\n  /**\n   * Initializes the state vector by using one unsigned 32-bit integer \"seed\", which may be zero.\n   *\n   * since: 0.1.0\n   * @param seed - The seed value.\n   */\n  seed(seed: number): number;\n\n  /**\n   * Initializes the state vector by using an array key[] of unsigned 32-bit integers of the specified length. If\n   * length is smaller than 624, then each array of 32-bit integers gives distinct initial state vector. This is\n   * useful if you want a larger seed space than 32-bit word.\n   *\n   * since: 0.1.0\n   * @param vector - The seed vector.\n   */\n  seedArray(vector: number[]): void;\n\n  /**\n   * Generates a random unsigned 32-bit integer.\n   *\n   * since: 0.1.0\n   */\n  int(): number;\n\n  /**\n   * Generates a random unsigned 31-bit integer.\n   *\n   * since: 0.1.0\n   */\n  int31(): number;\n\n  /**\n   * Generates a random real in the interval [0;1] with 32-bit resolution.\n   *\n   * since: 0.1.0\n   */\n  real(): number;\n\n  /**\n   * Generates a random real in the interval ]0;1[ with 32-bit resolution.\n   *\n   * since: 0.1.0\n   */\n  realx(): number;\n\n  /**\n   * Generates a random real in the interval [0;1[ with 32-bit resolution.\n   *\n   * since: 0.1.0\n   */\n  rnd(): number;\n\n  /**\n   * Generates a random real in the interval [0;1[ with 32-bit resolution.\n   *\n   * Same as .rnd() method - for consistency with Math.random() interface.\n   *\n   * since: 0.2.0\n   * @see {@link MersenneTwister#rnd}\n   */\n  random(): number;\n\n  /**\n   * Generates a random real in the interval [0;1[ with 53-bit resolution.\n   *\n   * since: 0.1.0\n   */\n  rndHiRes(): number;\n\n  /**\n   * A pseudo-normal distribution using the Box-Muller transform.\n   * @param mu    - The normal distribution mean\n   * @param sigma - The normal distribution standard deviation\n   */\n  normal(mu: number, sigma: number): number;\n\n  /**\n   * A factory method for generating random uniform rolls\n   * @see {@link MersenneTwister#random}\n   */\n  static random(): number;\n\n  /**\n   * A factory method for generating random normal rolls\n   * @see {@link MersenneTwister#normal}\n   */\n  static normal(mu: number, sigma: number): number;\n}\n\ndeclare const twist: MersenneTwister;\n"
    ]
  