
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/foundry.js/applications/formApplications/imagePopout.d.ts",
      "/**\n * An Image Popout Application which features a single image in a lightbox style frame.\n * This popout can also be used as a form, allowing the user to edit an image which is being used.\n * Furthermore, this application allows for sharing the display of an image with other connected players.\n *\n * @example\n * ```typescript\n * // Construct the Application instance\n * const ip = new ImagePopout(\"path/to/image.jpg\", {\n *   title: \"My Featured Image\",\n *   shareable: true,\n *   entity: game.actors.getName(\"My Hero\")\n * });\n *\n * // Display the image popout\n * ip.render(true);\n *\n * // Share the image with other connected players\n * ip.share();\n * ```\n */\ndeclare class ImagePopout extends FormApplication<ImagePopout.Options, ImagePopout.Data, string> {\n  constructor(src: string, options?: ImagePopout.Options);\n\n  /**\n   * @defaultValue `null`\n   */\n  protected _related: foundry.abstract.Document<any, any> | null;\n\n  /** @override */\n  static get defaultOptions(): ImagePopout.Options;\n\n  /** @override */\n  get title(): string;\n\n  /** @override */\n  getData(options?: Partial<ImagePopout.Options>): Promise<ImagePopout.Data>;\n\n  /**\n   * Test whether the title of the image popout should be visible to the user\n   */\n  isTitleVisible(): boolean;\n\n  /**\n   * Provide a reference to the Entity referenced by this popout, if one exists\n   */\n  getRelatedObject(): Promise<foundry.abstract.Document<any, any> | null>;\n\n  /** @override */\n  protected _render(force?: boolean, options?: Application.RenderOptions<ImagePopout.Options>): Promise<void>;\n\n  /** @override */\n  protected _getHeaderButtons(): Application.HeaderButton[];\n\n  /**\n   * Determine the correct position and dimensions for the displayed image\n   * @returns The positioning object which should be used for rendering\n   */\n  protected static getPosition(\n    img: string\n  ): Promise<{ width: number; height: number } | { width: number; height: number; top: number; left: number }>;\n\n  /**\n   * Determine the Image dimensions given a certain path\n   */\n  static getImageSize(path: string): Promise<[width: number, height: number]>;\n\n  /**\n   * Share the displayed image with other connected Users\n   */\n  shareImage(): void;\n\n  /**\n   * Handle a received request to display an image.\n   */\n  protected static _handleShareImage({\n    image,\n    title,\n    uuid\n  }?: {\n    image: string;\n    title: string;\n    uuid: string;\n  }): ImagePopout;\n\n  /**\n   * @override\n   * @remarks Not implemented for ImagePopout\n   */\n  protected _updateObject(event: Event, formData?: object): never;\n}\n\ndeclare namespace ImagePopout {\n  interface Options extends FormApplication.Options {\n    /**\n     * @defaultValue `'templates/apps/image-popout.html'`\n     */\n    template: string;\n\n    /**\n     * @defaultValue `['image-popout', 'dark']`\n     */\n    classes: string[];\n\n    /**\n     * @defaultValue `false`\n     */\n    editable: boolean;\n\n    /**\n     * @defaultValue `true`\n     */\n    resizable: boolean;\n\n    /**\n     * @defaultValue `false`\n     */\n    shareable: boolean;\n\n    /**\n     * @defaultValue `null`\n     */\n    uuid: string | null;\n  }\n\n  interface Data {\n    image: string;\n    options: Options;\n    title: string;\n    showTitle: boolean;\n  }\n}\n"
    ]
  