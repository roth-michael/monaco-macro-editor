
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/common/data/fields.mjs.d.ts",
      "import * as CONST from '../constants.mjs';\nimport { hasImageExtension, isColorString, isJSON } from './validators.mjs';\nimport { Document } from '../abstract/module.mjs';\nimport { FieldReturnType } from '../../../types/helperTypes';\n\n/**\n * A required boolean field which may be used in a Document.\n * @remarks\n * Property type: `boolean`\n * Constructor type: `boolean | undefined | null`\n * Default: `false`\n */\nexport declare const BOOLEAN_FIELD: BooleanField;\ninterface BooleanField extends DocumentField<boolean> {\n  type: typeof Boolean;\n  required: true;\n  default: false;\n}\n\n/**\n * A standard string color field which may be used in a Document.\n * @remarks\n * Property type: `string | undefined | null`\n * Constructor type: `string | undefined | null`\n */\nexport declare const COLOR_FIELD: ColorField;\ninterface ColorField extends DocumentField<string> {\n  type: typeof String;\n  required: false;\n  nullable: true;\n  validate: typeof isColorString;\n  validationError: '{name} {field} \"{value}\" is not a valid hexadecimal color string';\n}\n\n/**\n * A standard string field for an image file path which may be used in a Document.\n * @remarks\n * Property type: `string | undefined | null`\n * Constructor type: `string | undefined | null`\n */\nexport declare const IMAGE_FIELD: ImageField;\ninterface ImageField extends DocumentField<string> {\n  type: typeof String;\n  required: false;\n  nullable: true;\n  validate: typeof hasImageExtension;\n  validationError: '{name} {field} \"{value}\" does not have a valid image file extension';\n}\n\n/**\n * A standard string field for a video or image file path may be used in a Document.\n * @remarks\n * Property type: `string | undefined | null`\n * Constructor type: `string | undefined | null`\n */\nexport declare const VIDEO_FIELD: VideoField;\ninterface VideoField extends DocumentField<string> {\n  type: typeof String;\n  required: false;\n  nullable: true;\n  validate: (src: string | null) => boolean;\n  validationError: '{name} {field} \"{value}\" does not have a valid image or video file extension';\n}\n\n/**\n * A standard string field for an audio file path which may be used in a Document.\n * @remarks\n * Property type: `string | undefined | null`\n * Constructor type: `string | undefined | null`\n */\nexport declare const AUDIO_FIELD: AudioField;\ninterface AudioField extends DocumentField<string> {\n  type: typeof String;\n  required: false;\n  nullable: true;\n  validate: (src: string | null) => boolean;\n  validationError: '{name} {field} \"{value}\" does not have a valid audio file extension';\n}\n\n/**\n * A standard integer field which may be used in a Document.\n * @remarks\n * Property type: `string | undefined`\n * Constructor type: `string | undefined | null`\n */\nexport declare const INTEGER_FIELD: IntegerField;\ninterface IntegerField extends DocumentField<number> {\n  type: typeof Number;\n  required: false;\n  validate: typeof Number.isInteger;\n  validationError: '{name} {field} \"{value}\" does not have an integer value';\n}\n\n/**\n * A string field which contains serialized JSON data that may be used in a Document.\n * @remarks\n * Property type: `string | undefined`\n * Constructor type: `string | object | undefined | null`\n */\nexport declare const JSON_FIELD: JSONField;\ninterface JSONField extends DocumentField<string> {\n  type: typeof String;\n  required: false;\n  clean: (s: unknown) => string;\n  validate: typeof isJSON;\n  validationError: '{name} {field} \"{value}\" is not a valid JSON string';\n}\n\n/**\n * A non-negative integer field which may be used in a Document.\n * @remarks\n * Property type: `number | undefined`\n * Constructor type: `number | undefined | null`\n */\nexport declare const NONNEGATIVE_INTEGER_FIELD: NonnegativeIntegerField;\ninterface NonnegativeIntegerField extends DocumentField<number> {\n  type: typeof Number;\n  required: false;\n  validate: (n: unknown) => boolean;\n  validationError: '{name} {field} \"{value}\" does not have an non-negative integer value';\n}\n\n/**\n * A non-negative integer field which may be used in a Document.\n *\n * @remarks The validation actually checks for `> 0`, the JSDoc is incorrect in foundry.\n * @remarks\n * Property type: `number | undefined`\n * Constructor type: `number | undefined | null`\n */\nexport declare const POSITIVE_INTEGER_FIELD: PositiveIntegerField;\ninterface PositiveIntegerField extends DocumentField<number> {\n  type: typeof Number;\n  required: false;\n  validate: (n: unknown) => boolean;\n  validationError: '{name} {field} \"{value}\" does not have an non-negative integer value';\n}\n\n/**\n * A template for a required inner-object field which may be used in a Document.\n * @remarks\n * Property type: `object`\n * Constructor type: `object | undefined | null`\n * Default `{}`\n */\nexport declare const OBJECT_FIELD: ObjectField;\ninterface ObjectField extends DocumentField<object> {\n  type: typeof Object;\n  default: {};\n  required: true;\n}\n\n/**\n * An optional string field which may be included by a Document.\n * @remarks\n * Property type: `string | undefined`\n * Constructor type: `string | undefined | null`\n */\nexport declare const STRING_FIELD: StringField;\ninterface StringField extends DocumentField<string> {\n  type: typeof String;\n  required: false;\n  nullable: false;\n}\n\n/**\n * An optional numeric field which may be included in a Document.\n * @remarks\n * Property type: `number | undefined | null`\n * Constructor type: `number | undefined | null`\n */\nexport declare const NUMERIC_FIELD: NumericField;\ninterface NumericField extends DocumentField<number> {\n  type: typeof Number;\n  required: false;\n  nullable: true;\n}\n\n/**\n * A required numeric field which may be included in a Document and may not be null.\n * @remarks\n * Property type: `number`\n * Constructor type: `number | undefined | null`\n * Default: `0`\n */\nexport declare const REQUIRED_NUMBER: RequiredNumber;\ninterface RequiredNumber extends DocumentField<number> {\n  type: typeof Number;\n  required: true;\n  nullable: false;\n  default: 0;\n}\n\n/**\n * A required numeric field which must be a positive finite value that may be included in a Document.\n * @remarks\n * Property type: `number`\n * Constructor type: `number`\n */\nexport declare const REQUIRED_POSITIVE_NUMBER: RequiredPositiveNumber;\ninterface RequiredPositiveNumber extends DocumentField<number> {\n  type: typeof Number;\n  required: true;\n  nullable: false;\n  validate: (n: unknown) => boolean;\n  validationError: '{name} {field} \"{value}\" is not a positive number';\n}\n\n/**\n * A required numeric field which represents an angle of rotation in degrees between 0 and 360.\n * @remarks\n * Property type: `number`\n * Constructor type: `number | undefined | null`\n * Default: `360`\n */\nexport declare const ANGLE_FIELD: AngleField;\ninterface AngleField extends DocumentField<number> {\n  type: typeof Number;\n  required: true;\n  nullable: false;\n  default: 360;\n  clean: (n: unknown) => number;\n  validate: (n: number) => boolean;\n  validationError: '{name} {field} \"{value}\" is not a number between 0 and 360';\n}\n\n/**\n * A required numeric field which represents a uniform number between 0 and 1.\n * @remarks\n * Property type: `number`\n * Constructor type: `number | undefined | null`\n * Default: `1`\n */\nexport declare const ALPHA_FIELD: AlphaField;\ninterface AlphaField extends DocumentField<number> {\n  type: typeof Number;\n  required: true;\n  nullable: false;\n  default: 1;\n  validate: (n: number) => boolean;\n  validationError: '{name} {field} \"{value}\" is not a number between 0 and 1';\n}\n\n/**\n * A string field which requires a non-blank value and may not be null.\n * @remarks\n * Property type: `string`\n * Constructor type: `string`\n */\nexport declare const REQUIRED_STRING: RequiredString;\ninterface RequiredString extends DocumentField<string> {\n  type: typeof String;\n  required: true;\n  nullable: false;\n  clean: <T>(v: T) => T extends undefined ? undefined : string;\n}\n\n/**\n * A string field which is required, but may be left blank as an empty string.\n * @remarks\n * Property type: `string`\n * Constructor type: `string | undefined | null`\n * Default: `''`\n */\nexport declare const BLANK_STRING: BlankString;\ninterface BlankString extends DocumentField<string> {\n  type: typeof String;\n  required: true;\n  nullable: false;\n  clean: (v: unknown) => string;\n  default: '';\n}\n\n/**\n * A field used for integer sorting of a Document relative to its siblings\n * @remarks\n * Property type: `number`\n * Constructor type: `number | undefined | null`\n * Default: `0`\n */\nexport declare const INTEGER_SORT_FIELD: IntegerSortField;\ninterface IntegerSortField extends DocumentField<number> {\n  type: typeof Number;\n  required: true;\n  default: 0;\n  validate: typeof Number.isInteger;\n  validationError: '{name} {field} \"{value}\" is not an integer';\n}\n\n/**\n * A numeric timestamp field which may be used in a Document.\n * @remarks\n * Property type: `number | undefined`\n * Constructor type: `number | undefined | null`\n * Default: `Date.now`\n */\nexport declare const TIMESTAMP_FIELD: TimestampField;\ninterface TimestampField extends DocumentField<number> {\n  type: typeof Number;\n  required: false;\n  default: typeof Date.now;\n  nullable: false;\n}\n\n/**\n * Validate that the ID of a Document object is either null (not yet saved) or a valid string.\n * @param id - The _id to test\n * @returns Is it valid?\n */\ndeclare function _validateId(id: string | null): boolean;\n\n/**\n * The standard identifier for a Document.\n * @remarks\n * Property type: `string | null`\n * Constructor type: `string | undefined | null`\n * Default: `null`\n */\nexport declare const DOCUMENT_ID: DocumentId;\ninterface DocumentId extends DocumentField<string | null> {\n  type: typeof String;\n  required: true;\n  default: null;\n  nullable: false;\n  validate: typeof _validateId;\n  validationError: '{name} {field} \"{value}\" is not a valid document ID string';\n}\n\n/**\n * The standard permissions object which may be included by a Document.\n * @remarks\n * Property type: `Partial<Record<string, foundry.CONST.EntityPermission>>`\n * Constructor type: `Partial<Record<string, foundry.CONST.EntityPermission>> | undefined | null`\n * Default: `{ default: CONST.ENTITY_PERMISSIONS.NONE }`\n */\nexport declare const DOCUMENT_PERMISSIONS: DocumentPermissions;\ninterface DocumentPermissions extends DocumentField<Partial<Record<string, foundry.CONST.EntityPermission>>> {\n  type: typeof Object;\n  required: true;\n  nullable: false;\n  default: { default: typeof CONST.ENTITY_PERMISSIONS.NONE };\n  validate: typeof _validatePermissions;\n  validationError: '{name} {field} \"{value}\" is not a mapping of user IDs and document permission levels';\n}\n\n/**\n * Validate the structure of the permissions object: all keys are valid IDs and all values are permission levels\n * @param perms - The provided permissions object\n * @returns Is the object valid?\n */\ndeclare function _validatePermissions(perms: object): boolean;\n\ninterface ForeignDocumentFieldOptions {\n  type: {\n    readonly documentName: string;\n  };\n  required?: boolean;\n  nullable?: boolean;\n  default?: any;\n}\n\n/**\n * Create a foreign key field which references a primary Document id\n */\nexport declare function foreignDocumentField<T extends ForeignDocumentFieldOptions>(\n  options: T\n): ForeignDocumentField<T>;\ninterface ForeignDocumentField<T extends ForeignDocumentFieldOptions> extends DocumentField<string | null> {\n  type: typeof String;\n  required: T extends {\n    required: true;\n  }\n    ? true\n    : false;\n  nullable: T extends {\n    nullable?: true;\n  }\n    ? true\n    : T extends {\n        nullable: false;\n      }\n    ? false\n    : boolean;\n  default: T extends {\n    default: infer U;\n  }\n    ? U\n    : null;\n  clean: (d: unknown) => string | null;\n  validate: typeof _validateId;\n  validationError: `{name} {field} \"{value}\" is not a valid ${T['type']['documentName']} id`;\n}\n\ninterface EmbeddedCollectionFieldOptions {\n  required?: boolean;\n  default?: any[];\n}\n\n/**\n * Create a special field which contains a Collection of embedded Documents\n * @param document - The Document class definition\n * @param options  - Additional field options\n *                   (default: `{}`)\n */\nexport declare function embeddedCollectionField<\n  ConcreteDocumentConstructor extends { readonly documentName: string } & ConstructorOf<Document<any, any>>,\n  Options extends EmbeddedCollectionFieldOptions\n>(\n  document: ConcreteDocumentConstructor,\n  options?: Options\n): EmbeddedCollectionField<ConcreteDocumentConstructor, Options>;\n// TODO: Improve\ninterface EmbeddedCollectionField<\n  ConcreteDocumentConstructor extends ConstructorOf<Document<any, any>>,\n  Options extends EmbeddedCollectionFieldOptions = {}\n> extends DocumentField<any> {\n  type: Partial<Record<string, ConcreteDocumentConstructor>>;\n  required: Options extends { required?: true } ? true : Options extends { required: false } ? false : boolean;\n  default: Options extends { default?: Array<infer U> } ? Array<U> : unknown[];\n  isCollection: true;\n}\n\n/**\n * Return a document field which is a modification of a static field type\n */\nexport declare function field<T extends DocumentField<any>, U extends Partial<DocumentField<any>>>(\n  field: T,\n  options?: U\n): FieldReturnType<T, U>;\n"
    ]
  