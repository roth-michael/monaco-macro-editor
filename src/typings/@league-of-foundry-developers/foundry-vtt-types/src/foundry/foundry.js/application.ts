
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/foundry.js/application.d.ts",
      "/**\n * @defaultValue `0`\n */\ndeclare let _appId: number;\n\n/**\n * @defaultValue `100`\n */\ndeclare let _maxZ: number;\n\ndeclare const MIN_WINDOW_WIDTH: 200;\ndeclare const MIN_WINDOW_HEIGHT: 50;\n\n/**\n * The standard application window that is rendered for a large variety of UI elements in Foundry VTT.\n * @typeParam Options - the type of the options object\n */\ndeclare abstract class Application<Options extends Application.Options = Application.Options> {\n  /**\n   * @param options - Configuration options which control how the application is rendered.\n   *                  Application subclasses may add additional supported options, but the\n   *                  following configurations are supported for all Applications. The values\n   *                  passed to the constructor are combined with the defaultOptions defined\n   *                  at the class level.\n   */\n  constructor(options?: Partial<Options>);\n\n  /**\n   * The options provided to this application upon initialization\n   */\n  options: Options;\n\n  /**\n   * The application ID is a unique incrementing integer which is used to identify every application window\n   * drawn by the VTT\n   */\n  appId: number;\n\n  /**\n   * An internal reference to the HTML element this application renders\n   * @defaultValue `null`\n   */\n  protected _element: JQuery | null;\n\n  /**\n   * Track the current position and dimensions of the Application UI\n   */\n  position: Application.Position;\n\n  /**\n   * DragDrop workflow handlers which are active for this Application\n   */\n  protected _dragDrop: DragDrop[];\n\n  /**\n   * Tab navigation handlers which are active for this Application\n   */\n  protected _tabs: Tabs[];\n\n  /**\n   * SearchFilter handlers which are active for this Application\n   */\n  protected _searchFilters: SearchFilter[];\n\n  /**\n   * Track whether the Application is currently minimized\n   * @defaultValue `false`\n   */\n  protected _minimized: boolean;\n\n  /**\n   * Track the render state of the Application\n   * @defaultValue {@link Application.RENDER_STATES.NONE}\n   * @see {@link Application.RENDER_STATES}\n   */\n  protected _state: Application.RenderState;\n\n  /**\n   * The prior render state of this Application.\n   * This allows for rendering logic to understand if the application is being rendered for the first time.\n   * @defaultValue {@link Application.RENDER_STATES.NONE}\n   * @see {@link Application.RENDER_STATES}\n   */\n  protected _priorState: Application.RenderState;\n\n  /**\n   * Track the most recent scroll positions for any vertically scrolling containers\n   * @defaultValue `null`\n   */\n  protected _scrollPositions: Partial<Record<string, number>> | null;\n\n  /**\n   * The sequence of rendering states that track the Application life-cycle.\n   * @see {@link Application.RenderState}\n   */\n  static RENDER_STATES: Readonly<{\n    CLOSING: -2;\n    CLOSED: -1;\n    NONE: 0;\n    RENDERING: 1;\n    RENDERED: 2;\n    ERROR: 3;\n  }>;\n\n  /**\n   * Create drag-and-drop workflow handlers for this Application\n   * @returns An array of DragDrop handlers\n   */\n  protected _createDragDropHandlers(): DragDrop[];\n\n  /**\n   * Create tabbed navigation handlers for this Application\n   * @returns An array of Tabs handlers\n   */\n  protected _createTabHandlers(): Tabs[];\n\n  /**\n   * Create search filter handlers for this Application\n   * @returns An array of SearchFilter handlers\n   */\n  protected _createSearchFilters(): SearchFilter[];\n\n  /**\n   * Assign the default options configuration which is used by this Application class. The options and values defined\n   * in this object are merged with any provided option values which are passed to the constructor upon initialization.\n   * Application subclasses may include additional options which are specific to their usage.\n   */\n  static get defaultOptions(): Application.Options;\n\n  /**\n   * Return the CSS application ID which uniquely references this UI element\n   */\n  get id(): string;\n\n  /**\n   * Return the active application element, if it currently exists in the DOM\n   */\n  get element(): JQuery;\n\n  /**\n   * The path to the HTML template file which should be used to render the inner content of the app\n   */\n  get template(): string;\n\n  /**\n   * Control the rendering style of the application. If popOut is true, the application is rendered in its own\n   * wrapper window, otherwise only the inner app content is rendered\n   */\n  get popOut(): boolean;\n\n  /**\n   * Return a flag for whether the Application instance is currently rendered\n   */\n  get rendered(): boolean;\n\n  /**\n   * An Application window should define its own title definition logic which may be dynamic depending on its data\n   */\n  get title(): string;\n\n  /**\n   * An application should define the data object used to render its template.\n   * This function may either return an Object directly, or a Promise which resolves to an Object\n   * If undefined, the default implementation will return an empty object allowing only for rendering of static HTML\n   * @param options - (unused, default: `{}`)\n   */\n  getData(options?: Partial<Options>): object | Promise<object>;\n\n  /**\n   * Render the Application by evaluating it's HTML template against the object of data provided by the getData method\n   * If the Application is rendered as a pop-out window, wrap the contained HTML in an outer frame with window controls\n   *\n   * @param force   - Add the rendered application to the DOM if it is not already present. If false, the\n   *                  Application will only be re-rendered if it is already present.\n   *                  (default: `false`)\n   * @param options - Additional rendering options which are applied to customize the way that the Application\n   *                  is rendered in the DOM.\n   *                  (default: `{}`)\n   * @returns The rendered Application instance\n   * @remarks Some subclasses return other results.\n   */\n  render(force?: boolean, options?: Application.RenderOptions<Options>): unknown;\n\n  /**\n   * An asynchronous inner function which handles the rendering of the Application\n   * @param force   - Render and display the application even if it is not currently displayed.\n   *                  (default: `false`)\n   * @param options - New Application options which update the current values of the Application#options object\n   *                  (default: `{}`)\n   * @returns A Promise that resolves to the Application once rendering is complete\n   */\n  protected _render(force?: boolean, options?: Application.RenderOptions<Options>): Promise<void>;\n\n  /**\n   * Return the inheritance chain for this Application class up to (and including) it's base Application class.\n   */\n  protected static _getInheritanceChain(): typeof Application[];\n\n  /**\n   * Persist the scroll positions of containers within the app before re-rendering the content\n   * @param html - The HTML object being traversed\n   */\n  protected _saveScrollPositions(html: JQuery): void;\n\n  /**\n   * Restore the scroll positions of containers within the app after re-rendering the content\n   * @param html - The HTML object being traversed\n   */\n  protected _restoreScrollPositions(html: JQuery): void;\n\n  /**\n   * Render the outer application wrapper\n   * @returns A promise resolving to the constructed jQuery object\n   */\n  protected _renderOuter(): Promise<HTMLElement> | Promise<JQuery<JQuery.Node>>;\n\n  /**\n   * Render the inner application content\n   * @param data - The data used to render the inner template\n   * @returns A promise resolving to the constructed jQuery object\n   * @remarks Some subclasses do not return a promise but the jQuery object directly.\n   */\n  protected _renderInner(data: object): Promise<JQuery> | JQuery;\n\n  /**\n   * Customize how inner HTML is replaced when the application is refreshed\n   * @param element - The original HTML processed as a jQuery object\n   * @param html    - New updated HTML as a jQuery object\n   */\n  protected _replaceHTML(element: JQuery, html: JQuery): void;\n\n  /**\n   * Customize how a new HTML Application is added and first appears in the DOC\n   * @param html - The HTML element which is ready to be added to the DOM\n   */\n  protected _injectHTML(html: JQuery): void;\n\n  /**\n   * Specify the set of config buttons which should appear in the Application header.\n   * Buttons should be returned as an Array of objects.\n   * The header buttons which are added to the application can be modified by the getApplicationHeaderButtons hook.\n   */\n  protected _getHeaderButtons(): Application.HeaderButton[];\n\n  /**\n   * Activate required listeners which must be enabled on every Application.\n   * These are internal interactions which should not be overridden by downstream subclasses.\n   */\n  protected _activateCoreListeners(html: JQuery): void;\n\n  /**\n   * After rendering, activate event listeners which provide interactivity for the Application.\n   * This is where user-defined Application subclasses should attach their event-handling logic.\n   */\n  activateListeners(html: JQuery): void;\n\n  /**\n   * Handle changes to the active tab in a configured Tabs controller\n   * @param event  - A left click event\n   *                 (unused)\n   * @param tabs   - The Tabs controller\n   *                 (unused)\n   * @param active - The new active tab name\n   *                 (unused)\n   */\n  protected _onChangeTab(event: MouseEvent | null, tabs: Tabs, active: string): void;\n\n  /**\n   * Handle changes to search filtering controllers which are bound to the Application\n   * @param event - The key-up event from keyboard input\n   *                (unused)\n   * @param query - The regular expression to test against\n   *                (unused)\n   * @param rgx   - The regular expression to test against\n   *                (unused)\n   * @param html  - The HTML element which should be filtered\n   *                (unused)\n   */\n  protected _onSearchFilter(event: KeyboardEvent, query: string, rgx: RegExp, html: HTMLElement): void;\n\n  /**\n   * Define whether a user is able to begin a dragstart workflow for a given drag selector\n   * @param selector - The candidate HTML selector for dragging\n   *                   (unused)\n   * @returns Can the current user drag this selector?\n   */\n  protected _canDragStart(selector: string): boolean;\n\n  /**\n   * Define whether a user is able to conclude a drag-and-drop workflow for a given drop selector\n   * @param selector - The candidate HTML selector for the drop target\n   *                   (unused)\n   * @returns Can the current user drop on this selector?\n   */\n  protected _canDragDrop(selector: string): boolean;\n\n  /**\n   * Callback actions which occur at the beginning of a drag start workflow.\n   * @param event - The originating DragEvent\n   *                (unused)\n   */\n  protected _onDragStart(event: DragEvent): void;\n\n  /**\n   * Callback actions which occur when a dragged element is over a drop target.\n   * @param event - originating DragEvent\n   *                (unused)\n   */\n  protected _onDragOver(event: DragEvent): void;\n\n  /**\n   * Callback actions which occur when a dragged element is dropped on a target.\n   * @param event - The originating DragEvent\n   *                (unused)\n   * @remarks\n   * The implementation in {@link Application} actually returns `void` but it is\n   * typed as `unknown` to allow deriving methods to return whatever they want.\n   * The returned value is not meant to be used.\n   */\n  protected _onDrop(event: DragEvent): unknown;\n\n  /**\n   * Bring the application to the top of the rendering stack\n   */\n  bringToTop(): void;\n\n  /**\n   * Close the application and un-register references to it within UI mappings\n   * This function returns a Promise which resolves once the window closing animation concludes\n   * @param options - (default: `{}`)\n   * @returns A Promise which resolves once the application is closed\n   */\n  close(options?: Application.CloseOptions): Promise<void>;\n\n  /**\n   * Minimize the pop-out window, collapsing it to a small tab\n   * Take no action for applications which are not of the pop-out variety or apps which are already minimized\n   * @returns A Promise which resolves once the minimization action has completed\n   */\n  minimize(): Promise<void>;\n\n  /**\n   * Maximize the pop-out window, expanding it to its original size\n   * Take no action for applications which are not of the pop-out variety or are already maximized\n   * @returns A Promise which resolves once the maximization action has completed\n   */\n  maximize(): Promise<void>;\n\n  /**\n   * Set the application position and store it's new location.\n   * @param left   - The left offset position in pixels\n   * @param top    - The top offset position in pixels\n   * @param width  - The application width in pixels\n   * @param height - The application height in pixels\n   * @param scale  - The application scale as a numeric factor where 1.0 is default\n   * @returns The updated position object for the application containing the new values\n   */\n  setPosition({\n    left,\n    top,\n    width,\n    height,\n    scale\n  }?: Partial<Application.Position>): (Application.Position & { height: number }) | void;\n\n  /**\n   * Handle application minimization behavior - collapsing content and reducing the size of the header\n   */\n  protected _onToggleMinimize(ev: Event): void;\n\n  /**\n   * Additional actions to take when the application window is resized\n   * @param event - (unused)\n   */\n  protected _onResize(event: Event): void;\n}\n\ndeclare namespace Application {\n  interface CloseOptions {\n    force?: boolean | undefined;\n  }\n\n  interface HeaderButton {\n    label: string;\n    class: string;\n    icon: string;\n    onclick: ((ev: JQuery.ClickEvent) => void) | null;\n  }\n\n  interface Options {\n    /**\n     * A named \"base application\" which generates an additional hook\n     * @defaultValue `null`\n     */\n    baseApplication: string | null;\n\n    /**\n     * The default pixel width for the rendered HTML\n     * @defaultValue `null`\n     */\n    width: number | null;\n\n    /**\n     * The default pixel height for the rendered HTML\n     * @defaultValue `null`\n     */\n    height: number | 'auto' | null;\n\n    /**\n     * The default offset-top position for the rendered HTML\n     * @defaultValue `null`\n     */\n    top: number | null;\n\n    /**\n     * The default offset-left position for the rendered HTML\n     * @defaultValue `null`\n     */\n    left: number | null;\n\n    /**\n     * A transformation scale for the rendered HTML\n     */\n    scale?: number | null | undefined;\n\n    /**\n     * Whether to display the application as a pop-out container\n     * @defaultValue `true`\n     */\n    popOut: boolean;\n\n    /**\n     * Whether the rendered application can be minimized (popOut only)\n     * @defaultValue `true`\n     */\n    minimizable: boolean;\n\n    /**\n     * Whether the rendered application can be drag-resized (popOut only)\n     * @defaultValue `false`\n     */\n    resizable: boolean;\n\n    /**\n     * The default CSS id to assign to the rendered HTML\n     * @defaultValue `''`\n     */\n    id: string;\n\n    /**\n     * An array of CSS string classes to apply to the rendered HTML\n     * @defaultValue `[]`\n     */\n    classes: string[];\n\n    /**\n     * A default window title string (popOut only)\n     * @defaultValue `''`\n     */\n    title: string;\n\n    /**\n     * The default HTML template path to render for this Application\n     * @defaultValue `null`\n     */\n    template: string | null;\n\n    /**\n     * A list of unique CSS selectors which target containers that should\n     * have their vertical scroll positions preserved during a re-render.\n     * @defaultValue `[]`\n     */\n    scrollY: string[];\n\n    /**\n     * An array of tabbed container configurations which should be enabled\n     * for the application.\n     * @defaultValue `[]`\n     */\n    tabs: Omit<TabsConfiguration, 'callback'>[];\n\n    /**\n     * @defaultValue `[]`\n     */\n    dragDrop: Omit<DragDrop.Options, 'permissions' | 'callbacks'>[];\n\n    /**\n     * @defaultValue `[]`\n     */\n    filters: Omit<SearchFilter.Options, 'callback'>[];\n  }\n\n  interface Position {\n    width: number | null;\n    height: number | null | 'auto';\n    left: number | null;\n    top: number | null;\n    scale: number | null | undefined;\n  }\n\n  type RenderOptions<Options extends Application.Options = Application.Options> = Partial<Options> & {\n    /**\n     * The left positioning attribute\n     */\n    left?: number | null | undefined;\n\n    /**\n     * The top positioning attribute\n     */\n    top?: number | null | undefined;\n\n    /**\n     * The rendered width\n     */\n    width?: number | null | undefined;\n\n    /**\n     * The rendered height\n     */\n    height?: number | null | undefined;\n\n    /**\n     * The rendered transformation scale\n     */\n    scale?: number | null | undefined;\n\n    /**\n     * Apply focus to the application, maximizing it and bringing it to the top\n     * of the vertical stack.\n     * @defaultValue `false`\n     */\n    focus?: boolean | undefined;\n\n    /**\n     * A context-providing string which suggests what event triggered the render\n     */\n    renderContext?: string | undefined;\n\n    /**\n     * The data change which motivated the render request\n     */\n    renderData?: object | undefined;\n  };\n\n  /**\n   * @see {@link Application.RENDER_STATES}\n   */\n  type RenderState = ValueOf<typeof Application['RENDER_STATES']>;\n}\n"
    ]
  