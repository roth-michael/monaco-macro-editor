
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/foundry.js/textEditor.d.ts",
      "/**\n * A collection of helper functions and utility methods related to the rich text editor\n */\ndeclare class TextEditor {\n  /**\n   * Create a Rich Text Editor. The current implementation uses TinyMCE\n   * @param options - Configuration options provided to the Editor init\n   * @param content - Initial HTML or text content to populate the editor with\n   *                  (default: `''`)\n   * @returns The editor instance.\n   */\n  static create(options: TextEditor.Options, content: string): Promise<tinyMCE.Editor>;\n\n  /**\n   * Safely decode an HTML string, removing invalid tags and converting entities back to unicode characters.\n   * @param html - The original encoded HTML string\n   * @returns The decoded unicode string\n   */\n  static decodeHTML(html: string): string;\n\n  /**\n   * Enrich HTML content by replacing or augmenting components of it\n   * @param content  - The original HTML content (as a string)\n   * @param options  - Additional options which configure how HTML is enriched\n   *                   (default: `{}`)\n   * @returns The enriched HTML content\n   */\n  static enrichHTML(content: string, options?: Partial<TextEditor.EnrichOptions>): string;\n\n  /**\n   * Preview an HTML fragment by constructing a substring of a given length from its inner text.\n   * @param content - The raw HTML to preview\n   * @param length  - The desired length\n   *                  (default: `250`)\n   * @returns The previewed HTML\n   */\n  static previewHTML(content: string, length: number): string;\n\n  /**\n   * Truncate a fragment of text to a maximum number of characters.\n   * @param text       - The original text fragment that should be truncated to a maximum length\n   * @param maxLength  - The maximum allowed length of the truncated string.\n   *                     (default: `50`)\n   * @param splitWords - Whether to truncate by splitting on white space (if true) or breaking words.\n   *                     (default: `true`)\n   * @param suffix     - A suffix string to append to denote that the text was truncated.\n   *                     (default: `'â€¦'`)\n   */\n  static truncateText(\n    text: string,\n    { maxLength, splitWords, suffix }?: { maxLength?: number; splitWords?: boolean; suffix?: string }\n  ): string;\n\n  /**\n   * Recursively identify the text nodes within a parent HTML node for potential content replacement.\n   * @param parent - The parent HTML Element\n   * @returns An array of contained Text nodes\n   */\n  protected static _getTextNodes(parent: HTMLElement): Text[];\n\n  /**\n   * Facilitate the replacement of text node content using a matching regex rule and a provided replacement function.\n   */\n  protected static _replaceTextContent(\n    text: Text[],\n    rgx: RegExp,\n    func: (...match: RegExpMatchArray[]) => Node\n  ): boolean;\n\n  /**\n   * Replace a matched portion of a Text node with a replacement Node\n   */\n  protected static _replaceTextNode(text: Text, match: RegExpMatchArray, replacement: Node): void;\n\n  /**\n   * Create a dynamic entity link from a regular expression match\n   * @param match  - The full matched string\n   * @param type   - The matched entity type or \"Compendium\"\n   * @param target - The requested match target (_id or name)\n   * @param name   - A customized or over-ridden display name for the link\n   * @returns An HTML element for the entity link\n   */\n  protected static _createEntityLink(match: string, type: string, target: string, name: string): HTMLAnchorElement;\n\n  /**\n   * Replace a hyperlink-like string with an actual HTML <a> tag\n   * @param match - The full matched string\n   * @returns An HTML element for the entity link\n   */\n  protected static _createHyperlink(match: string): HTMLAnchorElement;\n\n  /**\n   * Replace an inline roll formula with a rollable <a> element or an eagerly evaluated roll result\n   * @param match   - The matched string\n   * @param command - An optional command\n   * @param formula - The matched formula\n   * @param closing - The closing brackets for the inline roll\n   * @returns The replaced match\n   */\n  protected static _createInlineRoll(\n    match: string,\n    command: string,\n    formula: string,\n    closing: string,\n    ...args: object[]\n  ): string;\n\n  static activateListeners(): void;\n\n  /**\n   * Handle click events on Entity Links\n   */\n  protected static _onClickEntityLink(event: Event): Promise<void>;\n\n  /**\n   * Handle left-mouse clicks on an inline roll, dispatching the formula or displaying the tooltip\n   * @param event - The initiating click event\n   */\n  protected static _onClickInlineRoll(event: MouseEvent): Promise<void | Promise<void> | Promise<ChatMessage> | object>;\n\n  /**\n   * Begin a Drag+Drop workflow for a dynamic content link\n   * @param event - The originating drag event\n   */\n  protected static _onDragEntityLink(event: Event): void;\n\n  /**\n   * Begin a a data transfer drag event with default handling\n   */\n  protected _onDragStart(event: Event): void;\n\n  /**\n   * Handle dropping of transferred data onto the active rich text editor\n   * @param event  - The originating drop event which triggered the data transfer\n   * @param editor - The TinyMCE editor instance being dropped on\n   */\n  protected static _onDropEditorData(event: Event, editor: tinyMCE.Editor): Promise<void>;\n\n  protected static _decoder: HTMLTextAreaElement;\n}\n\ndeclare namespace TextEditor {\n  interface Options {\n    /**\n     * @defaultValue `false`\n     */\n    branding?: boolean;\n\n    /**\n     * @defaultValue `['/css/mce.css']`\n     */\n    content_css?: string[];\n\n    /**\n     * @defaultValue `false`\n     */\n    menubar?: boolean;\n\n    /**\n     * @defaultValue `'lists image table hr code save link'`\n     */\n    plugins?: string;\n\n    /**\n     * @defaultValue `true`\n     */\n    save_enablewhendirty?: boolean;\n\n    /**\n     * @defaultValue `false`\n     */\n    statusbar?: boolean;\n\n    style_formats?: [\n      {\n        items?: [\n          {\n            /**\n             * @defaultValue `'section'`\n             */\n            block?: string;\n\n            /**\n             * @defaultValue `'secrect'`\n             */\n            classes?: string;\n\n            /**\n             * @defaultValue `'Secret'`\n             */\n            title?: string;\n\n            /**\n             * @defaultValue `true`\n             */\n            wrapper?: boolean;\n          }\n        ];\n\n        /**\n         * @defaultValue `'Custom'`\n         */\n        title?: string;\n      }\n    ];\n\n    /**\n     * @defaultValue `true`\n     */\n    style_formats_merge?: boolean;\n\n    /**\n     * @defaultValue `{}`\n     */\n    table_default_styles?: object;\n\n    target: HTMLElement;\n\n    /**\n     * @defaultValue `'styleselect bullist numlist image table hr link removeformat code save'`\n     */\n    toolbar?: string;\n  }\n\n  interface EnrichOptions {\n    /**\n     * Include secret tags in the final HTML? If false secret blocks will be removed.\n     * @defaultValue `false`\n     */\n    secrets: boolean;\n\n    /**\n     * Replace dynamic entity links?\n     * @defaultValue `true`\n     */\n    entities: boolean;\n\n    /**\n     * Replace hyperlink content?\n     * @defaultValue `true`\n     */\n    links: boolean;\n\n    /**\n     * Replace inline dice rolls?\n     * @defaultValue `true`\n     */\n    rolls: boolean;\n\n    /**\n     * The data object providing context for inline rolls\n     */\n    rollData: object | (() => object);\n  }\n}\n"
    ]
  