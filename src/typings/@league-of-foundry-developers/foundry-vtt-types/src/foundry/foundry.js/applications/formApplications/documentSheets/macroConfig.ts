
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/foundry.js/applications/formApplications/documentSheets/macroConfig.d.ts",
      "import type { ConfiguredDocumentClass } from '../../../../../types/helperTypes';\n\ndeclare global {\n  /**\n   * A Macro configuration sheet\n   *\n   * @see {@link Macro} The Macro Entity which is being configured\n   * @typeParam Options - the type of the options object\n   * @typeParam Data    - The data structure used to render the handlebars template.\n   */\n  class MacroConfig<\n    Options extends DocumentSheet.Options = MacroConfig.Options,\n    Data extends object = MacroConfig.Data<Options>\n  > extends DocumentSheet<Options, Data, InstanceType<ConfiguredDocumentClass<typeof Macro>>> {\n    /**\n     * @override\n     * @defaultValue\n     * ```typescript\n     * foundry.utils.mergeObject(super.defaultOptions, {\n     *   classes: [\"sheet\", \"macro-sheet\"],\n     *   template: \"templates/sheets/macro-config.html\",\n     *   width: 560,\n     *   height: 480,\n     *   resizable: true\n     * });\n     * ```\n     */\n    static get defaultOptions(): MacroConfig.Options;\n\n    /** @override */\n    get id(): string;\n\n    /** @override */\n    getData(options?: Partial<Options>): Data;\n\n    /** @override */\n    activateListeners(html: JQuery): void;\n\n    /**\n     * Handle changing the actor profile image by opening a FilePicker\n     * @internal\n     */\n    protected _onEditImage(event: JQuery.ClickEvent): ReturnType<FilePicker['browse']>;\n\n    /**\n     * Save and execute the macro using the button on the configuration sheet\n     * @param event - The originating click event\n     * @internal\n     */\n    protected _onExecute(event: JQuery.ClickEvent): Promise<void>;\n\n    /** @override */\n    protected _updateObject(\n      event: Event,\n      formData: MacroConfig.FormData\n    ): Promise<InstanceType<ConfiguredDocumentClass<typeof Macro>> | undefined>;\n  }\n\n  namespace MacroConfig {\n    type Options = DocumentSheet.Options;\n\n    /**\n     * @typeParam Options - the type of the options object\n     */\n    interface Data<Options extends DocumentSheet.Options>\n      extends DocumentSheet.Data<InstanceType<ConfiguredDocumentClass<typeof Macro>>, Options> {\n      macroTypes: Array<ValueOf<typeof CONST.MACRO_TYPES>>;\n      macroScopes: typeof foundry.CONST['MACRO_SCOPES'];\n    }\n\n    type FormData = {\n      command: string;\n      img: string;\n      name: string;\n      type: ValueOf<typeof CONST.MACRO_TYPES>;\n    };\n  }\n}\n"
    ]
  