
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/foundry.js/pixi/containers/canvasLayers/placeablesLayer.d.ts",
      "import {\n  DataSourceForPlaceable,\n  ConfiguredDocumentClass,\n  ConfiguredObjectClassForName,\n  ConfiguredDocumentClassForName,\n  PlaceableDocumentType\n} from '../../../../../types/helperTypes';\nimport EmbeddedCollection from '../../../../common/abstract/embedded-collection.mjs';\n\ntype ConcretePlaceableOrPlaceableObject<T> = T extends PlaceableObject ? T : PlaceableObject;\n\ndeclare global {\n  /**\n   * A subclass of Canvas Layer which is specifically designed to contain multiple PlaceableObject instances,\n   * each corresponding to an embedded Document.\n   * @typeParam DocumentName - The key of the configuration which defines the object and document class.\n   * @typeParam Options      - The type of the options in this layer.\n   */\n  abstract class PlaceablesLayer<\n    DocumentName extends PlaceableDocumentType,\n    Options extends PlaceablesLayer.LayerOptions<DocumentName> = PlaceablesLayer.LayerOptions<DocumentName>\n  > extends CanvasLayer<Options> {\n    constructor();\n\n    /**\n     * Placeable Layer Objects\n     * @defaultValue `null`\n     */\n    objects: PIXI.Container | null;\n\n    /**\n     * Preview Object Placement\n     * @defaultValue `null`\n     */\n    preview: PIXI.Container | null;\n\n    /**\n     * Keep track of history so that CTRL+Z can undo changes\n     */\n    history: Array<\n      CanvasHistory<ConcretePlaceableOrPlaceableObject<InstanceType<ConfiguredObjectClassForName<DocumentName>>>>\n    >;\n\n    /**\n     * Track the PlaceableObject on this layer which is currently being hovered upon\n     * @defaultValue `null`\n     */\n    protected _hover: ConcretePlaceableOrPlaceableObject<\n      InstanceType<ConfiguredObjectClassForName<DocumentName>>\n    > | null;\n\n    /**\n     * Track the set of PlaceableObjects on this layer which are currently controlled by their id\n     * @defaultValue `{}`\n     */\n    protected _controlled: Record<string, InstanceType<ConfiguredObjectClassForName<DocumentName>>>;\n\n    /**\n     * Keep track of an object copied with CTRL+C which can be pasted later\n     * @defaultValue `[]`\n     */\n    protected _copy: ConcretePlaceableOrPlaceableObject<InstanceType<ConfiguredObjectClassForName<DocumentName>>>[];\n\n    /**\n     * A Quadtree which partitions and organizes Walls into quadrants for efficient target identification.\n     */\n    quadtree: Quadtree<\n      ConcretePlaceableOrPlaceableObject<InstanceType<ConfiguredObjectClassForName<DocumentName>>>\n    > | null;\n\n    /** @override */\n    static get layerOptions(): PlaceablesLayer.LayerOptions<any>;\n\n    /**\n     * A reference to the named Document type which is contained within this Canvas Layer.\n     * @remarks This getter is abstract in {@link PlaceablesLayer}.\n     */\n    static documentName: PlaceableDocumentType;\n\n    /**\n     * Obtain a reference to the Collection of embedded Document instances within the currently viewed Scene\n     */\n    get documentCollection(): EmbeddedCollection<\n      ConfiguredDocumentClassForName<DocumentName>,\n      foundry.data.SceneData\n    > | null;\n\n    /**\n     * Define a Container implementation used to render placeable objects contained in this layer\n     */\n    static get placeableClass(): ConstructorOf<PlaceableObject>;\n\n    /**\n     * Return the precision relative to the Scene grid with which Placeable objects should be snapped\n     */\n    get gridPrecision(): number;\n\n    /**\n     * If objects on this PlaceableLayer have a HUD UI, provide a reference to its instance\n     * @remarks Returns `null` unless overridden\n     */\n    get hud(): BasePlaceableHUD<InstanceType<ConfiguredObjectClassForName<DocumentName>>> | null;\n\n    /**\n     * A convenience method for accessing the placeable object instances contained in this layer\n     */\n    get placeables(): InstanceType<ConfiguredObjectClassForName<DocumentName>>[];\n\n    /**\n     * An Array of placeable objects in this layer which have the _controlled attribute\n     */\n    get controlled(): InstanceType<ConfiguredObjectClassForName<DocumentName>>[];\n\n    /**\n     * Obtain an iterable of objects which should be added to this PlaceableLayer\n     */\n    getDocuments(): Exclude<this['documentCollection'], null> | [];\n\n    /**\n     * @override\n     * @remarks It returns Promise<this> but is overridden by a subclass in this way.\n     */\n    draw(): Promise<this | undefined>;\n\n    /**\n     * Draw a single placeable object\n     */\n    createObject(\n      data: InstanceType<ConfiguredDocumentClassForName<DocumentName>>\n    ): InstanceType<ConfiguredObjectClassForName<DocumentName>>;\n\n    /** @override */\n    tearDown(): Promise<this>;\n\n    /** @override */\n    activate(): this;\n\n    /** @override */\n    deactivate(): this;\n\n    /**\n     * Get a PlaceableObject contained in this layer by it's ID\n     *\n     * @param objectId - The ID of the contained object to retrieve\n     * @returns The object instance, or undefined\n     */\n    get(objectId: string): InstanceType<ConfiguredObjectClassForName<DocumentName>> | undefined;\n\n    /**\n     * Acquire control over all PlaceableObject instances which are visible and controllable within the layer.\n     *\n     * @param options - Options passed to the control method of each object\n     *                  (default: `{}`)\n     * @returns An array of objects that were controlled\n     */\n    controlAll(options?: PlaceableObject.ControlOptions): InstanceType<ConfiguredObjectClassForName<DocumentName>>[];\n\n    /**\n     * Release all controlled PlaceableObject instance from this layer.\n     *\n     * @param options - Options passed to the release method of each object\n     *                  (default: `{}`)\n     * @returns The number of PlaceableObject instances which were released\n     */\n    releaseAll(options?: PlaceableObject.ReleaseOptions): number;\n\n    /**\n     * Simultaneously rotate multiple PlaceableObjects using a provided angle or incremental.\n     * This executes a single database operation using Scene.update.\n     * If rotating only a single object, it is better to use the PlaceableObject.rotate instance method.\n     *\n     * @param options - Options which configure how multiple objects are rotated\n     *                  (default: `{}`)\n     * @returns An array of objects which were rotated\n     */\n    rotateMany(options?: RotationOptions): Promise<InstanceType<ConfiguredObjectClassForName<DocumentName>>[]>;\n\n    /**\n     * Simultaneously move multiple PlaceableObjects via keyboard movement offsets.\n     * This executes a single database operation using Scene.update.\n     * If moving only a single object, this will delegate to PlaceableObject.update for performance reasons.\n     *\n     * @param options - Options which configure how multiple objects are moved\n     *                  (default: `{}`)\n     * @returns An array of objects which were moved during the operation\n     */\n    moveMany(\n      options?: MovementOptions\n    ): Promise<InstanceType<ConfiguredObjectClassForName<DocumentName>>[]> | undefined;\n\n    /**\n     * Undo a change to the objects in this layer\n     * This method is typically activated using CTRL+Z while the layer is active\n     */\n    undoHistory(): Promise<InstanceType<ConfiguredDocumentClassForName<DocumentName>>[]>;\n\n    /**\n     * A helper method to prompt for deletion of all PlaceableObject instances within the Scene\n     * Renders a confirmation dialogue to confirm with the requester that all objects will be deleted\n     * @returns An array of Document objects which were deleted by the operation\n     */\n    deleteAll(): Promise<InstanceType<ConfiguredDocumentClassForName<DocumentName>>[] | false | null>;\n\n    /**\n     * Record a new CRUD event in the history log so that it can be undone later\n     * @param type - The event type (create, update, delete)\n     * @param data - The object data\n     */\n    storeHistory(\n      type: PlaceablesLayer.HistoryEventType,\n      data: DataSourceForPlaceable<\n        ConcretePlaceableOrPlaceableObject<InstanceType<ConfiguredObjectClassForName<DocumentName>>>\n      >\n    ): void;\n\n    /**\n     * Copy currently controlled PlaceableObjects to a temporary Array, ready to paste back into the scene later\n     * @returns The Array of copied PlaceableObject instances\n     */\n    copyObjects(): InstanceType<ConfiguredObjectClassForName<DocumentName>>[];\n\n    /**\n     * Paste currently copied PlaceableObjects back to the layer by creating new copies\n     * @param position - The destination position for the copied data.\n     * @param options  - (default: `{}`);\n     * @returns An Array of created PlaceableObject instances\n     */\n    pasteObjects(\n      position: Point,\n      options?: PasteOptions\n    ): Promise<InstanceType<ConfiguredDocumentClassForName<DocumentName>>[]>;\n\n    /**\n     * Select all PlaceableObject instances which fall within a coordinate rectangle.\n     * @param options        - (default: `{}`)\n     * @returns A boolean for whether the controlled set was changed in the operation\n     */\n    selectObjects(options?: SelectOptions): boolean;\n\n    /**\n     * Update all objects in this layer with a provided transformation.\n     * Conditionally filter to only apply to objects which match a certain condition.\n     * @param transformation - An object of data or function to apply to all matched objects\n     * @param condition      - A function which tests whether to target each object\n     *                         (default: `null`)\n     * @param options        - Additional options passed to Entity.update\n     *                         (default: `{}`)\n     * @returns An array of updated data once the operation is complete\n     */\n    updateAll(\n      transformation:\n        | ((\n            placeable: InstanceType<ConfiguredObjectClassForName<DocumentName>>\n          ) => Partial<\n            DataSourceForPlaceable<\n              ConcretePlaceableOrPlaceableObject<InstanceType<ConfiguredObjectClassForName<DocumentName>>>\n            >\n          >)\n        | Partial<\n            DataSourceForPlaceable<\n              ConcretePlaceableOrPlaceableObject<InstanceType<ConfiguredObjectClassForName<DocumentName>>>\n            >\n          >,\n      condition?: ((placeable: InstanceType<ConfiguredObjectClassForName<DocumentName>>) => boolean) | null,\n      options?: DocumentModificationContext\n    ): Promise<Array<InstanceType<ConfiguredDocumentClassForName<DocumentName>>>>;\n\n    /**\n     * Handle left mouse-click events which originate from the Canvas stage and are dispatched to this Layer.\n     * @param event - (unused)\n     * @see {@link Canvas#_onClickLeft}\n     */\n    protected _onClickLeft(event: PIXI.InteractionEvent): number | void;\n\n    /**\n     * Handle double left-click events which originate from the Canvas stage and are dispatched to this Layer.\n     * @param event - (unused)\n     * @see {@link Canvas#_onClickLeft2}\n     */\n    protected _onClickLeft2(event: PIXI.InteractionEvent): void;\n\n    /**\n     * Start a left-click drag workflow originating from the Canvas stage.\n     * @see {@link Canvas#_onDragLeftStart}\n     * @remarks This returns Promise<void> but is overridden by some subclasses.\n     */\n    protected _onDragLeftStart(event: PIXI.InteractionEvent): Promise<void | PlaceableObject>;\n\n    /**\n     * Continue a left-click drag workflow originating from the Canvas stage.\n     * @see {@link Canvas#_onDragLeftMove}\n     */\n    protected _onDragLeftMove(event: PIXI.InteractionEvent): void;\n\n    /**\n     * Conclude a left-click drag workflow originating from the Canvas stage.\n     * @see {@link Canvas#_onDragLeftDrop}\n     * @remarks Returns always a promise but is overridden in subclasses.\n     */\n    protected _onDragLeftDrop(\n      event: PIXI.InteractionEvent\n    ): Promise<InstanceType<ConfiguredDocumentClassForName<DocumentName>> | void> | void;\n\n    /**\n     * Cancel a left-click drag workflow originating from the Canvas stage.\n     * @param event - (unused)\n     * @see {@link Canvas#_onDragLeftDrop}\n     */\n    protected _onDragLeftCancel(event: PointerEvent): void;\n\n    /**\n     * Handle right mouse-click events which originate from the Canvas stage and are dispatched to this Layer.\n     * @param event - (unused)\n     * @see {@link Canvas#_onClickRight}\n     */\n    protected _onClickRight(event: PIXI.InteractionEvent): void;\n\n    /**\n     * Handle mouse-wheel events at the PlaceableObjects layer level to rotate multiple objects at once.\n     * This handler will rotate all controlled objects by some incremental angle.\n     * @param event - The mousewheel event which originated the request\n     * @remarks This methods just returns ReturnType\\<this['rotateMany']\\>|void but is overridden by subclasses\n     */\n    protected _onMouseWheel(\n      event: WheelEvent\n    ):\n      | ReturnType<this['rotateMany']>\n      | ReturnType<InstanceType<ConfiguredObjectClassForName<DocumentName>>['rotate']>\n      | void;\n\n    /**\n     * Handle a DELETE keypress while a placeable object is hovered\n     * @param event - The delete key press event which triggered the request\n     *                (unused)\n     */\n    protected _onDeleteKey(\n      event?: any\n    ): Promise<InstanceType<ConfiguredDocumentClassForName<DocumentName>>[] | undefined>;\n\n    /**\n     * @deprecated since 0.8.0\n     */\n    static get dataArray(): string;\n\n    /**\n     * @deprecated since 0.8.0\n     */\n    createMany(\n      data: Parameters<InstanceType<ConfiguredDocumentClass<typeof Scene>>['createEmbeddedDocuments']>[1],\n      options: Parameters<InstanceType<ConfiguredDocumentClass<typeof Scene>>['createEmbeddedDocuments']>[2]\n    ): ReturnType<InstanceType<ConfiguredDocumentClass<typeof Scene>>['createEmbeddedDocuments']>;\n\n    /**\n     * @deprecated since 0.8.0\n     */\n    updateMany(\n      data: Parameters<InstanceType<ConfiguredDocumentClass<typeof Scene>>['updateEmbeddedDocuments']>[1],\n      options: Parameters<InstanceType<ConfiguredDocumentClass<typeof Scene>>['updateEmbeddedDocuments']>[2]\n    ): ReturnType<InstanceType<ConfiguredDocumentClass<typeof Scene>>['updateEmbeddedDocuments']>;\n\n    /**\n     * @deprecated since 0.8.0\n     */\n    deleteMany(\n      data: Parameters<InstanceType<ConfiguredDocumentClass<typeof Scene>>['deleteEmbeddedDocuments']>[1],\n      options: Parameters<InstanceType<ConfiguredDocumentClass<typeof Scene>>['deleteEmbeddedDocuments']>[2]\n    ): ReturnType<InstanceType<ConfiguredDocumentClass<typeof Scene>>['deleteEmbeddedDocuments']>;\n  }\n\n  interface CanvasHistory<Placeable extends PlaceableObject> {\n    /**\n     * The type of operation stored as history (create, update, delete)\n     */\n    type: PlaceablesLayer.HistoryEventType;\n\n    /**\n     * The data corresponding to the action which may later be un-done\n     */\n    data: DataSourceForPlaceable<Placeable>[];\n  }\n\n  namespace PlaceablesLayer {\n    type HistoryEventType = 'create' | 'update' | 'delete';\n\n    /**\n     * @typeParam DocumentName - The key of the configuration which defines the object and document class.\n     */\n    interface LayerOptions<DocumentName extends PlaceableDocumentType> extends CanvasLayer.LayerOptions {\n      /**\n       * Does this layer support a mouse-drag workflow to create new objects?\n       * @defaultValue `game.user.isGM`\n       */\n      canDragCreate: boolean;\n\n      /**\n       * Can placeable objects in this layer be controlled?\n       * @defaultValue `false`\n       */\n      controllableObjects: boolean;\n\n      /**\n       * Can placeable objects in this layer be rotated?\n       * @defaultValue `false`\n       */\n      rotatableObjects: boolean;\n\n      /**\n       * Do objects in this layer snap to the grid\n       * @defaultValue `true`\n       */\n      snapToGrid: boolean;\n\n      /**\n       * The class used to represent an object on this layer.\n       * @defaultValue `getDocumentClass(this.documentName)`\n       */\n      objectClass: ConfiguredObjectClassForName<DocumentName>;\n\n      /**\n       * Does this layer use a quadtree to track object positions?\n       * @defaultValue `false`\n       */\n      quadtree: boolean;\n\n      /**\n       * The FormApplication class used to configure objects on this layer.\n       * @defaultValue `CONFIG[this.documentName].sheetClass`\n       */\n      sheetClass: ConstructorOf<FormApplication>;\n    }\n  }\n}\n\ninterface RotationOptions {\n  /**\n   * A target angle of rotation (in degrees) where zero faces \"south\"\n   */\n  angle?: number;\n\n  /**\n   * An incremental angle of rotation (in degrees)\n   */\n  delta?: number;\n\n  /**\n   * Snap the resulting angle to a multiple of some increment (in degrees)\n   */\n  snap?: number;\n\n  /**\n   * An Array of object IDs to target for rotation\n   */\n  ids?: string[];\n}\n\ninterface MovementOptions {\n  /**\n   * The number of incremental grid units in the horizontal direction\n   * @defaultValue `0`\n   */\n  dx?: number;\n\n  /**\n   * The number of incremental grid units in the vertical direction\n   * @defaultValue `0`\n   */\n  dy?: number;\n\n  /**\n   * Rotate the token to the keyboard direction instead of moving\n   * @defaultValue\n   */\n  rotate?: boolean;\n\n  /**\n   * An Array of object IDs to target for movement\n   * @defaultValue `this.controlled.filter(o => !o.data.locked).map(o => o.id)`\n   */\n  ids?: string[];\n}\n\ninterface PasteOptions {\n  /**\n   * Paste data in a hidden state, if applicable. Default is false.\n   * @defaultValue `false`\n   */\n  hidden?: boolean;\n\n  /**\n   * Snap the resulting objects to the grid. Default is true.\n   * @defaultValue `true`\n   */\n  snap?: boolean;\n}\n\ninterface SelectOptions {\n  /**\n   * The top-left x-coordinate of the selection rectangle\n   */\n  x?: number;\n\n  /**\n   * The top-left y-coordinate of the selection rectangle\n   */\n  y?: number;\n\n  /**\n   * The width of the selection rectangle\n   */\n  width?: number;\n\n  /**\n   * The height of the selection rectangle\n   */\n  height?: number;\n\n  /**\n   * Optional arguments provided to any called release() method\n   * @defaultValue `{}`\n   */\n  releaseOptions?: PlaceableObject.ReleaseOptions;\n\n  /**\n   * Optional arguments provided to any called control() method\n   * @defaultValue `{ releaseOthers: false }`\n   */\n  controlOptions?: PlaceableObject.ControlOptions;\n}\n"
    ]
  