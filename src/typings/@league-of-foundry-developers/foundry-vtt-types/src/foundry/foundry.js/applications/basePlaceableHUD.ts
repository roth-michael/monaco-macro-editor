
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/foundry.js/applications/basePlaceableHUD.d.ts",
      "/**\n * An abstract base class for displaying a heads-up-display interface bound to a Placeable Object on the canvas\n * @typeParam Object - the type of the PlaceableObject\n * @typeParam Options - the type of the options object\n */\ndeclare abstract class BasePlaceableHUD<\n  Object extends PlaceableObject<any> = PlaceableObject,\n  Options extends Application.Options = Application.Options\n> extends Application<Options> {\n  /**\n   * Reference a PlaceableObject this HUD is currently bound to\n   * @defaultValue `undefined`\n   */\n  object: Object | undefined;\n\n  /**\n   * @override\n   * @defaultValue\n   * ```\n   * foundry.utils.mergeObject(super.defaultOptions, {\n   *   classes: [\"placeable-hud\"],\n   *   popOut: false\n   * })\n   * ```\n   */\n  static get defaultOptions(): Application.Options;\n\n  /**\n   * Convenience access for the canvas layer which this HUD modifies\n   */\n  get layer(): Object['layer'] | undefined;\n\n  /**\n   * Bind the HUD to a new PlaceableObject and display it\n   * @param object - A PlaceableObject instance to which the HUD should be bound\n   */\n  bind(object: Object): void;\n\n  /**\n   * Clear the HUD by fading out it's active HTML and recording the new display state\n   */\n  clear(): void;\n\n  /** @override */\n  _render(...args: Parameters<Application<Options>['_render']>): Promise<void>;\n\n  /** @override */\n  getData(options?: Partial<Options>): ReturnType<Object['data']['toJSON']> & {\n    id: string;\n    classes: string;\n    appId: number;\n    isGM: boolean;\n    icons: typeof CONFIG['controlIcons'];\n  };\n\n  /** @override */\n  setPosition({ left, top, width, height, scale }?: Partial<Application.Position>): void;\n\n  /** @override */\n  activateListeners(html: JQuery): void;\n\n  /**\n   * Handle mouse clicks to control a HUD control button\n   * @param event - The originating click event\n   * @remarks This will always return a promise with documents is overridden by TokenHUD.\n   */\n  protected _onClickControl(event: JQuery.ClickEvent): unknown;\n\n  /**\n   * Toggle the visible state of all controlled objects in the Layer\n   * @param event - The originating click event\n   * @internal\n   */\n  protected _onToggleVisibility(event: JQuery.ClickEvent): Promise<Array<Object['document']>>;\n\n  /**\n   * Toggle locked state of all controlled objects in the Layer\n   * @param event - The originating click event\n   * @internal\n   */\n  protected _onToggleLocked(event: JQuery.ClickEvent): Promise<Array<Object['document']>>;\n\n  /**\n   * Handle sorting the z-order of the object\n   * @param up    - Move the object upwards in the vertical stack?\n   * @param event - The originating mouse click event\n   */\n  protected _onSort(up: boolean, event: JQuery.ClickEvent): Promise<Array<Object['document']>>;\n}\n"
    ]
  