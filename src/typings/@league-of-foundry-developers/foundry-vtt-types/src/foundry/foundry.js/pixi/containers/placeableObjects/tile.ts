
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/foundry.js/pixi/containers/placeableObjects/tile.d.ts",
      "import type { ConfiguredDocumentClass } from '../../../../../types/helperTypes';\n\ndeclare global {\n  /**\n   * A Tile is an implementation of PlaceableObject which represents a static piece of artwork or prop within the Scene.\n   * Tiles are drawn above the {@link BackgroundLayer} but below the {@link TokenLayer}.\n   *\n   * @example\n   * ```typescript\n   * Tile.create<Tile>({\n   *   img: \"path/to/tile-artwork.png\",\n   *   width: 300,\n   *   height: 300,\n   *   scale: 1,\n   *   x: 1000,\n   *   y: 1000,\n   *   z: 370,\n   *   rotation: 45,\n   *   hidden: false,\n   *   locked: true\n   * });\n   * ```\n   *\n   * @see {@link TilesLayer}\n   * @see {@link TileSheet}\n   * @see {@link TileHUD}\n   */\n  class Tile extends PlaceableObject<InstanceType<ConfiguredDocumentClass<typeof TileDocument>>> {\n    /**\n     * @remarks Not used for `Tile`\n     */\n    controlIcon: null;\n\n    /**\n     * The Tile border frame\n     */\n    frame: PIXI.Container | null;\n\n    /**\n     * The Tile image container\n     */\n    tile: PIXI.Container | null;\n\n    /**\n     * The primary tile image texture\n     */\n    texture: PIXI.Texture | null;\n\n    /** @override */\n    static get embeddedName(): 'Tile';\n\n    /**\n     * Apply initial sanitizations to the provided input data to ensure that a Tile has valid required attributes.\n     */\n    protected _cleanData(): void;\n\n    /**\n     * @remarks\n     * Not implemented by Tile\n     */\n    get bounds(): never;\n\n    /**\n     * Get the native aspect ratio of the base texture for the Tile sprite\n     */\n    get aspectRatio(): number;\n\n    /** @override */\n    draw(): Promise<this>;\n\n    /** @override */\n    refresh(): this;\n\n    /**\n     * Refresh the display of the Tile border\n     */\n    protected _refreshBorder(b: Rectangle): void;\n\n    /**\n     * Refresh the display of the Tile resizing handle\n     */\n    protected _refreshHandle(b: Rectangle): void;\n\n    /** @override */\n    activateListeners(): void;\n\n    /** @override */\n    protected _onUpdate(data: Tile.Data): void;\n\n    /** @override */\n    protected _canHUD(user?: User, event?: any): boolean;\n\n    /** @override */\n    protected _canConfigure(user: User, event?: any): boolean;\n\n    /** @override */\n    protected _onDragLeftStart(event: PIXI.InteractionEvent): void;\n\n    /** @override */\n    protected _onDragLeftMove(event: PIXI.InteractionEvent): void;\n\n    /** @override */\n    protected _onDragLeftDrop(event: PIXI.InteractionEvent): Promise<unknown>;\n\n    /** @override */\n    protected _onDragLeftCancel(event: MouseEvent): void;\n\n    /**\n     * Handle mouse-over event on a control handle\n     * @param event - The mouseover event\n     */\n    protected _onHandleHoverIn(event: PIXI.InteractionEvent): void;\n\n    /**\n     * Handle mouse-out event on a control handle\n     * @param event - The mouseout event\n     */\n    protected _onHandleHoverOut(event: PIXI.InteractionEvent): void;\n\n    /**\n     * When we start a drag event - create a preview copy of the Tile for re-positioning\n     * @param event - The mousedown event\n     */\n    protected _onHandleMouseDown(event: PIXI.InteractionEvent): void;\n\n    /**\n     * Handle the beginning of a drag event on a resize handle\n     */\n    protected _onHandleDragStart(event: PIXI.InteractionEvent): void;\n\n    /**\n     * Handle mousemove while dragging a tile scale handler\n     * @param event - The mousemove event\n     */\n    protected _onHandleDragMove(event: PIXI.InteractionEvent): void;\n\n    /**\n     * Handle mouseup after dragging a tile scale handler\n     * @param event - The mouseup event\n     */\n    protected _onHandleDragDrop(event: PIXI.InteractionEvent): Promise<this>;\n\n    /**\n     * Handle cancellation of a drag event for one of the resizing handles\n     */\n    protected _onHandleDragCancel(event: PIXI.InteractionEvent): void;\n\n    /**\n     * Create a preview tile with a background texture instead of an image\n     */\n    static createPreview(data: Tile.Data): Tile;\n  }\n\n  namespace Tile {\n    interface Data {\n      height: number;\n      hidden: boolean;\n      img: string;\n      locked: boolean;\n      rotation: number;\n      scale: number;\n      width: number;\n      x: number;\n      y: number;\n      z: number;\n    }\n  }\n}\n"
    ]
  