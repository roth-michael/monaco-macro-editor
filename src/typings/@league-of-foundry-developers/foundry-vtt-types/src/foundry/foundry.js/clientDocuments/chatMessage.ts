
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/foundry.js/clientDocuments/chatMessage.d.ts",
      "import { ConfiguredDocumentClass, ConstructorDataType } from '../../../types/helperTypes';\nimport { DocumentModificationOptions } from '../../common/abstract/document.mjs';\n\ndeclare global {\n  /**\n   * The client-side ChatMessage document which extends the common BaseChatMessage abstraction.\n   * Each ChatMessage document contains ChatMessageData which defines its data schema.\n   *\n   * @see {@link data.ChatMessageData}              The ChatMessage data schema\n   * @see {@link documents.Messages}                The world-level collection of ChatMessage documents\n   *\n   * @param data - Initial data provided to construct the ChatMessage document\n   */\n  class ChatMessage extends ClientDocumentMixin(foundry.documents.BaseChatMessage) {\n    constructor(\n      data?: ConstructorParameters<ConstructorOf<foundry.documents.BaseChatMessage>>[0],\n      context?: ConstructorParameters<ConstructorOf<foundry.documents.BaseChatMessage>>[1]\n    );\n\n    /**\n     * If the chat message contains a Roll instance, cache it here\n     * @defaultValue `null`\n     */\n    protected _roll: Roll | null;\n\n    /**\n     * Return the recommended String alias for this message.\n     * The alias could be a Token name in the case of in-character messages or dice rolls.\n     * Alternatively it could be a User name in the case of OOC chat or whispers.\n     */\n    get alias(): string;\n\n    /**\n     * Is the current User the author of this message?\n     */\n    get isAuthor(): boolean;\n\n    /**\n     * Return whether the content of the message is visible to the current user.\n     * For certain dice rolls, for example, the message itself may be visible while the content of that message is not.\n     */\n    get isContentVisible(): boolean;\n\n    /**\n     * Test whether the chat message contains a dice roll\n     */\n    get isRoll(): boolean;\n\n    /**\n     * Return the Roll instance contained in this chat message, if one is present\n     */\n    get roll(): Roll | null;\n\n    /**\n     * Return whether the ChatMessage is visible to the current User.\n     * Messages may not be visible if they are private whispers.\n     */\n    get visible(): boolean;\n\n    /**\n     * The User who created the chat message.\n     */\n    get user(): User | undefined;\n\n    /** @override */\n    prepareData(): void;\n\n    /**\n     * Transform a provided object of ChatMessage data by applying a certain rollMode to the data object.\n     * @param chatData - The object of ChatMessage data prior to applying a rollMode preference\n     * @param rollMode - The rollMode preference to apply to this message data\n     * @returns The modified ChatMessage data with rollMode preferences applied\n     */\n    static applyRollMode(\n      chatData: ConstructorDataType<foundry.data.ChatMessageData>,\n      rollMode: foundry.CONST.DiceRollMode\n    ): ConstructorDataType<foundry.data.ChatMessageData>;\n\n    /**\n     * Update the data of a ChatMessage instance to apply a requested rollMode\n     * @param rollMode - The rollMode preference to apply to this message data\n     */\n    applyRollMode(rollMode: foundry.CONST.DiceRollMode): void;\n\n    /**\n     * Attempt to determine who is the speaking character (and token) for a certain Chat Message\n     * First assume that the currently controlled Token is the speaker\n     *\n     * @param scene - The Scene in which the speaker resides\n     * @param actor - The Actor whom is speaking\n     * @param token - The Token whom is speaking\n     * @param alias - The name of the speaker to display\n     *\n     * @returns The identified speaker data\n     */\n    static getSpeaker({\n      scene,\n      actor,\n      token,\n      alias\n    }?: {\n      scene?: InstanceType<ConfiguredDocumentClass<typeof Scene>>;\n      actor?: InstanceType<ConfiguredDocumentClass<typeof Actor>>;\n      token?: InstanceType<ConfiguredDocumentClass<typeof TokenDocument>>;\n      alias?: string;\n    }): foundry.data.ChatMessageData['speaker']['_source'];\n\n    /**\n     * A helper to prepare the speaker object based on a target TokenDocument\n     *\n     * @param token - The TokenDocument of the speaker\n     * @param alias - The name of the speaker to display\n     * @returns The identified speaker data\n     */\n    protected static _getSpeakerFromToken({\n      token,\n      alias\n    }: {\n      token: InstanceType<ConfiguredDocumentClass<typeof foundry.documents.BaseToken>>;\n      alias: string;\n    }): foundry.data.ChatMessageData['speaker']['_source'];\n    /**\n     * A helper to prepare the speaker object based on a target TokenDocument\n     *\n     * @param token - The TokenDocument of the speaker\n     * @param alias - The name of the speaker to display\n     * @returns The identified speaker data\n     * @deprecated Passing a Token is deprecated, a TokenDocument should be passed instead\n     */\n    protected static _getSpeakerFromToken({\n      token,\n      alias\n    }: {\n      token: InstanceType<CONFIG['Token']['objectClass']>;\n      alias: string;\n    }): foundry.data.ChatMessageData['speaker']['_source'];\n\n    /**\n     * A helper to prepare the speaker object based on a target Actor\n     *\n     * @param scene - The Scene is which the speaker resides\n     * @param actor - The Actor that is speaking\n     * @param alias - The name of the speaker to display\n     * @returns The identified speaker data\n     */\n    protected static _getSpeakerFromActor({\n      scene,\n      actor,\n      alias\n    }: {\n      scene?: InstanceType<ConfiguredDocumentClass<typeof Scene>>;\n      actor: InstanceType<ConfiguredDocumentClass<typeof Actor>>;\n      alias?: string;\n    }): foundry.data.ChatMessageData['speaker']['_source'];\n\n    /**\n     * A helper to prepare the speaker object based on a target User\n     *\n     * @param scene - The Scene in which the speaker resides\n     * @param user  - The User who is speaking\n     * @param alias - The name of the speaker to display\n     * @returns The identified speaker data\n     */\n    protected static _getSpeakerFromUser({\n      scene,\n      user,\n      alias\n    }: {\n      scene?: InstanceType<ConfiguredDocumentClass<typeof Scene>>;\n      user: InstanceType<ConfiguredDocumentClass<typeof User>>;\n      alias?: string;\n    }): foundry.data.ChatMessageData['speaker']['_source'];\n\n    /**\n     * Obtain an Actor instance which represents the speaker of this message (if any)\n     * @param speaker - The speaker data object\n     */\n    static getSpeakerActor(speaker: foundry.data.ChatMessageData['speaker']['_source']): Actor | null;\n\n    /**\n     * Obtain a data object used to evaluate any dice rolls associated with this particular chat message\n     */\n    getRollData(): InstanceType<ConfiguredDocumentClass<typeof Actor>>['getRollData'] | {};\n\n    /**\n     * Given a string whisper target, return an Array of the user IDs which should be targeted for the whisper\n     *\n     * @param name - The target name of the whisper target\n     * @returns An array of User instances\n     */\n    static getWhisperRecipients(name: string): StoredDocument<InstanceType<ConfiguredDocumentClass<typeof User>>>[];\n\n    /**\n     * Render the HTML for the ChatMessage which should be added to the log\n     */\n    getHTML(): Promise<JQuery>;\n\n    /** @override */\n    _preCreate(\n      data: ConstructorDataType<foundry.data.ChatMessageData>,\n      options: DocumentModificationOptions,\n      user: foundry.documents.BaseUser\n    ): Promise<void>;\n\n    /** @override */\n    _onCreate(\n      data: foundry.data.ChatMessageData['_source'],\n      options: DocumentModificationOptions,\n      userId: string\n    ): void;\n\n    /** @override */\n    _onUpdate(\n      data: DeepPartial<foundry.data.ChatMessageData['_source']>,\n      options: DocumentModificationOptions,\n      userId: string\n    ): void;\n\n    /** @override */\n    _onDelete(options: DocumentModificationOptions, userId: string): void;\n\n    /**\n     * Export the content of the chat message into a standardized log format\n     */\n    export(): string;\n  }\n}\n\nexport {};\n"
    ]
  