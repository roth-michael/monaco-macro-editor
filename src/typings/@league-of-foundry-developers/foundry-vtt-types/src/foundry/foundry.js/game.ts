
    export default [
      "@league-of-foundry-developers/foundry-vtt-types/src/foundry/foundry.js/game.d.ts",
      "import { ConfiguredDocumentClass, ConfiguredDocumentClassForName, DocumentConstructor } from '../../types/helperTypes';\n\ndeclare global {\n  /**\n   * The core Game instance which encapsulates the data, settings, and states relevant for managing the game experience.\n   * The singleton instance of the Game class is available as the global variable game.\n   */\n  class Game {\n    /**\n     * @param view      - The named view which is active for this game instance.\n     * @param data      - An object of all the World data vended by the server when the client first connects\n     * @param sessionId - The ID of the currently active client session retrieved from the browser cookie\n     * @param socket    - The open web-socket which should be used to transact game-state data\n     */\n    constructor(view: Game['view'], data: Game.ConstructorData, sessionId: Game['sessionId'], socket: Game['socket']);\n\n    /**\n     * The named view which is currently active.\n     * Game views include: join, setup, players, license, game, stream\n     */\n    view: Game.View;\n\n    /**\n     * The object of world data passed from the server\n     */\n    data: Game.Data;\n\n    /**\n     * The id of the active World user, if any\n     */\n    userId: string | null;\n\n    /**\n     * The game World which is currently active\n     */\n    world: this['data']['world'];\n\n    /**\n     * The System which is used to power this game world\n     */\n    system: this['data']['system'];\n\n    /**\n     * A Map of active modules which are currently enabled in this World\n     * @remarks\n     * - This is actually defined twice. The second time it has the documentation \"A mapping of installed modules\".\n     * - This includes _all_ modules that are installed, not only those that are enabled.\n     */\n    modules: Map<string, this['data']['modules'][number]>;\n\n    /**\n     * A mapping of WorldCollection instances, one per primary Document type.\n     */\n    collections: foundry.utils.Collection<WorldCollection<DocumentConstructor, string>>;\n\n    /**\n     * A mapping of CompendiumCollection instances, one per Compendium pack.\n     */\n    packs: foundry.utils.Collection<CompendiumCollection<CompendiumCollection.Metadata>>;\n\n    /**\n     * Localization support\n     */\n    i18n: Localization;\n\n    /**\n     * The Keyboard Manager\n     * @remarks Initialized between the `'setup'` and `'ready'` hook events.\n     * @defaultValue `null`\n     */\n    keyboard: KeyboardManager | null;\n\n    /**\n     * The user role permissions setting\n     * @remarks Initialized between the `'setup'` and `'ready'` hook events.\n     * @defaultValue `null`\n     */\n    permissions: Game.Permissions | null;\n\n    /**\n     * The client session id which is currently active\n     */\n    sessionId: string;\n\n    /**\n     * Client settings which are used to configure application behavior\n     */\n    settings: ClientSettings;\n\n    /**\n     * A reference to the open Socket.io connection\n     */\n    socket: io.Socket | null;\n\n    /**\n     * A singleton GameTime instance which manages the progression of time within the game world.\n     */\n    time: GameTime;\n\n    /**\n     * A singleton reference to the Canvas object which may be used.\n     */\n    canvas: Canvas;\n\n    /**\n     * A singleton instance of the Audio Helper class\n     */\n    audio: AudioHelper;\n\n    /**\n     * A singleton instance of the Video Helper class\n     */\n    video: VideoHelper;\n\n    /**\n     * Whether the Game is running in debug mode\n     * @defaultValue `false`\n     */\n    debug: boolean;\n\n    /**\n     * A flag for whether texture assets for the game canvas are currently loading\n     * @defaultValue `false`\n     */\n    loading: boolean;\n\n    /**\n     * A flag for whether the Game has successfully reached the \"ready\" hook\n     * @defaultValue `false`\n     */\n    ready: boolean;\n\n    /**\n     * Fetch World data and return a Game instance\n     * @param view      - The named view being created\n     * @param sessionId - The current sessionId of the connecting client\n     * @returns A Promise which resolves to the created Game instance\n     */\n    static create(view: string, sessionId: string | null): Promise<Game>;\n\n    /**\n     * Establish a live connection to the game server through the socket.io URL\n     * @param sessionId - The client session ID with which to establish the connection\n     * @returns A promise which resolves to the connected socket, if successful\n     */\n    static connect(sessionId: string): Promise<io.Socket>;\n\n    /**\n     * Retrieve the cookies which are attached to the client session\n     * @returns The session cookies\n     */\n    static getCookies(): Record<string, string>;\n\n    /**\n     * Request World data from server and return it\n     */\n    static getWorldData(socket: io.Socket): Promise<Game.Data>;\n\n    /**\n     * Get the current World status upon initial connection.\n     */\n    static getWorldStatus(socket: io.Socket): Promise<boolean>;\n\n    /**\n     * Configure package data that is currently enabled for this world\n     */\n    setupPackages(data: Game.Data): void;\n\n    /**\n     * Return the named scopes which can exist for packages.\n     * Scopes are returned in the prioritization order that their content is loaded.\n     * @returns An array of string package scopes\n     */\n    getPackageScopes(): string[];\n\n    /**\n     * Initialize the Game for the current window location\n     */\n    initialize(): void;\n\n    /**\n     * Display certain usability error messages which are likely to result in the player having a bad experience.\n     */\n    protected _displayUsabilityErrors(): void;\n\n    /**\n     * Shut down the currently active Game. Requires GameMaster user permission.\n     */\n    shutDown(): Promise<void>;\n\n    /**\n     * Fully set up the game state, initializing Entities, UI applications, and the Canvas\n     */\n    setupGame(): Promise<void>;\n\n    /**\n     * Initialize game state data by creating WorldCollection instances for every primary Document type\n     */\n    initializeEntities(): void;\n\n    /**\n     * @remarks Initialized between the `'setup'` and `'ready'` hook events.\n     */\n    users?: ConfiguredCollectionClassForName<'User'>;\n\n    /**\n     * @remarks Initialized between the `'setup'` and `'ready'` hook events.\n     */\n    folders?: ConfiguredCollectionClassForName<'Folder'>;\n\n    /**\n     * @remarks Initialized between the `'setup'` and `'ready'` hook events.\n     */\n    actors?: ConfiguredCollectionClassForName<'Actor'>;\n\n    /**\n     * @remarks Initialized between the `'setup'` and `'ready'` hook events.\n     */\n    items?: ConfiguredCollectionClassForName<'Item'>;\n\n    /**\n     * @remarks Initialized between the `'setup'` and `'ready'` hook events.\n     */\n    scenes?: ConfiguredCollectionClassForName<'Scene'>;\n\n    /**\n     * @remarks Initialized between the `'setup'` and `'ready'` hook events.\n     */\n    combats?: ConfiguredCollectionClassForName<'Combat'>;\n\n    /**\n     * @remarks Initialized between the `'setup'` and `'ready'` hook events.\n     */\n    journal?: ConfiguredCollectionClassForName<'JournalEntry'>;\n\n    /**\n     * @remarks Initialized between the `'setup'` and `'ready'` hook events.\n     */\n    macros?: ConfiguredCollectionClassForName<'Macro'>;\n\n    /**\n     * @remarks Initialized between the `'setup'` and `'ready'` hook events.\n     */\n    playlists?: ConfiguredCollectionClassForName<'Playlist'>;\n\n    /**\n     * @remarks Initialized between the `'setup'` and `'ready'` hook events.\n     */\n    tables?: ConfiguredCollectionClassForName<'RollTable'>;\n\n    /**\n     * @remarks Initialized between the `'setup'` and `'ready'` hook events.\n     */\n    messages?: ConfiguredCollectionClassForName<'ChatMessage'>;\n\n    /**\n     * Initialize the Compendium packs which are present within this Game\n     * Create a Collection which maps each Compendium pack using it's collection ID\n     */\n    initializePacks(): Promise<this['packs']>;\n\n    /**\n     * Initialize the WebRTC implementation\n     */\n    initializeRTC(): Promise<boolean>;\n\n    /**\n     * @remarks Initialized between the `'setup'` and `'ready'` hook events.\n     */\n    webrtc?: AVMaster;\n\n    /**\n     * Initialize core UI elements\n     */\n    initializeUI(): void;\n\n    /**\n     * Initialize the game Canvas\n     */\n    initializeCanvas(): Promise<void>;\n\n    /**\n     * Ensure that necessary fonts have loaded and are ready for use\n     * Enforce a maximum timeout in milliseconds.\n     * Proceed with rendering after that point even if fonts are not yet available.\n     * @param ms - The timeout to delay\n     */\n    protected _checkFontsReady(ms: number): Promise<void>;\n\n    /**\n     * Initialize Keyboard and Mouse controls\n     */\n    initializeKeyboard(): void;\n\n    /**\n     * Register core game settings\n     */\n    registerSettings(): void;\n\n    /**\n     * Is the current session user authenticated as an application administrator?\n     */\n    get isAdmin(): boolean;\n\n    /**\n     * The currently connected User entity, or null if Users is not yet initialized\n     */\n    get user(): StoredDocument<InstanceType<ConfiguredDocumentClass<typeof User>>> | null;\n\n    /**\n     * A convenience accessor for the currently viewed Combat encounter\n     */\n    get combat(): CombatEncounters['viewed'];\n\n    /**\n     * A state variable which tracks whether or not the game session is currently paused\n     */\n    get paused(): boolean;\n\n    /**\n     * A convenient reference to the currently active canvas tool\n     */\n    get activeTool(): string;\n\n    /**\n     * Toggle the pause state of the game\n     * Trigger the `pauseGame` Hook when the paused state changes\n     * @param pause - The desired pause state. When true, the game will be paused, when false the game will be un-paused.\n     * @param push  - Push the pause state change to other connected clients? Requires an GM user.\n     *                (default: `false`)\n     */\n    togglePause(pause: boolean, push?: boolean): void;\n\n    /**\n     * Log out of the game session by returning to the Join screen\n     */\n    logOut(): void;\n\n    /**\n     * Activate Socket event listeners which are used to transact game state data with the server\n     */\n    activateSocketListeners(): void;\n\n    /**\n     * Activate Event Listeners which apply to every Game View\n     */\n    activateListeners(): void;\n\n    /**\n     * Support mousewheel control for range type input elements\n     * @param event - A Mouse Wheel scroll event\n     */\n    protected static _handleMouseWheelInputChange(event: WheelEvent): void;\n\n    /**\n     * On left mouse clicks, check if the element is contained in a valid hyperlink and open it in a new tab.\n     */\n    protected _onClickHyperlink(event: MouseEvent): void;\n\n    /**\n     * Prevent starting a drag and drop workflow on elements within the document unless the element has the draggable\n     * attribute explicitly defined or overrides the dragstart handler.\n     * @param event - The initiating drag start event\n     */\n    protected _onPreventDragstart(event: DragEvent): boolean;\n\n    /**\n     * Disallow dragging of external content onto anything but a file input element\n     * @param event - The requested drag event\n     */\n    protected _onPreventDragover(event: DragEvent): void;\n\n    /**\n     * Disallow dropping of external content onto anything but a file input element\n     * @param event - The requested drag event\n     */\n    protected _onPreventDrop(event: DragEvent): void;\n\n    /**\n     * On a left-click event, remove any currently displayed inline roll tooltip\n     * @param event - The mousedown pointer event\n     */\n    protected _onPointerDown(event: PointerEvent): void;\n\n    /**\n     * Fallback handling for mouse-up events which aren't handled further upstream.\n     * @param event - The mouseup pointer event\n     */\n    protected _onPointerUp(event: PointerEvent): void;\n\n    /**\n     * Handle resizing of the game window\n     * Reposition any active UI windows\n     */\n    protected _onWindowResize(event: UIEvent): void;\n\n    /**\n     * Handle window unload operations to clean up any data which may be pending a final save\n     * @param event - The window unload event which is about to occur\n     */\n    protected _onWindowBeforeUnload(event: Event): Promise<void>;\n\n    /**\n     * Handle cases where the browser window loses focus to reset detection of currently pressed keys\n     * @param event - The originating window.blur event\n     */\n    protected _onWindowBlur(event: FocusEvent): void;\n\n    /**\n     * @param event - (unused)\n     */\n    protected _onWindowPopState(event: PopStateEvent): void;\n\n    /**\n     * Initialize elements required for the current view\n     */\n    protected _initializeView(): Promise<void>;\n\n    /**\n     * Initialization steps for the primary Game view\n     */\n    protected _initializeGameView(): Promise<void>;\n\n    /**\n     * Initialization steps for the Stream helper view\n     */\n    protected _initializeStreamView(): Promise<void>;\n  }\n\n  namespace Game {\n    interface Language {\n      lang: string;\n      name: string;\n      path: string;\n    }\n\n    interface PackageData<T> {\n      type: 'world' | 'system' | 'module';\n      data: T;\n      id: string;\n      path: string;\n      scripts: string[];\n      esmodules: string[];\n      styles: string[];\n      languages: Language[];\n      packs: {\n        name: string;\n        label: string;\n        path: string;\n        private: boolean;\n        entity: foundry.CONST.CompendiumEntityType;\n        system?: string;\n        absPath: string;\n        package: string;\n      };\n      locked: boolean;\n      availability: number;\n      unavailable: boolean;\n      _systemUpdateCheckTime: number;\n    }\n\n    interface WorldData<T> extends PackageData<T> {\n      type: 'world';\n    }\n\n    interface SystemData<T> extends PackageData<T> {\n      type: 'system';\n      template: {\n        Actor?: {\n          types: string[];\n          templates?: Partial<Record<string, unknown>>;\n        } & Partial<Record<string, unknown>>;\n        Item?: {\n          types: string[];\n          templates?: Partial<Record<string, unknown>>;\n        } & Partial<Record<string, unknown>>;\n      };\n      entityTypes: { [Key in foundry.CONST.EntityType | 'Setting' | 'FogExploration']: string[] };\n      model: {\n        Actor: Partial<Record<string, Partial<Record<string, unknown>>>>;\n        Item: Partial<Record<string, Partial<Record<string, unknown>>>>;\n      };\n    }\n\n    interface ModuleData<T> extends PackageData<T> {\n      type: 'module';\n      active: boolean;\n    }\n\n    type Data = {\n      userId: string;\n      version: string;\n      world: WorldData<foundry.packages.WorldData>;\n      system: SystemData<foundry.packages.SystemData>;\n      modules: ModuleData<foundry.packages.ModuleData>[];\n      paused: boolean;\n      addresses: {\n        local: string;\n        remote: string;\n      };\n      files: {\n        storages: ('public' | 'data' | 's3')[];\n        s3?: {\n          endpoint: {\n            protocol: string;\n            host: string;\n            port: number;\n            hostname: string;\n            pathname: string;\n            path: string;\n            href: string;\n          };\n          buckets: string[];\n        };\n      };\n      options: {\n        language: string;\n        port: number;\n        routePrefix: string | null;\n        updateChannel: string;\n        demo: boolean;\n      };\n      activeUsers: string[];\n      packs: {\n        name: string;\n        label: string;\n        path: string;\n        private: boolean;\n        entity: foundry.CONST.CompendiumEntityType;\n        system?: string;\n        package: string;\n        index: { name: string; type: string; _id: string }[];\n      };\n      coreUpdate: string | null;\n      systemUpdate: string | null;\n    } & {\n      [DocumentType in\n        | foundry.CONST.EntityType\n        | 'Setting' as ConfiguredDocumentClassForName<DocumentType>['metadata']['collection']]?: InstanceType<\n        ConfiguredDocumentClassForName<DocumentType>\n      >['data']['_source'][];\n    };\n\n    type ConstructorData = Omit<Data, 'world' | 'system' | 'modules'> & {\n      world: WorldData<foundry.packages.WorldData['_source']>;\n      system: SystemData<foundry.packages.SystemData['_source']>;\n      modules: ModuleData<foundry.packages.ModuleData['_source']>[];\n    };\n\n    type Permissions = {\n      [Key in keyof typeof foundry.CONST.USER_PERMISSIONS]: foundry.CONST.UserRole[];\n    };\n\n    type View = ValueOf<typeof foundry.CONST.GAME_VIEWS>;\n  }\n}\n\ntype ConfiguredCollectionClassForName<Name extends foundry.CONST.EntityType> = InstanceType<CONFIG[Name]['collection']>;\n"
    ]
  